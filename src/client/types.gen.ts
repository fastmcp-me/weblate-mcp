// This file is auto-generated by @hey-api/openapi-ts

/**
 * * `0` - Resource updated
 * * `1` - Translation completed
 * * `2` - Translation changed
 * * `3` - Comment added
 * * `4` - Suggestion added
 * * `5` - Translation added
 * * `6` - Automatically translated
 * * `7` - Suggestion accepted
 * * `8` - Translation reverted
 * * `9` - Translation uploaded
 * * `13` - Source string added
 * * `14` - Component locked
 * * `15` - Component unlocked
 * * `17` - Changes committed
 * * `18` - Changes pushed
 * * `19` - Repository reset
 * * `20` - Repository merged
 * * `21` - Repository rebased
 * * `22` - Repository merge failed
 * * `23` - Repository rebase failed
 * * `24` - Parsing failed
 * * `25` - Translation removed
 * * `26` - Suggestion removed
 * * `27` - Translation replaced
 * * `28` - Repository push failed
 * * `29` - Suggestion removed during clean-up
 * * `30` - Source string changed
 * * `31` - String added
 * * `32` - Bulk status changed
 * * `33` - Visibility changed
 * * `34` - User added
 * * `35` - User removed
 * * `36` - Translation approved
 * * `37` - Marked for edit
 * * `38` - Component removed
 * * `39` - Project removed
 * * `41` - Project renamed
 * * `42` - Component renamed
 * * `43` - Moved component
 * * `45` - Contributor joined
 * * `46` - Announcement posted
 * * `47` - Alert triggered
 * * `48` - Language added
 * * `49` - Language requested
 * * `50` - Project created
 * * `51` - Component created
 * * `52` - User invited
 * * `53` - Repository notification received
 * * `54` - Translation replaced file by upload
 * * `55` - License changed
 * * `56` - Contributor license agreement changed
 * * `57` - Screenshot added
 * * `58` - Screenshot uploaded
 * * `59` - String updated in the repository
 * * `60` - Add-on installed
 * * `61` - Add-on configuration changed
 * * `62` - Add-on uninstalled
 * * `63` - String removed
 * * `64` - Comment removed
 * * `65` - Comment resolved
 * * `66` - Explanation updated
 * * `67` - Category removed
 * * `68` - Category renamed
 * * `69` - Category moved
 * * `70` - Saving string failed
 * * `71` - String added in the repository
 * * `72` - String updated in the upload
 * * `73` - String added in the upload
 * * `74` - Translation updated by source upload
 * * `75` - Component translation completed
 * * `76` - Applied enforced check
 * * `77` - Propagated change
 * * `78` - File uploaded
 * * `79` - Extra flags updated
 */
export type ActionEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 13 | 14 | 15 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 41 | 42 | 43 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79;

export type Addon = {
    readonly component: string;
    readonly project: string;
    name: string;
    readonly id: number;
    configuration?: unknown;
    readonly url: string;
};

export type AddonsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type AddonsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type AddonsPartialUpdateConfigurationErrorComponent = {
    /**
     * * `configuration` - configuration
     */
    attr: 'configuration';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type AddonsPartialUpdateError = ({
    attr: 'non_field_errors';
} & AddonsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & AddonsPartialUpdateNameErrorComponent) | ({
    attr: 'configuration';
} & AddonsPartialUpdateConfigurationErrorComponent);

export type AddonsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & AddonsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type AddonsPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type AddonsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type AddonsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<AddonsPartialUpdateError>;
};

export type AddonsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type AddonsUpdateConfigurationErrorComponent = {
    /**
     * * `configuration` - configuration
     */
    attr: 'configuration';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type AddonsUpdateError = ({
    attr: 'non_field_errors';
} & AddonsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & AddonsUpdateNameErrorComponent) | ({
    attr: 'configuration';
} & AddonsUpdateConfigurationErrorComponent);

export type AddonsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & AddonsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type AddonsUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type AddonsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type AddonsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<AddonsUpdateError>;
};

export type AutoComponentList = {
    /**
     * Project regular expression
     * Regular expression which is used to match project slug.
     */
    project_match?: string;
    /**
     * Component regular expression
     * Regular expression which is used to match component slug.
     */
    component_match?: string;
};

export type BasicUser = {
    readonly id: number;
    full_name: string;
    /**
     * Username may only contain letters, numbers or the following characters: @ . + - _
     */
    username: string;
};

export type BlankEnum = '';

export type CategoriesCreateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null' | 'required';
    detail: string;
};

export type CategoriesCreateError = ({
    attr: 'non_field_errors';
} & CategoriesCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & CategoriesCreateNameErrorComponent) | ({
    attr: 'slug';
} & CategoriesCreateSlugErrorComponent) | ({
    attr: 'project';
} & CategoriesCreateProjectErrorComponent) | ({
    attr: 'category';
} & CategoriesCreateCategoryErrorComponent);

export type CategoriesCreateErrorResponse400 = ({
    type: 'validation_error';
} & CategoriesCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type CategoriesCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type CategoriesCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `unique` - unique
     */
    code: 'invalid' | 'null' | 'unique';
    detail: string;
};

export type CategoriesCreateProjectErrorComponent = {
    /**
     * * `project` - project
     */
    attr: 'project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null' | 'required';
    detail: string;
};

export type CategoriesCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type CategoriesCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<CategoriesCreateError>;
};

export type CategoriesDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type CategoriesListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type CategoriesPartialUpdateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null' | 'required';
    detail: string;
};

export type CategoriesPartialUpdateError = ({
    attr: 'non_field_errors';
} & CategoriesPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & CategoriesPartialUpdateNameErrorComponent) | ({
    attr: 'slug';
} & CategoriesPartialUpdateSlugErrorComponent) | ({
    attr: 'project';
} & CategoriesPartialUpdateProjectErrorComponent) | ({
    attr: 'category';
} & CategoriesPartialUpdateCategoryErrorComponent);

export type CategoriesPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & CategoriesPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type CategoriesPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type CategoriesPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `unique` - unique
     */
    code: 'invalid' | 'null' | 'unique';
    detail: string;
};

export type CategoriesPartialUpdateProjectErrorComponent = {
    /**
     * * `project` - project
     */
    attr: 'project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null' | 'required';
    detail: string;
};

export type CategoriesPartialUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type CategoriesPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<CategoriesPartialUpdateError>;
};

export type CategoriesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type CategoriesStatisticsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type CategoriesUpdateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null' | 'required';
    detail: string;
};

export type CategoriesUpdateError = ({
    attr: 'non_field_errors';
} & CategoriesUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & CategoriesUpdateNameErrorComponent) | ({
    attr: 'slug';
} & CategoriesUpdateSlugErrorComponent) | ({
    attr: 'project';
} & CategoriesUpdateProjectErrorComponent) | ({
    attr: 'category';
} & CategoriesUpdateCategoryErrorComponent);

export type CategoriesUpdateErrorResponse400 = ({
    type: 'validation_error';
} & CategoriesUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type CategoriesUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type CategoriesUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `unique` - unique
     */
    code: 'invalid' | 'null' | 'unique';
    detail: string;
};

export type CategoriesUpdateProjectErrorComponent = {
    /**
     * * `project` - project
     */
    attr: 'project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null' | 'required';
    detail: string;
};

export type CategoriesUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type CategoriesUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<CategoriesUpdateError>;
};

export type Category = {
    readonly id: number;
    /**
     * Category name
     * Display name
     */
    name: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug: string;
    project: string;
    category?: string;
    readonly url: string;
    readonly statistics_url: string;
};

export type Change = {
    readonly unit: string;
    readonly component: string;
    readonly translation: string;
    readonly user: string;
    readonly author: string;
    readonly timestamp: string;
    action?: ActionEnum;
    target?: string;
    old?: string;
    details?: unknown;
    readonly id: number;
    readonly action_name: string;
    readonly url: string;
};

export type ChangesListActionErrorComponent = {
    /**
     * * `action` - action
     */
    attr: 'action';
    /**
     * * `invalid_choice` - invalid_choice
     * * `invalid_list` - invalid_list
     */
    code: 'invalid_choice' | 'invalid_list';
    detail: string;
};

export type ChangesListError = ({
    attr: 'action';
} & ChangesListActionErrorComponent) | ({
    attr: 'user';
} & ChangesListUserErrorComponent) | ({
    attr: 'timestamp';
} & ChangesListTimestampErrorComponent);

export type ChangesListErrorResponse400 = ({
    type: 'validation_error';
} & ChangesListValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ChangesListTimestampErrorComponent = {
    /**
     * * `timestamp` - timestamp
     */
    attr: 'timestamp';
    /**
     * * `invalid` - invalid
     */
    code: 'invalid';
    detail: string;
};

export type ChangesListUserErrorComponent = {
    /**
     * * `user` - user
     */
    attr: 'user';
    /**
     * * `null_characters_not_allowed` - null_characters_not_allowed
     */
    code: 'null_characters_not_allowed';
    detail: string;
};

export type ChangesListValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ChangesListError>;
};

export type ChangesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

/**
 * * `client_error` - Client Error
 */
export type ClientErrorEnum = 'client_error';

/**
 * * `navy` - Navy
 * * `blue` - Blue
 * * `aqua` - Aqua
 * * `teal` - Teal
 * * `olive` - Olive
 * * `green` - Green
 * * `lime` - Lime
 * * `yellow` - Yellow
 * * `orange` - Orange
 * * `red` - Red
 * * `maroon` - Maroon
 * * `fuchsia` - Fuchsia
 * * `purple` - Purple
 * * `black` - Black
 * * `gray` - Gray
 * * `silver` - Silver
 */
export type ColorEnum = 'navy' | 'blue' | 'aqua' | 'teal' | 'olive' | 'green' | 'lime' | 'yellow' | 'orange' | 'red' | 'maroon' | 'fuchsia' | 'purple' | 'black' | 'gray' | 'silver';

export type Component = {
    /**
     * Component name
     * Display name
     */
    name: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug: string;
    readonly id: number;
    source_language?: Language;
    project: Project;
    /**
     * Version control system
     * Version control system to use to access your repository containing translations. You can also choose additional integration with third party providers to submit merge requests.
     *
     * * `gerrit` - Gerrit
     * * `git` - Git
     * * `git-force-push` - Git with force push
     * * `local` - No remote repository
     * * `mercurial` - Mercurial
     * * `subversion` - Subversion
     */
    vcs?: VcsEnum;
    repo: string;
    /**
     * Exported repository URL
     * URL of repository where users can fetch changes from Weblate
     */
    git_export?: string;
    branch?: string;
    push_branch?: string;
    /**
     * File mask
     * Path of files to translate relative to repository root, use * instead of language code, for example: po*.po or locale*LC_MESSAGES/django.po.
     */
    filemask: string;
    /**
     * Screenshot file mask
     * Path of screenshots relative to repository root, for example: docs/screenshots*.png.
     */
    screenshot_filemask?: string;
    /**
     * Monolingual base language file
     * Filename of translation base file, containing all strings and their source for monolingual translations.
     */
    template?: string;
    /**
     * Edit base file
     * Whether users will be able to edit the base file for monolingual translations.
     */
    edit_template?: boolean;
    /**
     * Intermediate language file
     * Filename of intermediate translation file. In most cases this is a translation file provided by developers and is used when creating actual source strings.
     */
    intermediate?: string;
    /**
     * Template for new translations
     * Filename of file used for creating new translations. For gettext choose .pot file.
     */
    new_base?: string;
    file_format: FileFormatEnum;
    /**
     * Translation license
     */
    license?: LicenseEnum | BlankEnum;
    readonly license_url: string;
    /**
     * Contributor license agreement
     * Contributor license agreement which needs to be approved before a user can translate this component.
     */
    agreement?: string;
    readonly web_url: string;
    readonly url: string;
    readonly repository_url: string;
    readonly translations_url: string;
    readonly statistics_url: string;
    readonly lock_url: string;
    readonly links_url: string;
    readonly changes_list_url: string;
    readonly task_url: string | null;
    readonly credits_url: string;
    /**
     * Adding new translation
     * How to handle requests for creating new translations.
     *
     * * `contact` - Contact maintainers
     * * `url` - Point to translation instructions URL
     * * `add` - Create new language file
     * * `none` - Disable adding new translations
     */
    new_lang?: NewLangEnum;
    /**
     * Customize language code used to generate the filename for translations created by Weblate.
     *
     * * `` - Default based on the file format
     * * `posix` - POSIX style using underscore as a separator
     * * `posix_lowercase` - POSIX style using underscore as a separator, lower cased
     * * `bcp` - BCP style using hyphen as a separator
     * * `posix_long` - POSIX style using underscore as a separator, including country code
     * * `posix_long_lowercase` - POSIX style using underscore as a separator, including country code, lower cased
     * * `bcp_long` - BCP style using hyphen as a separator, including country code
     * * `bcp_legacy` - BCP style using hyphen as a separator, legacy language codes
     * * `bcp_lower` - BCP style using hyphen as a separator, lower cased
     * * `android` - Android style
     * * `appstore` - Apple App Store metadata style
     * * `googleplay` - Google Play metadata style
     * * `linux` - Linux style
     * * `linux_lowercase` - Linux style, lower cased
     */
    language_code_style?: LanguageCodeStyleEnum | BlankEnum;
    push?: string;
    /**
     * Translation flags
     * Additional comma-separated flags to influence Weblate behavior.
     */
    check_flags?: string;
    /**
     * Components with higher priority are offered first to translators.
     *
     * * `60` - Very high
     * * `80` - High
     * * `100` - Medium
     * * `120` - Low
     * * `140` - Very low
     */
    priority?: PriorityEnum;
    enforced_checks?: unknown;
    /**
     * Restricted component
     * Restrict access to the component to only those explicitly given permission.
     */
    restricted?: boolean;
    /**
     * Repository browser
     * Link to repository browser, use {{branch}} for branch, {{filename}} and {{line}} as filename and line placeholders. You might want to strip leading directory by using {{filename|parentdir}}.
     */
    repoweb?: string;
    /**
     * Source string bug reporting address
     * E-mail address for reports on errors in source strings. Leave empty for no e-mails.
     */
    report_source_bugs?: string;
    /**
     * Define whether Weblate should merge the upstream repository or rebase changes onto it.
     *
     * * `merge` - Merge
     * * `rebase` - Rebase
     * * `merge_noff` - Merge without fast-forward
     */
    merge_style?: MergeStyleEnum;
    /**
     * Commit message when translating
     * You can use template language for various info, please consult the documentation for more details.
     */
    commit_message?: string;
    /**
     * Commit message when adding translation
     * You can use template language for various info, please consult the documentation for more details.
     */
    add_message?: string;
    /**
     * Commit message when removing translation
     * You can use template language for various info, please consult the documentation for more details.
     */
    delete_message?: string;
    /**
     * Commit message when merging translation
     * You can use template language for various info, please consult the documentation for more details.
     */
    merge_message?: string;
    /**
     * Commit message when add-on makes a change
     * You can use template language for various info, please consult the documentation for more details.
     */
    addon_message?: string;
    /**
     * Merge request message
     * You can use template language for various info, please consult the documentation for more details.
     */
    pull_message?: string;
    /**
     * Whether translation updates in other components will cause automatic translation in this one
     */
    allow_translation_propagation?: boolean;
    /**
     * Manage strings
     * Enables adding and removing strings straight from Weblate. If your strings are extracted from the source code or managed externally you probably want to keep it disabled.
     */
    manage_units?: boolean;
    /**
     * Turn on suggestions
     * Whether to allow translation suggestions at all.
     */
    enable_suggestions?: boolean;
    /**
     * Users can only vote for suggestions and can’t make direct translations.
     */
    suggestion_voting?: boolean;
    /**
     * Automatically accept suggestions
     * Automatically accept suggestions with this number of votes, use 0 to turn it off.
     */
    suggestion_autoaccept?: number;
    /**
     * Whether the repository should be pushed upstream on every commit.
     */
    push_on_commit?: boolean;
    /**
     * Age of changes to commit
     * Time in hours after which any pending changes will be committed to the VCS.
     */
    commit_pending_age?: number;
    /**
     * Lock on error
     * Whether the component should be locked on repository errors.
     */
    auto_lock_error?: boolean;
    /**
     * Language filter
     * Regular expression used to filter translation files when scanning for file mask.
     */
    language_regex?: string;
    /**
     * Regular expression used to filter keys. This is only available for monolingual formats.
     */
    key_filter?: string;
    /**
     * Additional language to show together with the source language while translating. This setting is inherited from the project if left empty.
     */
    secondary_language?: number | null;
    /**
     * Variants regular expression
     * Regular expression used to determine variants of a string.
     */
    variant_regex?: string;
    zipfile?: string;
    docfile?: string;
    readonly addons: Array<string>;
    /**
     * Use as a glossary
     */
    is_glossary?: boolean;
    glossary_color?: ColorEnum;
    disable_autoshare?: boolean;
    category?: string | null;
    readonly linked_component: string;
    readonly locked: boolean;
};

export type ComponentList = {
    /**
     * Component list name
     * Display name
     */
    name: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug: string;
    readonly id: number;
    /**
     * Show on dashboard
     * When enabled this component list will be shown as a tab on the dashboard
     */
    show_dashboard?: boolean;
    readonly components: Array<string>;
    readonly auto_assign: Array<AutoComponentList>;
    readonly url: string;
};

export type ComponentListsComponentsCreateError = ({
    attr: 'non_field_errors';
} & ComponentListsComponentsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentListsComponentsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentListsComponentsCreateSlugErrorComponent) | ({
    attr: 'show_dashboard';
} & ComponentListsComponentsCreateShowDashboardErrorComponent);

export type ComponentListsComponentsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentListsComponentsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentListsComponentsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsComponentsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsComponentsCreateShowDashboardErrorComponent = {
    /**
     * * `show_dashboard` - show_dashboard
     */
    attr: 'show_dashboard';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsComponentsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsComponentsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentListsComponentsCreateError>;
};

export type ComponentListsComponentsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentListsComponentsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentListsCreateError = ({
    attr: 'non_field_errors';
} & ComponentListsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentListsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentListsCreateSlugErrorComponent) | ({
    attr: 'show_dashboard';
} & ComponentListsCreateShowDashboardErrorComponent);

export type ComponentListsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentListsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentListsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsCreateShowDashboardErrorComponent = {
    /**
     * * `show_dashboard` - show_dashboard
     */
    attr: 'show_dashboard';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentListsCreateError>;
};

export type ComponentListsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentListsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentListsPartialUpdateError = ({
    attr: 'non_field_errors';
} & ComponentListsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentListsPartialUpdateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentListsPartialUpdateSlugErrorComponent) | ({
    attr: 'show_dashboard';
} & ComponentListsPartialUpdateShowDashboardErrorComponent);

export type ComponentListsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentListsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentListsPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsPartialUpdateShowDashboardErrorComponent = {
    /**
     * * `show_dashboard` - show_dashboard
     */
    attr: 'show_dashboard';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsPartialUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentListsPartialUpdateError>;
};

export type ComponentListsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentListsUpdateError = ({
    attr: 'non_field_errors';
} & ComponentListsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentListsUpdateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentListsUpdateSlugErrorComponent) | ({
    attr: 'show_dashboard';
} & ComponentListsUpdateShowDashboardErrorComponent);

export type ComponentListsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentListsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentListsUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsUpdateShowDashboardErrorComponent = {
    /**
     * * `show_dashboard` - show_dashboard
     */
    attr: 'show_dashboard';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentListsUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ComponentListsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentListsUpdateError>;
};

export type ComponentsAddonsCreateAddMessageErrorComponent = {
    /**
     * * `add_message` - add_message
     */
    attr: 'add_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateAddonMessageErrorComponent = {
    /**
     * * `addon_message` - addon_message
     */
    attr: 'addon_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateAgreementErrorComponent = {
    /**
     * * `agreement` - agreement
     */
    attr: 'agreement';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateAllowTranslationPropagationErrorComponent = {
    /**
     * * `allow_translation_propagation` - allow_translation_propagation
     */
    attr: 'allow_translation_propagation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateAutoLockErrorErrorComponent = {
    /**
     * * `auto_lock_error` - auto_lock_error
     */
    attr: 'auto_lock_error';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateBranchErrorComponent = {
    /**
     * * `branch` - branch
     */
    attr: 'branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match';
    detail: string;
};

export type ComponentsAddonsCreateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateCommitMessageErrorComponent = {
    /**
     * * `commit_message` - commit_message
     */
    attr: 'commit_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateCommitPendingAgeErrorComponent = {
    /**
     * * `commit_pending_age` - commit_pending_age
     */
    attr: 'commit_pending_age';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateDeleteMessageErrorComponent = {
    /**
     * * `delete_message` - delete_message
     */
    attr: 'delete_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateDisableAutoshareErrorComponent = {
    /**
     * * `disable_autoshare` - disable_autoshare
     */
    attr: 'disable_autoshare';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateDocfileErrorComponent = {
    /**
     * * `docfile` - docfile
     */
    attr: 'docfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateEditTemplateErrorComponent = {
    /**
     * * `edit_template` - edit_template
     */
    attr: 'edit_template';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateEnableSuggestionsErrorComponent = {
    /**
     * * `enable_suggestions` - enable_suggestions
     */
    attr: 'enable_suggestions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateEnforcedChecksErrorComponent = {
    /**
     * * `enforced_checks` - enforced_checks
     */
    attr: 'enforced_checks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateError = ({
    attr: 'non_field_errors';
} & ComponentsAddonsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentsAddonsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentsAddonsCreateSlugErrorComponent) | ({
    attr: 'source_language.non_field_errors';
} & ComponentsAddonsCreateSourceLanguageNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.code';
} & ComponentsAddonsCreateSourceLanguageCodeErrorComponent) | ({
    attr: 'source_language.name';
} & ComponentsAddonsCreateSourceLanguageNameErrorComponent) | ({
    attr: 'source_language.plural.non_field_errors';
} & ComponentsAddonsCreateSourceLanguagePluralNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.plural.source';
} & ComponentsAddonsCreateSourceLanguagePluralSourceErrorComponent) | ({
    attr: 'source_language.plural.number';
} & ComponentsAddonsCreateSourceLanguagePluralNumberErrorComponent) | ({
    attr: 'source_language.plural.formula';
} & ComponentsAddonsCreateSourceLanguagePluralFormulaErrorComponent) | ({
    attr: 'source_language.direction';
} & ComponentsAddonsCreateSourceLanguageDirectionErrorComponent) | ({
    attr: 'source_language.population';
} & ComponentsAddonsCreateSourceLanguagePopulationErrorComponent) | ({
    attr: 'vcs';
} & ComponentsAddonsCreateVcsErrorComponent) | ({
    attr: 'repo';
} & ComponentsAddonsCreateRepoErrorComponent) | ({
    attr: 'git_export';
} & ComponentsAddonsCreateGitExportErrorComponent) | ({
    attr: 'branch';
} & ComponentsAddonsCreateBranchErrorComponent) | ({
    attr: 'push_branch';
} & ComponentsAddonsCreatePushBranchErrorComponent) | ({
    attr: 'filemask';
} & ComponentsAddonsCreateFilemaskErrorComponent) | ({
    attr: 'screenshot_filemask';
} & ComponentsAddonsCreateScreenshotFilemaskErrorComponent) | ({
    attr: 'template';
} & ComponentsAddonsCreateTemplateErrorComponent) | ({
    attr: 'edit_template';
} & ComponentsAddonsCreateEditTemplateErrorComponent) | ({
    attr: 'intermediate';
} & ComponentsAddonsCreateIntermediateErrorComponent) | ({
    attr: 'new_base';
} & ComponentsAddonsCreateNewBaseErrorComponent) | ({
    attr: 'file_format';
} & ComponentsAddonsCreateFileFormatErrorComponent) | ({
    attr: 'license';
} & ComponentsAddonsCreateLicenseErrorComponent) | ({
    attr: 'agreement';
} & ComponentsAddonsCreateAgreementErrorComponent) | ({
    attr: 'new_lang';
} & ComponentsAddonsCreateNewLangErrorComponent) | ({
    attr: 'language_code_style';
} & ComponentsAddonsCreateLanguageCodeStyleErrorComponent) | ({
    attr: 'push';
} & ComponentsAddonsCreatePushErrorComponent) | ({
    attr: 'check_flags';
} & ComponentsAddonsCreateCheckFlagsErrorComponent) | ({
    attr: 'priority';
} & ComponentsAddonsCreatePriorityErrorComponent) | ({
    attr: 'enforced_checks';
} & ComponentsAddonsCreateEnforcedChecksErrorComponent) | ({
    attr: 'restricted';
} & ComponentsAddonsCreateRestrictedErrorComponent) | ({
    attr: 'repoweb';
} & ComponentsAddonsCreateRepowebErrorComponent) | ({
    attr: 'report_source_bugs';
} & ComponentsAddonsCreateReportSourceBugsErrorComponent) | ({
    attr: 'merge_style';
} & ComponentsAddonsCreateMergeStyleErrorComponent) | ({
    attr: 'commit_message';
} & ComponentsAddonsCreateCommitMessageErrorComponent) | ({
    attr: 'add_message';
} & ComponentsAddonsCreateAddMessageErrorComponent) | ({
    attr: 'delete_message';
} & ComponentsAddonsCreateDeleteMessageErrorComponent) | ({
    attr: 'merge_message';
} & ComponentsAddonsCreateMergeMessageErrorComponent) | ({
    attr: 'addon_message';
} & ComponentsAddonsCreateAddonMessageErrorComponent) | ({
    attr: 'pull_message';
} & ComponentsAddonsCreatePullMessageErrorComponent) | ({
    attr: 'allow_translation_propagation';
} & ComponentsAddonsCreateAllowTranslationPropagationErrorComponent) | ({
    attr: 'manage_units';
} & ComponentsAddonsCreateManageUnitsErrorComponent) | ({
    attr: 'enable_suggestions';
} & ComponentsAddonsCreateEnableSuggestionsErrorComponent) | ({
    attr: 'suggestion_voting';
} & ComponentsAddonsCreateSuggestionVotingErrorComponent) | ({
    attr: 'suggestion_autoaccept';
} & ComponentsAddonsCreateSuggestionAutoacceptErrorComponent) | ({
    attr: 'push_on_commit';
} & ComponentsAddonsCreatePushOnCommitErrorComponent) | ({
    attr: 'commit_pending_age';
} & ComponentsAddonsCreateCommitPendingAgeErrorComponent) | ({
    attr: 'auto_lock_error';
} & ComponentsAddonsCreateAutoLockErrorErrorComponent) | ({
    attr: 'language_regex';
} & ComponentsAddonsCreateLanguageRegexErrorComponent) | ({
    attr: 'key_filter';
} & ComponentsAddonsCreateKeyFilterErrorComponent) | ({
    attr: 'secondary_language';
} & ComponentsAddonsCreateSecondaryLanguageErrorComponent) | ({
    attr: 'variant_regex';
} & ComponentsAddonsCreateVariantRegexErrorComponent) | ({
    attr: 'zipfile';
} & ComponentsAddonsCreateZipfileErrorComponent) | ({
    attr: 'docfile';
} & ComponentsAddonsCreateDocfileErrorComponent) | ({
    attr: 'is_glossary';
} & ComponentsAddonsCreateIsGlossaryErrorComponent) | ({
    attr: 'glossary_color';
} & ComponentsAddonsCreateGlossaryColorErrorComponent) | ({
    attr: 'disable_autoshare';
} & ComponentsAddonsCreateDisableAutoshareErrorComponent) | ({
    attr: 'category';
} & ComponentsAddonsCreateCategoryErrorComponent);

export type ComponentsAddonsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentsAddonsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentsAddonsCreateFileFormatErrorComponent = {
    /**
     * * `file_format` - file_format
     */
    attr: 'file_format';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ComponentsAddonsCreateFilemaskErrorComponent = {
    /**
     * * `filemask` - filemask
     */
    attr: 'filemask';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateGitExportErrorComponent = {
    /**
     * * `git_export` - git_export
     */
    attr: 'git_export';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateGlossaryColorErrorComponent = {
    /**
     * * `glossary_color` - glossary_color
     */
    attr: 'glossary_color';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateIntermediateErrorComponent = {
    /**
     * * `intermediate` - intermediate
     */
    attr: 'intermediate';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateIsGlossaryErrorComponent = {
    /**
     * * `is_glossary` - is_glossary
     */
    attr: 'is_glossary';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateKeyFilterErrorComponent = {
    /**
     * * `key_filter` - key_filter
     */
    attr: 'key_filter';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateLanguageCodeStyleErrorComponent = {
    /**
     * * `language_code_style` - language_code_style
     */
    attr: 'language_code_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateLanguageRegexErrorComponent = {
    /**
     * * `language_regex` - language_regex
     */
    attr: 'language_regex';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateLicenseErrorComponent = {
    /**
     * * `license` - license
     */
    attr: 'license';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateManageUnitsErrorComponent = {
    /**
     * * `manage_units` - manage_units
     */
    attr: 'manage_units';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateMergeMessageErrorComponent = {
    /**
     * * `merge_message` - merge_message
     */
    attr: 'merge_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateMergeStyleErrorComponent = {
    /**
     * * `merge_style` - merge_style
     */
    attr: 'merge_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateNewBaseErrorComponent = {
    /**
     * * `new_base` - new_base
     */
    attr: 'new_base';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateNewLangErrorComponent = {
    /**
     * * `new_lang` - new_lang
     */
    attr: 'new_lang';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreatePriorityErrorComponent = {
    /**
     * * `priority` - priority
     */
    attr: 'priority';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsAddonsCreatePullMessageErrorComponent = {
    /**
     * * `pull_message` - pull_message
     */
    attr: 'pull_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreatePushBranchErrorComponent = {
    /**
     * * `push_branch` - push_branch
     */
    attr: 'push_branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreatePushErrorComponent = {
    /**
     * * `push` - push
     */
    attr: 'push';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreatePushOnCommitErrorComponent = {
    /**
     * * `push_on_commit` - push_on_commit
     */
    attr: 'push_on_commit';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateRepoErrorComponent = {
    /**
     * * `repo` - repo
     */
    attr: 'repo';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateReportSourceBugsErrorComponent = {
    /**
     * * `report_source_bugs` - report_source_bugs
     */
    attr: 'report_source_bugs';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateRepowebErrorComponent = {
    /**
     * * `repoweb` - repoweb
     */
    attr: 'repoweb';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateRestrictedErrorComponent = {
    /**
     * * `restricted` - restricted
     */
    attr: 'restricted';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateScreenshotFilemaskErrorComponent = {
    /**
     * * `screenshot_filemask` - screenshot_filemask
     */
    attr: 'screenshot_filemask';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ComponentsAddonsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguageCodeErrorComponent = {
    /**
     * * `source_language.code` - source_language.code
     */
    attr: 'source_language.code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguageDirectionErrorComponent = {
    /**
     * * `source_language.direction` - source_language.direction
     */
    attr: 'source_language.direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguageNameErrorComponent = {
    /**
     * * `source_language.name` - source_language.name
     */
    attr: 'source_language.name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguageNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.non_field_errors` - source_language.non_field_errors
     */
    attr: 'source_language.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguagePluralFormulaErrorComponent = {
    /**
     * * `source_language.plural.formula` - source_language.plural.formula
     */
    attr: 'source_language.plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguagePluralNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.plural.non_field_errors` - source_language.plural.non_field_errors
     */
    attr: 'source_language.plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguagePluralNumberErrorComponent = {
    /**
     * * `source_language.plural.number` - source_language.plural.number
     */
    attr: 'source_language.plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguagePluralSourceErrorComponent = {
    /**
     * * `source_language.plural.source` - source_language.plural.source
     */
    attr: 'source_language.plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateSourceLanguagePopulationErrorComponent = {
    /**
     * * `source_language.population` - source_language.population
     */
    attr: 'source_language.population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateSuggestionAutoacceptErrorComponent = {
    /**
     * * `suggestion_autoaccept` - suggestion_autoaccept
     */
    attr: 'suggestion_autoaccept';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateSuggestionVotingErrorComponent = {
    /**
     * * `suggestion_voting` - suggestion_voting
     */
    attr: 'suggestion_voting';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateTemplateErrorComponent = {
    /**
     * * `template` - template
     */
    attr: 'template';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentsAddonsCreateError>;
};

export type ComponentsAddonsCreateVariantRegexErrorComponent = {
    /**
     * * `variant_regex` - variant_regex
     */
    attr: 'variant_regex';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsAddonsCreateVcsErrorComponent = {
    /**
     * * `vcs` - vcs
     */
    attr: 'vcs';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsAddonsCreateZipfileErrorComponent = {
    /**
     * * `zipfile` - zipfile
     */
    attr: 'zipfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsChangesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsCreditsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsFileRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsLinksCreateAddMessageErrorComponent = {
    /**
     * * `add_message` - add_message
     */
    attr: 'add_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateAddonMessageErrorComponent = {
    /**
     * * `addon_message` - addon_message
     */
    attr: 'addon_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateAgreementErrorComponent = {
    /**
     * * `agreement` - agreement
     */
    attr: 'agreement';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateAllowTranslationPropagationErrorComponent = {
    /**
     * * `allow_translation_propagation` - allow_translation_propagation
     */
    attr: 'allow_translation_propagation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateAutoLockErrorErrorComponent = {
    /**
     * * `auto_lock_error` - auto_lock_error
     */
    attr: 'auto_lock_error';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateBranchErrorComponent = {
    /**
     * * `branch` - branch
     */
    attr: 'branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match';
    detail: string;
};

export type ComponentsLinksCreateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateCommitMessageErrorComponent = {
    /**
     * * `commit_message` - commit_message
     */
    attr: 'commit_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateCommitPendingAgeErrorComponent = {
    /**
     * * `commit_pending_age` - commit_pending_age
     */
    attr: 'commit_pending_age';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsLinksCreateDeleteMessageErrorComponent = {
    /**
     * * `delete_message` - delete_message
     */
    attr: 'delete_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateDisableAutoshareErrorComponent = {
    /**
     * * `disable_autoshare` - disable_autoshare
     */
    attr: 'disable_autoshare';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateDocfileErrorComponent = {
    /**
     * * `docfile` - docfile
     */
    attr: 'docfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsLinksCreateEditTemplateErrorComponent = {
    /**
     * * `edit_template` - edit_template
     */
    attr: 'edit_template';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateEnableSuggestionsErrorComponent = {
    /**
     * * `enable_suggestions` - enable_suggestions
     */
    attr: 'enable_suggestions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateEnforcedChecksErrorComponent = {
    /**
     * * `enforced_checks` - enforced_checks
     */
    attr: 'enforced_checks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateError = ({
    attr: 'non_field_errors';
} & ComponentsLinksCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentsLinksCreateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentsLinksCreateSlugErrorComponent) | ({
    attr: 'source_language.non_field_errors';
} & ComponentsLinksCreateSourceLanguageNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.code';
} & ComponentsLinksCreateSourceLanguageCodeErrorComponent) | ({
    attr: 'source_language.name';
} & ComponentsLinksCreateSourceLanguageNameErrorComponent) | ({
    attr: 'source_language.plural.non_field_errors';
} & ComponentsLinksCreateSourceLanguagePluralNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.plural.source';
} & ComponentsLinksCreateSourceLanguagePluralSourceErrorComponent) | ({
    attr: 'source_language.plural.number';
} & ComponentsLinksCreateSourceLanguagePluralNumberErrorComponent) | ({
    attr: 'source_language.plural.formula';
} & ComponentsLinksCreateSourceLanguagePluralFormulaErrorComponent) | ({
    attr: 'source_language.direction';
} & ComponentsLinksCreateSourceLanguageDirectionErrorComponent) | ({
    attr: 'source_language.population';
} & ComponentsLinksCreateSourceLanguagePopulationErrorComponent) | ({
    attr: 'vcs';
} & ComponentsLinksCreateVcsErrorComponent) | ({
    attr: 'repo';
} & ComponentsLinksCreateRepoErrorComponent) | ({
    attr: 'git_export';
} & ComponentsLinksCreateGitExportErrorComponent) | ({
    attr: 'branch';
} & ComponentsLinksCreateBranchErrorComponent) | ({
    attr: 'push_branch';
} & ComponentsLinksCreatePushBranchErrorComponent) | ({
    attr: 'filemask';
} & ComponentsLinksCreateFilemaskErrorComponent) | ({
    attr: 'screenshot_filemask';
} & ComponentsLinksCreateScreenshotFilemaskErrorComponent) | ({
    attr: 'template';
} & ComponentsLinksCreateTemplateErrorComponent) | ({
    attr: 'edit_template';
} & ComponentsLinksCreateEditTemplateErrorComponent) | ({
    attr: 'intermediate';
} & ComponentsLinksCreateIntermediateErrorComponent) | ({
    attr: 'new_base';
} & ComponentsLinksCreateNewBaseErrorComponent) | ({
    attr: 'file_format';
} & ComponentsLinksCreateFileFormatErrorComponent) | ({
    attr: 'license';
} & ComponentsLinksCreateLicenseErrorComponent) | ({
    attr: 'agreement';
} & ComponentsLinksCreateAgreementErrorComponent) | ({
    attr: 'new_lang';
} & ComponentsLinksCreateNewLangErrorComponent) | ({
    attr: 'language_code_style';
} & ComponentsLinksCreateLanguageCodeStyleErrorComponent) | ({
    attr: 'push';
} & ComponentsLinksCreatePushErrorComponent) | ({
    attr: 'check_flags';
} & ComponentsLinksCreateCheckFlagsErrorComponent) | ({
    attr: 'priority';
} & ComponentsLinksCreatePriorityErrorComponent) | ({
    attr: 'enforced_checks';
} & ComponentsLinksCreateEnforcedChecksErrorComponent) | ({
    attr: 'restricted';
} & ComponentsLinksCreateRestrictedErrorComponent) | ({
    attr: 'repoweb';
} & ComponentsLinksCreateRepowebErrorComponent) | ({
    attr: 'report_source_bugs';
} & ComponentsLinksCreateReportSourceBugsErrorComponent) | ({
    attr: 'merge_style';
} & ComponentsLinksCreateMergeStyleErrorComponent) | ({
    attr: 'commit_message';
} & ComponentsLinksCreateCommitMessageErrorComponent) | ({
    attr: 'add_message';
} & ComponentsLinksCreateAddMessageErrorComponent) | ({
    attr: 'delete_message';
} & ComponentsLinksCreateDeleteMessageErrorComponent) | ({
    attr: 'merge_message';
} & ComponentsLinksCreateMergeMessageErrorComponent) | ({
    attr: 'addon_message';
} & ComponentsLinksCreateAddonMessageErrorComponent) | ({
    attr: 'pull_message';
} & ComponentsLinksCreatePullMessageErrorComponent) | ({
    attr: 'allow_translation_propagation';
} & ComponentsLinksCreateAllowTranslationPropagationErrorComponent) | ({
    attr: 'manage_units';
} & ComponentsLinksCreateManageUnitsErrorComponent) | ({
    attr: 'enable_suggestions';
} & ComponentsLinksCreateEnableSuggestionsErrorComponent) | ({
    attr: 'suggestion_voting';
} & ComponentsLinksCreateSuggestionVotingErrorComponent) | ({
    attr: 'suggestion_autoaccept';
} & ComponentsLinksCreateSuggestionAutoacceptErrorComponent) | ({
    attr: 'push_on_commit';
} & ComponentsLinksCreatePushOnCommitErrorComponent) | ({
    attr: 'commit_pending_age';
} & ComponentsLinksCreateCommitPendingAgeErrorComponent) | ({
    attr: 'auto_lock_error';
} & ComponentsLinksCreateAutoLockErrorErrorComponent) | ({
    attr: 'language_regex';
} & ComponentsLinksCreateLanguageRegexErrorComponent) | ({
    attr: 'key_filter';
} & ComponentsLinksCreateKeyFilterErrorComponent) | ({
    attr: 'secondary_language';
} & ComponentsLinksCreateSecondaryLanguageErrorComponent) | ({
    attr: 'variant_regex';
} & ComponentsLinksCreateVariantRegexErrorComponent) | ({
    attr: 'zipfile';
} & ComponentsLinksCreateZipfileErrorComponent) | ({
    attr: 'docfile';
} & ComponentsLinksCreateDocfileErrorComponent) | ({
    attr: 'is_glossary';
} & ComponentsLinksCreateIsGlossaryErrorComponent) | ({
    attr: 'glossary_color';
} & ComponentsLinksCreateGlossaryColorErrorComponent) | ({
    attr: 'disable_autoshare';
} & ComponentsLinksCreateDisableAutoshareErrorComponent) | ({
    attr: 'category';
} & ComponentsLinksCreateCategoryErrorComponent);

export type ComponentsLinksCreateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentsLinksCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentsLinksCreateFileFormatErrorComponent = {
    /**
     * * `file_format` - file_format
     */
    attr: 'file_format';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ComponentsLinksCreateFilemaskErrorComponent = {
    /**
     * * `filemask` - filemask
     */
    attr: 'filemask';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateGitExportErrorComponent = {
    /**
     * * `git_export` - git_export
     */
    attr: 'git_export';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateGlossaryColorErrorComponent = {
    /**
     * * `glossary_color` - glossary_color
     */
    attr: 'glossary_color';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsLinksCreateIntermediateErrorComponent = {
    /**
     * * `intermediate` - intermediate
     */
    attr: 'intermediate';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateIsGlossaryErrorComponent = {
    /**
     * * `is_glossary` - is_glossary
     */
    attr: 'is_glossary';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateKeyFilterErrorComponent = {
    /**
     * * `key_filter` - key_filter
     */
    attr: 'key_filter';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateLanguageCodeStyleErrorComponent = {
    /**
     * * `language_code_style` - language_code_style
     */
    attr: 'language_code_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsLinksCreateLanguageRegexErrorComponent = {
    /**
     * * `language_regex` - language_regex
     */
    attr: 'language_regex';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateLicenseErrorComponent = {
    /**
     * * `license` - license
     */
    attr: 'license';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsLinksCreateManageUnitsErrorComponent = {
    /**
     * * `manage_units` - manage_units
     */
    attr: 'manage_units';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateMergeMessageErrorComponent = {
    /**
     * * `merge_message` - merge_message
     */
    attr: 'merge_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateMergeStyleErrorComponent = {
    /**
     * * `merge_style` - merge_style
     */
    attr: 'merge_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsLinksCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateNewBaseErrorComponent = {
    /**
     * * `new_base` - new_base
     */
    attr: 'new_base';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateNewLangErrorComponent = {
    /**
     * * `new_lang` - new_lang
     */
    attr: 'new_lang';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsLinksCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreatePriorityErrorComponent = {
    /**
     * * `priority` - priority
     */
    attr: 'priority';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsLinksCreatePullMessageErrorComponent = {
    /**
     * * `pull_message` - pull_message
     */
    attr: 'pull_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreatePushBranchErrorComponent = {
    /**
     * * `push_branch` - push_branch
     */
    attr: 'push_branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreatePushErrorComponent = {
    /**
     * * `push` - push
     */
    attr: 'push';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreatePushOnCommitErrorComponent = {
    /**
     * * `push_on_commit` - push_on_commit
     */
    attr: 'push_on_commit';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateRepoErrorComponent = {
    /**
     * * `repo` - repo
     */
    attr: 'repo';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateReportSourceBugsErrorComponent = {
    /**
     * * `report_source_bugs` - report_source_bugs
     */
    attr: 'report_source_bugs';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateRepowebErrorComponent = {
    /**
     * * `repoweb` - repoweb
     */
    attr: 'repoweb';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateRestrictedErrorComponent = {
    /**
     * * `restricted` - restricted
     */
    attr: 'restricted';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateScreenshotFilemaskErrorComponent = {
    /**
     * * `screenshot_filemask` - screenshot_filemask
     */
    attr: 'screenshot_filemask';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ComponentsLinksCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguageCodeErrorComponent = {
    /**
     * * `source_language.code` - source_language.code
     */
    attr: 'source_language.code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguageDirectionErrorComponent = {
    /**
     * * `source_language.direction` - source_language.direction
     */
    attr: 'source_language.direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguageNameErrorComponent = {
    /**
     * * `source_language.name` - source_language.name
     */
    attr: 'source_language.name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguageNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.non_field_errors` - source_language.non_field_errors
     */
    attr: 'source_language.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguagePluralFormulaErrorComponent = {
    /**
     * * `source_language.plural.formula` - source_language.plural.formula
     */
    attr: 'source_language.plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguagePluralNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.plural.non_field_errors` - source_language.plural.non_field_errors
     */
    attr: 'source_language.plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguagePluralNumberErrorComponent = {
    /**
     * * `source_language.plural.number` - source_language.plural.number
     */
    attr: 'source_language.plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguagePluralSourceErrorComponent = {
    /**
     * * `source_language.plural.source` - source_language.plural.source
     */
    attr: 'source_language.plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsLinksCreateSourceLanguagePopulationErrorComponent = {
    /**
     * * `source_language.population` - source_language.population
     */
    attr: 'source_language.population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsLinksCreateSuggestionAutoacceptErrorComponent = {
    /**
     * * `suggestion_autoaccept` - suggestion_autoaccept
     */
    attr: 'suggestion_autoaccept';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsLinksCreateSuggestionVotingErrorComponent = {
    /**
     * * `suggestion_voting` - suggestion_voting
     */
    attr: 'suggestion_voting';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLinksCreateTemplateErrorComponent = {
    /**
     * * `template` - template
     */
    attr: 'template';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentsLinksCreateError>;
};

export type ComponentsLinksCreateVariantRegexErrorComponent = {
    /**
     * * `variant_regex` - variant_regex
     */
    attr: 'variant_regex';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsLinksCreateVcsErrorComponent = {
    /**
     * * `vcs` - vcs
     */
    attr: 'vcs';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsLinksCreateZipfileErrorComponent = {
    /**
     * * `zipfile` - zipfile
     */
    attr: 'zipfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsLinksDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsLinksRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsLockCreateError = ({
    attr: 'non_field_errors';
} & ComponentsLockCreateNonFieldErrorsErrorComponent) | ({
    attr: 'lock';
} & ComponentsLockCreateLockErrorComponent);

export type ComponentsLockCreateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentsLockCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentsLockCreateLockErrorComponent = {
    /**
     * * `lock` - lock
     */
    attr: 'lock';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid' | 'null' | 'required';
    detail: string;
};

export type ComponentsLockCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsLockCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentsLockCreateError>;
};

export type ComponentsLockRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsMonolingualBaseRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsNewTemplateRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsPartialUpdateAddMessageErrorComponent = {
    /**
     * * `add_message` - add_message
     */
    attr: 'add_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateAddonMessageErrorComponent = {
    /**
     * * `addon_message` - addon_message
     */
    attr: 'addon_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateAgreementErrorComponent = {
    /**
     * * `agreement` - agreement
     */
    attr: 'agreement';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateAllowTranslationPropagationErrorComponent = {
    /**
     * * `allow_translation_propagation` - allow_translation_propagation
     */
    attr: 'allow_translation_propagation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateAutoLockErrorErrorComponent = {
    /**
     * * `auto_lock_error` - auto_lock_error
     */
    attr: 'auto_lock_error';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateBranchErrorComponent = {
    /**
     * * `branch` - branch
     */
    attr: 'branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match';
    detail: string;
};

export type ComponentsPartialUpdateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateCommitMessageErrorComponent = {
    /**
     * * `commit_message` - commit_message
     */
    attr: 'commit_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateCommitPendingAgeErrorComponent = {
    /**
     * * `commit_pending_age` - commit_pending_age
     */
    attr: 'commit_pending_age';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateDeleteMessageErrorComponent = {
    /**
     * * `delete_message` - delete_message
     */
    attr: 'delete_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateDisableAutoshareErrorComponent = {
    /**
     * * `disable_autoshare` - disable_autoshare
     */
    attr: 'disable_autoshare';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateDocfileErrorComponent = {
    /**
     * * `docfile` - docfile
     */
    attr: 'docfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateEditTemplateErrorComponent = {
    /**
     * * `edit_template` - edit_template
     */
    attr: 'edit_template';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateEnableSuggestionsErrorComponent = {
    /**
     * * `enable_suggestions` - enable_suggestions
     */
    attr: 'enable_suggestions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateEnforcedChecksErrorComponent = {
    /**
     * * `enforced_checks` - enforced_checks
     */
    attr: 'enforced_checks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateError = ({
    attr: 'non_field_errors';
} & ComponentsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentsPartialUpdateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentsPartialUpdateSlugErrorComponent) | ({
    attr: 'source_language.non_field_errors';
} & ComponentsPartialUpdateSourceLanguageNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.code';
} & ComponentsPartialUpdateSourceLanguageCodeErrorComponent) | ({
    attr: 'source_language.name';
} & ComponentsPartialUpdateSourceLanguageNameErrorComponent) | ({
    attr: 'source_language.plural.non_field_errors';
} & ComponentsPartialUpdateSourceLanguagePluralNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.plural.source';
} & ComponentsPartialUpdateSourceLanguagePluralSourceErrorComponent) | ({
    attr: 'source_language.plural.number';
} & ComponentsPartialUpdateSourceLanguagePluralNumberErrorComponent) | ({
    attr: 'source_language.plural.formula';
} & ComponentsPartialUpdateSourceLanguagePluralFormulaErrorComponent) | ({
    attr: 'source_language.direction';
} & ComponentsPartialUpdateSourceLanguageDirectionErrorComponent) | ({
    attr: 'source_language.population';
} & ComponentsPartialUpdateSourceLanguagePopulationErrorComponent) | ({
    attr: 'vcs';
} & ComponentsPartialUpdateVcsErrorComponent) | ({
    attr: 'repo';
} & ComponentsPartialUpdateRepoErrorComponent) | ({
    attr: 'git_export';
} & ComponentsPartialUpdateGitExportErrorComponent) | ({
    attr: 'branch';
} & ComponentsPartialUpdateBranchErrorComponent) | ({
    attr: 'push_branch';
} & ComponentsPartialUpdatePushBranchErrorComponent) | ({
    attr: 'filemask';
} & ComponentsPartialUpdateFilemaskErrorComponent) | ({
    attr: 'screenshot_filemask';
} & ComponentsPartialUpdateScreenshotFilemaskErrorComponent) | ({
    attr: 'template';
} & ComponentsPartialUpdateTemplateErrorComponent) | ({
    attr: 'edit_template';
} & ComponentsPartialUpdateEditTemplateErrorComponent) | ({
    attr: 'intermediate';
} & ComponentsPartialUpdateIntermediateErrorComponent) | ({
    attr: 'new_base';
} & ComponentsPartialUpdateNewBaseErrorComponent) | ({
    attr: 'file_format';
} & ComponentsPartialUpdateFileFormatErrorComponent) | ({
    attr: 'license';
} & ComponentsPartialUpdateLicenseErrorComponent) | ({
    attr: 'agreement';
} & ComponentsPartialUpdateAgreementErrorComponent) | ({
    attr: 'new_lang';
} & ComponentsPartialUpdateNewLangErrorComponent) | ({
    attr: 'language_code_style';
} & ComponentsPartialUpdateLanguageCodeStyleErrorComponent) | ({
    attr: 'push';
} & ComponentsPartialUpdatePushErrorComponent) | ({
    attr: 'check_flags';
} & ComponentsPartialUpdateCheckFlagsErrorComponent) | ({
    attr: 'priority';
} & ComponentsPartialUpdatePriorityErrorComponent) | ({
    attr: 'enforced_checks';
} & ComponentsPartialUpdateEnforcedChecksErrorComponent) | ({
    attr: 'restricted';
} & ComponentsPartialUpdateRestrictedErrorComponent) | ({
    attr: 'repoweb';
} & ComponentsPartialUpdateRepowebErrorComponent) | ({
    attr: 'report_source_bugs';
} & ComponentsPartialUpdateReportSourceBugsErrorComponent) | ({
    attr: 'merge_style';
} & ComponentsPartialUpdateMergeStyleErrorComponent) | ({
    attr: 'commit_message';
} & ComponentsPartialUpdateCommitMessageErrorComponent) | ({
    attr: 'add_message';
} & ComponentsPartialUpdateAddMessageErrorComponent) | ({
    attr: 'delete_message';
} & ComponentsPartialUpdateDeleteMessageErrorComponent) | ({
    attr: 'merge_message';
} & ComponentsPartialUpdateMergeMessageErrorComponent) | ({
    attr: 'addon_message';
} & ComponentsPartialUpdateAddonMessageErrorComponent) | ({
    attr: 'pull_message';
} & ComponentsPartialUpdatePullMessageErrorComponent) | ({
    attr: 'allow_translation_propagation';
} & ComponentsPartialUpdateAllowTranslationPropagationErrorComponent) | ({
    attr: 'manage_units';
} & ComponentsPartialUpdateManageUnitsErrorComponent) | ({
    attr: 'enable_suggestions';
} & ComponentsPartialUpdateEnableSuggestionsErrorComponent) | ({
    attr: 'suggestion_voting';
} & ComponentsPartialUpdateSuggestionVotingErrorComponent) | ({
    attr: 'suggestion_autoaccept';
} & ComponentsPartialUpdateSuggestionAutoacceptErrorComponent) | ({
    attr: 'push_on_commit';
} & ComponentsPartialUpdatePushOnCommitErrorComponent) | ({
    attr: 'commit_pending_age';
} & ComponentsPartialUpdateCommitPendingAgeErrorComponent) | ({
    attr: 'auto_lock_error';
} & ComponentsPartialUpdateAutoLockErrorErrorComponent) | ({
    attr: 'language_regex';
} & ComponentsPartialUpdateLanguageRegexErrorComponent) | ({
    attr: 'key_filter';
} & ComponentsPartialUpdateKeyFilterErrorComponent) | ({
    attr: 'secondary_language';
} & ComponentsPartialUpdateSecondaryLanguageErrorComponent) | ({
    attr: 'variant_regex';
} & ComponentsPartialUpdateVariantRegexErrorComponent) | ({
    attr: 'zipfile';
} & ComponentsPartialUpdateZipfileErrorComponent) | ({
    attr: 'docfile';
} & ComponentsPartialUpdateDocfileErrorComponent) | ({
    attr: 'is_glossary';
} & ComponentsPartialUpdateIsGlossaryErrorComponent) | ({
    attr: 'glossary_color';
} & ComponentsPartialUpdateGlossaryColorErrorComponent) | ({
    attr: 'disable_autoshare';
} & ComponentsPartialUpdateDisableAutoshareErrorComponent) | ({
    attr: 'category';
} & ComponentsPartialUpdateCategoryErrorComponent);

export type ComponentsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentsPartialUpdateFileFormatErrorComponent = {
    /**
     * * `file_format` - file_format
     */
    attr: 'file_format';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ComponentsPartialUpdateFilemaskErrorComponent = {
    /**
     * * `filemask` - filemask
     */
    attr: 'filemask';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateGitExportErrorComponent = {
    /**
     * * `git_export` - git_export
     */
    attr: 'git_export';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateGlossaryColorErrorComponent = {
    /**
     * * `glossary_color` - glossary_color
     */
    attr: 'glossary_color';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateIntermediateErrorComponent = {
    /**
     * * `intermediate` - intermediate
     */
    attr: 'intermediate';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateIsGlossaryErrorComponent = {
    /**
     * * `is_glossary` - is_glossary
     */
    attr: 'is_glossary';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateKeyFilterErrorComponent = {
    /**
     * * `key_filter` - key_filter
     */
    attr: 'key_filter';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateLanguageCodeStyleErrorComponent = {
    /**
     * * `language_code_style` - language_code_style
     */
    attr: 'language_code_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateLanguageRegexErrorComponent = {
    /**
     * * `language_regex` - language_regex
     */
    attr: 'language_regex';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateLicenseErrorComponent = {
    /**
     * * `license` - license
     */
    attr: 'license';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateManageUnitsErrorComponent = {
    /**
     * * `manage_units` - manage_units
     */
    attr: 'manage_units';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateMergeMessageErrorComponent = {
    /**
     * * `merge_message` - merge_message
     */
    attr: 'merge_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateMergeStyleErrorComponent = {
    /**
     * * `merge_style` - merge_style
     */
    attr: 'merge_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateNewBaseErrorComponent = {
    /**
     * * `new_base` - new_base
     */
    attr: 'new_base';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateNewLangErrorComponent = {
    /**
     * * `new_lang` - new_lang
     */
    attr: 'new_lang';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdatePriorityErrorComponent = {
    /**
     * * `priority` - priority
     */
    attr: 'priority';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsPartialUpdatePullMessageErrorComponent = {
    /**
     * * `pull_message` - pull_message
     */
    attr: 'pull_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdatePushBranchErrorComponent = {
    /**
     * * `push_branch` - push_branch
     */
    attr: 'push_branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdatePushErrorComponent = {
    /**
     * * `push` - push
     */
    attr: 'push';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdatePushOnCommitErrorComponent = {
    /**
     * * `push_on_commit` - push_on_commit
     */
    attr: 'push_on_commit';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateRepoErrorComponent = {
    /**
     * * `repo` - repo
     */
    attr: 'repo';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateReportSourceBugsErrorComponent = {
    /**
     * * `report_source_bugs` - report_source_bugs
     */
    attr: 'report_source_bugs';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateRepowebErrorComponent = {
    /**
     * * `repoweb` - repoweb
     */
    attr: 'repoweb';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateRestrictedErrorComponent = {
    /**
     * * `restricted` - restricted
     */
    attr: 'restricted';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateScreenshotFilemaskErrorComponent = {
    /**
     * * `screenshot_filemask` - screenshot_filemask
     */
    attr: 'screenshot_filemask';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ComponentsPartialUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguageCodeErrorComponent = {
    /**
     * * `source_language.code` - source_language.code
     */
    attr: 'source_language.code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguageDirectionErrorComponent = {
    /**
     * * `source_language.direction` - source_language.direction
     */
    attr: 'source_language.direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguageNameErrorComponent = {
    /**
     * * `source_language.name` - source_language.name
     */
    attr: 'source_language.name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguageNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.non_field_errors` - source_language.non_field_errors
     */
    attr: 'source_language.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguagePluralFormulaErrorComponent = {
    /**
     * * `source_language.plural.formula` - source_language.plural.formula
     */
    attr: 'source_language.plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguagePluralNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.plural.non_field_errors` - source_language.plural.non_field_errors
     */
    attr: 'source_language.plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguagePluralNumberErrorComponent = {
    /**
     * * `source_language.plural.number` - source_language.plural.number
     */
    attr: 'source_language.plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguagePluralSourceErrorComponent = {
    /**
     * * `source_language.plural.source` - source_language.plural.source
     */
    attr: 'source_language.plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateSourceLanguagePopulationErrorComponent = {
    /**
     * * `source_language.population` - source_language.population
     */
    attr: 'source_language.population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateSuggestionAutoacceptErrorComponent = {
    /**
     * * `suggestion_autoaccept` - suggestion_autoaccept
     */
    attr: 'suggestion_autoaccept';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateSuggestionVotingErrorComponent = {
    /**
     * * `suggestion_voting` - suggestion_voting
     */
    attr: 'suggestion_voting';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateTemplateErrorComponent = {
    /**
     * * `template` - template
     */
    attr: 'template';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentsPartialUpdateError>;
};

export type ComponentsPartialUpdateVariantRegexErrorComponent = {
    /**
     * * `variant_regex` - variant_regex
     */
    attr: 'variant_regex';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsPartialUpdateVcsErrorComponent = {
    /**
     * * `vcs` - vcs
     */
    attr: 'vcs';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsPartialUpdateZipfileErrorComponent = {
    /**
     * * `zipfile` - zipfile
     */
    attr: 'zipfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsRepositoryCreateError = ({
    attr: 'non_field_errors';
} & ComponentsRepositoryCreateNonFieldErrorsErrorComponent) | ({
    attr: 'operation';
} & ComponentsRepositoryCreateOperationErrorComponent);

export type ComponentsRepositoryCreateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentsRepositoryCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentsRepositoryCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsRepositoryCreateOperationErrorComponent = {
    /**
     * * `operation` - operation
     */
    attr: 'operation';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ComponentsRepositoryCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentsRepositoryCreateError>;
};

export type ComponentsRepositoryRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsScreenshotsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsStatisticsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsTranslationsCreateAddMessageErrorComponent = {
    /**
     * * `add_message` - add_message
     */
    attr: 'add_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateAddonMessageErrorComponent = {
    /**
     * * `addon_message` - addon_message
     */
    attr: 'addon_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateAgreementErrorComponent = {
    /**
     * * `agreement` - agreement
     */
    attr: 'agreement';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateAllowTranslationPropagationErrorComponent = {
    /**
     * * `allow_translation_propagation` - allow_translation_propagation
     */
    attr: 'allow_translation_propagation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateAutoLockErrorErrorComponent = {
    /**
     * * `auto_lock_error` - auto_lock_error
     */
    attr: 'auto_lock_error';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateBranchErrorComponent = {
    /**
     * * `branch` - branch
     */
    attr: 'branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match';
    detail: string;
};

export type ComponentsTranslationsCreateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateCommitMessageErrorComponent = {
    /**
     * * `commit_message` - commit_message
     */
    attr: 'commit_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateCommitPendingAgeErrorComponent = {
    /**
     * * `commit_pending_age` - commit_pending_age
     */
    attr: 'commit_pending_age';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateDeleteMessageErrorComponent = {
    /**
     * * `delete_message` - delete_message
     */
    attr: 'delete_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateDisableAutoshareErrorComponent = {
    /**
     * * `disable_autoshare` - disable_autoshare
     */
    attr: 'disable_autoshare';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateDocfileErrorComponent = {
    /**
     * * `docfile` - docfile
     */
    attr: 'docfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateEditTemplateErrorComponent = {
    /**
     * * `edit_template` - edit_template
     */
    attr: 'edit_template';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateEnableSuggestionsErrorComponent = {
    /**
     * * `enable_suggestions` - enable_suggestions
     */
    attr: 'enable_suggestions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateEnforcedChecksErrorComponent = {
    /**
     * * `enforced_checks` - enforced_checks
     */
    attr: 'enforced_checks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateError = ({
    attr: 'non_field_errors';
} & ComponentsTranslationsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentsTranslationsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentsTranslationsCreateSlugErrorComponent) | ({
    attr: 'source_language.non_field_errors';
} & ComponentsTranslationsCreateSourceLanguageNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.code';
} & ComponentsTranslationsCreateSourceLanguageCodeErrorComponent) | ({
    attr: 'source_language.name';
} & ComponentsTranslationsCreateSourceLanguageNameErrorComponent) | ({
    attr: 'source_language.plural.non_field_errors';
} & ComponentsTranslationsCreateSourceLanguagePluralNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.plural.source';
} & ComponentsTranslationsCreateSourceLanguagePluralSourceErrorComponent) | ({
    attr: 'source_language.plural.number';
} & ComponentsTranslationsCreateSourceLanguagePluralNumberErrorComponent) | ({
    attr: 'source_language.plural.formula';
} & ComponentsTranslationsCreateSourceLanguagePluralFormulaErrorComponent) | ({
    attr: 'source_language.direction';
} & ComponentsTranslationsCreateSourceLanguageDirectionErrorComponent) | ({
    attr: 'source_language.population';
} & ComponentsTranslationsCreateSourceLanguagePopulationErrorComponent) | ({
    attr: 'vcs';
} & ComponentsTranslationsCreateVcsErrorComponent) | ({
    attr: 'repo';
} & ComponentsTranslationsCreateRepoErrorComponent) | ({
    attr: 'git_export';
} & ComponentsTranslationsCreateGitExportErrorComponent) | ({
    attr: 'branch';
} & ComponentsTranslationsCreateBranchErrorComponent) | ({
    attr: 'push_branch';
} & ComponentsTranslationsCreatePushBranchErrorComponent) | ({
    attr: 'filemask';
} & ComponentsTranslationsCreateFilemaskErrorComponent) | ({
    attr: 'screenshot_filemask';
} & ComponentsTranslationsCreateScreenshotFilemaskErrorComponent) | ({
    attr: 'template';
} & ComponentsTranslationsCreateTemplateErrorComponent) | ({
    attr: 'edit_template';
} & ComponentsTranslationsCreateEditTemplateErrorComponent) | ({
    attr: 'intermediate';
} & ComponentsTranslationsCreateIntermediateErrorComponent) | ({
    attr: 'new_base';
} & ComponentsTranslationsCreateNewBaseErrorComponent) | ({
    attr: 'file_format';
} & ComponentsTranslationsCreateFileFormatErrorComponent) | ({
    attr: 'license';
} & ComponentsTranslationsCreateLicenseErrorComponent) | ({
    attr: 'agreement';
} & ComponentsTranslationsCreateAgreementErrorComponent) | ({
    attr: 'new_lang';
} & ComponentsTranslationsCreateNewLangErrorComponent) | ({
    attr: 'language_code_style';
} & ComponentsTranslationsCreateLanguageCodeStyleErrorComponent) | ({
    attr: 'push';
} & ComponentsTranslationsCreatePushErrorComponent) | ({
    attr: 'check_flags';
} & ComponentsTranslationsCreateCheckFlagsErrorComponent) | ({
    attr: 'priority';
} & ComponentsTranslationsCreatePriorityErrorComponent) | ({
    attr: 'enforced_checks';
} & ComponentsTranslationsCreateEnforcedChecksErrorComponent) | ({
    attr: 'restricted';
} & ComponentsTranslationsCreateRestrictedErrorComponent) | ({
    attr: 'repoweb';
} & ComponentsTranslationsCreateRepowebErrorComponent) | ({
    attr: 'report_source_bugs';
} & ComponentsTranslationsCreateReportSourceBugsErrorComponent) | ({
    attr: 'merge_style';
} & ComponentsTranslationsCreateMergeStyleErrorComponent) | ({
    attr: 'commit_message';
} & ComponentsTranslationsCreateCommitMessageErrorComponent) | ({
    attr: 'add_message';
} & ComponentsTranslationsCreateAddMessageErrorComponent) | ({
    attr: 'delete_message';
} & ComponentsTranslationsCreateDeleteMessageErrorComponent) | ({
    attr: 'merge_message';
} & ComponentsTranslationsCreateMergeMessageErrorComponent) | ({
    attr: 'addon_message';
} & ComponentsTranslationsCreateAddonMessageErrorComponent) | ({
    attr: 'pull_message';
} & ComponentsTranslationsCreatePullMessageErrorComponent) | ({
    attr: 'allow_translation_propagation';
} & ComponentsTranslationsCreateAllowTranslationPropagationErrorComponent) | ({
    attr: 'manage_units';
} & ComponentsTranslationsCreateManageUnitsErrorComponent) | ({
    attr: 'enable_suggestions';
} & ComponentsTranslationsCreateEnableSuggestionsErrorComponent) | ({
    attr: 'suggestion_voting';
} & ComponentsTranslationsCreateSuggestionVotingErrorComponent) | ({
    attr: 'suggestion_autoaccept';
} & ComponentsTranslationsCreateSuggestionAutoacceptErrorComponent) | ({
    attr: 'push_on_commit';
} & ComponentsTranslationsCreatePushOnCommitErrorComponent) | ({
    attr: 'commit_pending_age';
} & ComponentsTranslationsCreateCommitPendingAgeErrorComponent) | ({
    attr: 'auto_lock_error';
} & ComponentsTranslationsCreateAutoLockErrorErrorComponent) | ({
    attr: 'language_regex';
} & ComponentsTranslationsCreateLanguageRegexErrorComponent) | ({
    attr: 'key_filter';
} & ComponentsTranslationsCreateKeyFilterErrorComponent) | ({
    attr: 'secondary_language';
} & ComponentsTranslationsCreateSecondaryLanguageErrorComponent) | ({
    attr: 'variant_regex';
} & ComponentsTranslationsCreateVariantRegexErrorComponent) | ({
    attr: 'zipfile';
} & ComponentsTranslationsCreateZipfileErrorComponent) | ({
    attr: 'docfile';
} & ComponentsTranslationsCreateDocfileErrorComponent) | ({
    attr: 'is_glossary';
} & ComponentsTranslationsCreateIsGlossaryErrorComponent) | ({
    attr: 'glossary_color';
} & ComponentsTranslationsCreateGlossaryColorErrorComponent) | ({
    attr: 'disable_autoshare';
} & ComponentsTranslationsCreateDisableAutoshareErrorComponent) | ({
    attr: 'category';
} & ComponentsTranslationsCreateCategoryErrorComponent);

export type ComponentsTranslationsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentsTranslationsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentsTranslationsCreateFileFormatErrorComponent = {
    /**
     * * `file_format` - file_format
     */
    attr: 'file_format';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ComponentsTranslationsCreateFilemaskErrorComponent = {
    /**
     * * `filemask` - filemask
     */
    attr: 'filemask';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateGitExportErrorComponent = {
    /**
     * * `git_export` - git_export
     */
    attr: 'git_export';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateGlossaryColorErrorComponent = {
    /**
     * * `glossary_color` - glossary_color
     */
    attr: 'glossary_color';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateIntermediateErrorComponent = {
    /**
     * * `intermediate` - intermediate
     */
    attr: 'intermediate';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateIsGlossaryErrorComponent = {
    /**
     * * `is_glossary` - is_glossary
     */
    attr: 'is_glossary';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateKeyFilterErrorComponent = {
    /**
     * * `key_filter` - key_filter
     */
    attr: 'key_filter';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateLanguageCodeStyleErrorComponent = {
    /**
     * * `language_code_style` - language_code_style
     */
    attr: 'language_code_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateLanguageRegexErrorComponent = {
    /**
     * * `language_regex` - language_regex
     */
    attr: 'language_regex';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateLicenseErrorComponent = {
    /**
     * * `license` - license
     */
    attr: 'license';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateManageUnitsErrorComponent = {
    /**
     * * `manage_units` - manage_units
     */
    attr: 'manage_units';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateMergeMessageErrorComponent = {
    /**
     * * `merge_message` - merge_message
     */
    attr: 'merge_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateMergeStyleErrorComponent = {
    /**
     * * `merge_style` - merge_style
     */
    attr: 'merge_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateNewBaseErrorComponent = {
    /**
     * * `new_base` - new_base
     */
    attr: 'new_base';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateNewLangErrorComponent = {
    /**
     * * `new_lang` - new_lang
     */
    attr: 'new_lang';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreatePriorityErrorComponent = {
    /**
     * * `priority` - priority
     */
    attr: 'priority';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreatePullMessageErrorComponent = {
    /**
     * * `pull_message` - pull_message
     */
    attr: 'pull_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreatePushBranchErrorComponent = {
    /**
     * * `push_branch` - push_branch
     */
    attr: 'push_branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreatePushErrorComponent = {
    /**
     * * `push` - push
     */
    attr: 'push';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreatePushOnCommitErrorComponent = {
    /**
     * * `push_on_commit` - push_on_commit
     */
    attr: 'push_on_commit';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateRepoErrorComponent = {
    /**
     * * `repo` - repo
     */
    attr: 'repo';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateReportSourceBugsErrorComponent = {
    /**
     * * `report_source_bugs` - report_source_bugs
     */
    attr: 'report_source_bugs';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateRepowebErrorComponent = {
    /**
     * * `repoweb` - repoweb
     */
    attr: 'repoweb';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateRestrictedErrorComponent = {
    /**
     * * `restricted` - restricted
     */
    attr: 'restricted';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateScreenshotFilemaskErrorComponent = {
    /**
     * * `screenshot_filemask` - screenshot_filemask
     */
    attr: 'screenshot_filemask';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ComponentsTranslationsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguageCodeErrorComponent = {
    /**
     * * `source_language.code` - source_language.code
     */
    attr: 'source_language.code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguageDirectionErrorComponent = {
    /**
     * * `source_language.direction` - source_language.direction
     */
    attr: 'source_language.direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguageNameErrorComponent = {
    /**
     * * `source_language.name` - source_language.name
     */
    attr: 'source_language.name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguageNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.non_field_errors` - source_language.non_field_errors
     */
    attr: 'source_language.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguagePluralFormulaErrorComponent = {
    /**
     * * `source_language.plural.formula` - source_language.plural.formula
     */
    attr: 'source_language.plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguagePluralNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.plural.non_field_errors` - source_language.plural.non_field_errors
     */
    attr: 'source_language.plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguagePluralNumberErrorComponent = {
    /**
     * * `source_language.plural.number` - source_language.plural.number
     */
    attr: 'source_language.plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguagePluralSourceErrorComponent = {
    /**
     * * `source_language.plural.source` - source_language.plural.source
     */
    attr: 'source_language.plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateSourceLanguagePopulationErrorComponent = {
    /**
     * * `source_language.population` - source_language.population
     */
    attr: 'source_language.population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateSuggestionAutoacceptErrorComponent = {
    /**
     * * `suggestion_autoaccept` - suggestion_autoaccept
     */
    attr: 'suggestion_autoaccept';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateSuggestionVotingErrorComponent = {
    /**
     * * `suggestion_voting` - suggestion_voting
     */
    attr: 'suggestion_voting';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateTemplateErrorComponent = {
    /**
     * * `template` - template
     */
    attr: 'template';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentsTranslationsCreateError>;
};

export type ComponentsTranslationsCreateVariantRegexErrorComponent = {
    /**
     * * `variant_regex` - variant_regex
     */
    attr: 'variant_regex';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsTranslationsCreateVcsErrorComponent = {
    /**
     * * `vcs` - vcs
     */
    attr: 'vcs';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsTranslationsCreateZipfileErrorComponent = {
    /**
     * * `zipfile` - zipfile
     */
    attr: 'zipfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsTranslationsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ComponentsUpdateAddMessageErrorComponent = {
    /**
     * * `add_message` - add_message
     */
    attr: 'add_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateAddonMessageErrorComponent = {
    /**
     * * `addon_message` - addon_message
     */
    attr: 'addon_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateAgreementErrorComponent = {
    /**
     * * `agreement` - agreement
     */
    attr: 'agreement';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateAllowTranslationPropagationErrorComponent = {
    /**
     * * `allow_translation_propagation` - allow_translation_propagation
     */
    attr: 'allow_translation_propagation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateAutoLockErrorErrorComponent = {
    /**
     * * `auto_lock_error` - auto_lock_error
     */
    attr: 'auto_lock_error';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateBranchErrorComponent = {
    /**
     * * `branch` - branch
     */
    attr: 'branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match';
    detail: string;
};

export type ComponentsUpdateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateCommitMessageErrorComponent = {
    /**
     * * `commit_message` - commit_message
     */
    attr: 'commit_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateCommitPendingAgeErrorComponent = {
    /**
     * * `commit_pending_age` - commit_pending_age
     */
    attr: 'commit_pending_age';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsUpdateDeleteMessageErrorComponent = {
    /**
     * * `delete_message` - delete_message
     */
    attr: 'delete_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateDisableAutoshareErrorComponent = {
    /**
     * * `disable_autoshare` - disable_autoshare
     */
    attr: 'disable_autoshare';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateDocfileErrorComponent = {
    /**
     * * `docfile` - docfile
     */
    attr: 'docfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ComponentsUpdateEditTemplateErrorComponent = {
    /**
     * * `edit_template` - edit_template
     */
    attr: 'edit_template';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateEnableSuggestionsErrorComponent = {
    /**
     * * `enable_suggestions` - enable_suggestions
     */
    attr: 'enable_suggestions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateEnforcedChecksErrorComponent = {
    /**
     * * `enforced_checks` - enforced_checks
     */
    attr: 'enforced_checks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateError = ({
    attr: 'non_field_errors';
} & ComponentsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ComponentsUpdateNameErrorComponent) | ({
    attr: 'slug';
} & ComponentsUpdateSlugErrorComponent) | ({
    attr: 'source_language.non_field_errors';
} & ComponentsUpdateSourceLanguageNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.code';
} & ComponentsUpdateSourceLanguageCodeErrorComponent) | ({
    attr: 'source_language.name';
} & ComponentsUpdateSourceLanguageNameErrorComponent) | ({
    attr: 'source_language.plural.non_field_errors';
} & ComponentsUpdateSourceLanguagePluralNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.plural.source';
} & ComponentsUpdateSourceLanguagePluralSourceErrorComponent) | ({
    attr: 'source_language.plural.number';
} & ComponentsUpdateSourceLanguagePluralNumberErrorComponent) | ({
    attr: 'source_language.plural.formula';
} & ComponentsUpdateSourceLanguagePluralFormulaErrorComponent) | ({
    attr: 'source_language.direction';
} & ComponentsUpdateSourceLanguageDirectionErrorComponent) | ({
    attr: 'source_language.population';
} & ComponentsUpdateSourceLanguagePopulationErrorComponent) | ({
    attr: 'vcs';
} & ComponentsUpdateVcsErrorComponent) | ({
    attr: 'repo';
} & ComponentsUpdateRepoErrorComponent) | ({
    attr: 'git_export';
} & ComponentsUpdateGitExportErrorComponent) | ({
    attr: 'branch';
} & ComponentsUpdateBranchErrorComponent) | ({
    attr: 'push_branch';
} & ComponentsUpdatePushBranchErrorComponent) | ({
    attr: 'filemask';
} & ComponentsUpdateFilemaskErrorComponent) | ({
    attr: 'screenshot_filemask';
} & ComponentsUpdateScreenshotFilemaskErrorComponent) | ({
    attr: 'template';
} & ComponentsUpdateTemplateErrorComponent) | ({
    attr: 'edit_template';
} & ComponentsUpdateEditTemplateErrorComponent) | ({
    attr: 'intermediate';
} & ComponentsUpdateIntermediateErrorComponent) | ({
    attr: 'new_base';
} & ComponentsUpdateNewBaseErrorComponent) | ({
    attr: 'file_format';
} & ComponentsUpdateFileFormatErrorComponent) | ({
    attr: 'license';
} & ComponentsUpdateLicenseErrorComponent) | ({
    attr: 'agreement';
} & ComponentsUpdateAgreementErrorComponent) | ({
    attr: 'new_lang';
} & ComponentsUpdateNewLangErrorComponent) | ({
    attr: 'language_code_style';
} & ComponentsUpdateLanguageCodeStyleErrorComponent) | ({
    attr: 'push';
} & ComponentsUpdatePushErrorComponent) | ({
    attr: 'check_flags';
} & ComponentsUpdateCheckFlagsErrorComponent) | ({
    attr: 'priority';
} & ComponentsUpdatePriorityErrorComponent) | ({
    attr: 'enforced_checks';
} & ComponentsUpdateEnforcedChecksErrorComponent) | ({
    attr: 'restricted';
} & ComponentsUpdateRestrictedErrorComponent) | ({
    attr: 'repoweb';
} & ComponentsUpdateRepowebErrorComponent) | ({
    attr: 'report_source_bugs';
} & ComponentsUpdateReportSourceBugsErrorComponent) | ({
    attr: 'merge_style';
} & ComponentsUpdateMergeStyleErrorComponent) | ({
    attr: 'commit_message';
} & ComponentsUpdateCommitMessageErrorComponent) | ({
    attr: 'add_message';
} & ComponentsUpdateAddMessageErrorComponent) | ({
    attr: 'delete_message';
} & ComponentsUpdateDeleteMessageErrorComponent) | ({
    attr: 'merge_message';
} & ComponentsUpdateMergeMessageErrorComponent) | ({
    attr: 'addon_message';
} & ComponentsUpdateAddonMessageErrorComponent) | ({
    attr: 'pull_message';
} & ComponentsUpdatePullMessageErrorComponent) | ({
    attr: 'allow_translation_propagation';
} & ComponentsUpdateAllowTranslationPropagationErrorComponent) | ({
    attr: 'manage_units';
} & ComponentsUpdateManageUnitsErrorComponent) | ({
    attr: 'enable_suggestions';
} & ComponentsUpdateEnableSuggestionsErrorComponent) | ({
    attr: 'suggestion_voting';
} & ComponentsUpdateSuggestionVotingErrorComponent) | ({
    attr: 'suggestion_autoaccept';
} & ComponentsUpdateSuggestionAutoacceptErrorComponent) | ({
    attr: 'push_on_commit';
} & ComponentsUpdatePushOnCommitErrorComponent) | ({
    attr: 'commit_pending_age';
} & ComponentsUpdateCommitPendingAgeErrorComponent) | ({
    attr: 'auto_lock_error';
} & ComponentsUpdateAutoLockErrorErrorComponent) | ({
    attr: 'language_regex';
} & ComponentsUpdateLanguageRegexErrorComponent) | ({
    attr: 'key_filter';
} & ComponentsUpdateKeyFilterErrorComponent) | ({
    attr: 'secondary_language';
} & ComponentsUpdateSecondaryLanguageErrorComponent) | ({
    attr: 'variant_regex';
} & ComponentsUpdateVariantRegexErrorComponent) | ({
    attr: 'zipfile';
} & ComponentsUpdateZipfileErrorComponent) | ({
    attr: 'docfile';
} & ComponentsUpdateDocfileErrorComponent) | ({
    attr: 'is_glossary';
} & ComponentsUpdateIsGlossaryErrorComponent) | ({
    attr: 'glossary_color';
} & ComponentsUpdateGlossaryColorErrorComponent) | ({
    attr: 'disable_autoshare';
} & ComponentsUpdateDisableAutoshareErrorComponent) | ({
    attr: 'category';
} & ComponentsUpdateCategoryErrorComponent);

export type ComponentsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ComponentsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ComponentsUpdateFileFormatErrorComponent = {
    /**
     * * `file_format` - file_format
     */
    attr: 'file_format';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ComponentsUpdateFilemaskErrorComponent = {
    /**
     * * `filemask` - filemask
     */
    attr: 'filemask';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateGitExportErrorComponent = {
    /**
     * * `git_export` - git_export
     */
    attr: 'git_export';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateGlossaryColorErrorComponent = {
    /**
     * * `glossary_color` - glossary_color
     */
    attr: 'glossary_color';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsUpdateIntermediateErrorComponent = {
    /**
     * * `intermediate` - intermediate
     */
    attr: 'intermediate';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateIsGlossaryErrorComponent = {
    /**
     * * `is_glossary` - is_glossary
     */
    attr: 'is_glossary';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateKeyFilterErrorComponent = {
    /**
     * * `key_filter` - key_filter
     */
    attr: 'key_filter';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateLanguageCodeStyleErrorComponent = {
    /**
     * * `language_code_style` - language_code_style
     */
    attr: 'language_code_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsUpdateLanguageRegexErrorComponent = {
    /**
     * * `language_regex` - language_regex
     */
    attr: 'language_regex';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateLicenseErrorComponent = {
    /**
     * * `license` - license
     */
    attr: 'license';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsUpdateManageUnitsErrorComponent = {
    /**
     * * `manage_units` - manage_units
     */
    attr: 'manage_units';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateMergeMessageErrorComponent = {
    /**
     * * `merge_message` - merge_message
     */
    attr: 'merge_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateMergeStyleErrorComponent = {
    /**
     * * `merge_style` - merge_style
     */
    attr: 'merge_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateNewBaseErrorComponent = {
    /**
     * * `new_base` - new_base
     */
    attr: 'new_base';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateNewLangErrorComponent = {
    /**
     * * `new_lang` - new_lang
     */
    attr: 'new_lang';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdatePriorityErrorComponent = {
    /**
     * * `priority` - priority
     */
    attr: 'priority';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsUpdatePullMessageErrorComponent = {
    /**
     * * `pull_message` - pull_message
     */
    attr: 'pull_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdatePushBranchErrorComponent = {
    /**
     * * `push_branch` - push_branch
     */
    attr: 'push_branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdatePushErrorComponent = {
    /**
     * * `push` - push
     */
    attr: 'push';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdatePushOnCommitErrorComponent = {
    /**
     * * `push_on_commit` - push_on_commit
     */
    attr: 'push_on_commit';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateRepoErrorComponent = {
    /**
     * * `repo` - repo
     */
    attr: 'repo';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateReportSourceBugsErrorComponent = {
    /**
     * * `report_source_bugs` - report_source_bugs
     */
    attr: 'report_source_bugs';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateRepowebErrorComponent = {
    /**
     * * `repoweb` - repoweb
     */
    attr: 'repoweb';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateRestrictedErrorComponent = {
    /**
     * * `restricted` - restricted
     */
    attr: 'restricted';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateScreenshotFilemaskErrorComponent = {
    /**
     * * `screenshot_filemask` - screenshot_filemask
     */
    attr: 'screenshot_filemask';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ComponentsUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateSourceLanguageCodeErrorComponent = {
    /**
     * * `source_language.code` - source_language.code
     */
    attr: 'source_language.code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateSourceLanguageDirectionErrorComponent = {
    /**
     * * `source_language.direction` - source_language.direction
     */
    attr: 'source_language.direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsUpdateSourceLanguageNameErrorComponent = {
    /**
     * * `source_language.name` - source_language.name
     */
    attr: 'source_language.name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateSourceLanguageNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.non_field_errors` - source_language.non_field_errors
     */
    attr: 'source_language.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateSourceLanguagePluralFormulaErrorComponent = {
    /**
     * * `source_language.plural.formula` - source_language.plural.formula
     */
    attr: 'source_language.plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateSourceLanguagePluralNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.plural.non_field_errors` - source_language.plural.non_field_errors
     */
    attr: 'source_language.plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateSourceLanguagePluralNumberErrorComponent = {
    /**
     * * `source_language.plural.number` - source_language.plural.number
     */
    attr: 'source_language.plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsUpdateSourceLanguagePluralSourceErrorComponent = {
    /**
     * * `source_language.plural.source` - source_language.plural.source
     */
    attr: 'source_language.plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsUpdateSourceLanguagePopulationErrorComponent = {
    /**
     * * `source_language.population` - source_language.population
     */
    attr: 'source_language.population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsUpdateSuggestionAutoacceptErrorComponent = {
    /**
     * * `suggestion_autoaccept` - suggestion_autoaccept
     */
    attr: 'suggestion_autoaccept';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ComponentsUpdateSuggestionVotingErrorComponent = {
    /**
     * * `suggestion_voting` - suggestion_voting
     */
    attr: 'suggestion_voting';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ComponentsUpdateTemplateErrorComponent = {
    /**
     * * `template` - template
     */
    attr: 'template';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ComponentsUpdateError>;
};

export type ComponentsUpdateVariantRegexErrorComponent = {
    /**
     * * `variant_regex` - variant_regex
     */
    attr: 'variant_regex';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ComponentsUpdateVcsErrorComponent = {
    /**
     * * `vcs` - vcs
     */
    attr: 'vcs';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ComponentsUpdateZipfileErrorComponent = {
    /**
     * * `zipfile` - zipfile
     */
    attr: 'zipfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

/**
 * * `` -
 * * `ignore` - ignore
 * * `replace-translated` - replace-translated
 * * `replace-approved` - replace-approved
 */
export type ConflictsEnum = 'ignore' | 'replace-translated' | 'replace-approved';

/**
 * * `` - Automatically detect text direction
 * * `ltr` - Left to right
 * * `rtl` - Right to left
 */
export type DirectionEnum = 'ltr' | 'rtl';

export type Error401 = {
    code: ErrorCode401Enum;
    detail: string;
    attr: string | null;
};

export type Error403 = {
    code: ErrorCode403Enum;
    detail: string;
    attr: string | null;
};

export type Error404 = {
    code: ErrorCode404Enum;
    detail: string;
    attr: string | null;
};

export type Error405 = {
    code: ErrorCode405Enum;
    detail: string;
    attr: string | null;
};

export type Error406 = {
    code: ErrorCode406Enum;
    detail: string;
    attr: string | null;
};

export type Error415 = {
    code: ErrorCode415Enum;
    detail: string;
    attr: string | null;
};

export type Error423 = {
    code: ErrorCode423Enum;
    detail: string;
    attr: string | null;
};

export type Error429 = {
    code: ErrorCode429Enum;
    detail: string;
    attr: string | null;
};

export type Error500 = {
    code: ErrorCode500Enum;
    detail: string;
    attr: string | null;
};

/**
 * * `authentication_failed` - Authentication Failed
 * * `not_authenticated` - Not Authenticated
 */
export type ErrorCode401Enum = 'authentication_failed' | 'not_authenticated';

/**
 * * `permission_denied` - Permission Denied
 */
export type ErrorCode403Enum = 'permission_denied';

/**
 * * `not_found` - Not Found
 */
export type ErrorCode404Enum = 'not_found';

/**
 * * `method_not_allowed` - Method Not Allowed
 */
export type ErrorCode405Enum = 'method_not_allowed';

/**
 * * `not_acceptable` - Not Acceptable
 */
export type ErrorCode406Enum = 'not_acceptable';

/**
 * * `unsupported_media_type` - Unsupported Media Type
 */
export type ErrorCode415Enum = 'unsupported_media_type';

/**
 * * `repository-locked` - Repository Locked
 * * `component-locked` - Component Locked
 * * `unknown-locked` - Unknown Locked
 */
export type ErrorCode423Enum = 'repository-locked' | 'component-locked' | 'unknown-locked';

/**
 * * `throttled` - Throttled
 */
export type ErrorCode429Enum = 'throttled';

/**
 * * `error` - Error
 */
export type ErrorCode500Enum = 'error';

export type ErrorResponse401 = {
    type: ClientErrorEnum;
    errors: Array<Error401>;
};

export type ErrorResponse403 = {
    type: ClientErrorEnum;
    errors: Array<Error403>;
};

export type ErrorResponse404 = {
    type: ClientErrorEnum;
    errors: Array<Error404>;
};

export type ErrorResponse405 = {
    type: ClientErrorEnum;
    errors: Array<Error405>;
};

export type ErrorResponse406 = {
    type: ClientErrorEnum;
    errors: Array<Error406>;
};

export type ErrorResponse415 = {
    type: ClientErrorEnum;
    errors: Array<Error415>;
};

export type ErrorResponse423 = {
    type: ServerErrorEnum;
    errors: Array<Error423>;
};

export type ErrorResponse429 = {
    type: ClientErrorEnum;
    errors: Array<Error429>;
};

export type ErrorResponse500 = {
    type: ServerErrorEnum;
    errors: Array<Error500>;
};

/**
 * * `appstore` - App store metadata files
 * * `arb` - ARB file
 * * `aresource` - Android String Resource
 * * `ass` - Advanced SubStation Alpha subtitle file
 * * `csv` - CSV file
 * * `csv-multi-utf-8` - Multivalue CSV file (UTF-8)
 * * `csv-simple` - Simple CSV file
 * * `csv-simple-iso` - Simple CSV file (ISO-8859-1)
 * * `csv-simple-utf-8` - Simple CSV file (UTF-8)
 * * `csv-utf-8` - CSV file (UTF-8)
 * * `dokuwiki` - DokuWiki text file
 * * `dtd` - DTD file
 * * `flatxml` - Flat XML file
 * * `fluent` - Fluent file
 * * `formatjs` - Format.JS JSON file
 * * `go-i18n-json` - go-i18n v1 JSON file
 * * `go-i18n-json-v2` - go-i18n v2 JSON file
 * * `gotext` - gotext JSON file
 * * `gwt` - GWT properties (UTF-8)
 * * `gwt-iso` - GWT properties (ISO-8859-1)
 * * `html` - HTML file
 * * `i18next` - i18next JSON file v3
 * * `i18nextv4` - i18next JSON file v4
 * * `idml` - IDML file
 * * `ini` - INI file
 * * `islu` - Inno Setup INI file
 * * `joomla` - Joomla language file
 * * `json` - JSON file
 * * `json-nested` - JSON nested structure file
 * * `laravel` - Laravel PHP strings
 * * `markdown` - Markdown file
 * * `mediawiki` - MediaWiki text file
 * * `mi18n-lang` - @draggable/i18n lang file
 * * `moko-resource` - Mobile Kotlin Resource
 * * `odf` - OpenDocument file
 * * `php` - PHP strings
 * * `plainxliff` - XLIFF 1.2 translation file
 * * `po` - gettext PO file
 * * `po-mono` - gettext PO file (monolingual)
 * * `poxliff` - XLIFF 1.2 with gettext extensions
 * * `properties` - Java Properties (ISO 8859-1)
 * * `properties-utf16` - Java Properties (UTF-16)
 * * `properties-utf8` - Java Properties (UTF-8)
 * * `rc` - RC file
 * * `resourcedictionary` - ResourceDictionary file
 * * `resx` - .NET resource file
 * * `ruby-yaml` - Ruby YAML file
 * * `srt` - SubRip subtitle file
 * * `ssa` - SubStation Alpha subtitle file
 * * `strings` - iOS strings (UTF-16)
 * * `strings-utf8` - iOS strings (UTF-8)
 * * `stringsdict` - Stringsdict file
 * * `sub` - MicroDVD subtitle file
 * * `tbx` - TermBase eXchange file
 * * `ts` - Qt Linguist translation file
 * * `txt` - Plain text file
 * * `webextension` - WebExtension JSON file
 * * `xliff` - XLIFF 1.2 with placeables support
 * * `xlsx` - Excel Open XML
 * * `xwiki-fullpage` - XWiki Full Page
 * * `xwiki-java-properties` - XWiki Java Properties
 * * `xwiki-page-properties` - XWiki Page Properties
 * * `yaml` - YAML file
 */
export type FileFormatEnum = 'appstore' | 'arb' | 'aresource' | 'ass' | 'csv' | 'csv-multi-utf-8' | 'csv-simple' | 'csv-simple-iso' | 'csv-simple-utf-8' | 'csv-utf-8' | 'dokuwiki' | 'dtd' | 'flatxml' | 'fluent' | 'formatjs' | 'go-i18n-json' | 'go-i18n-json-v2' | 'gotext' | 'gwt' | 'gwt-iso' | 'html' | 'i18next' | 'i18nextv4' | 'idml' | 'ini' | 'islu' | 'joomla' | 'json' | 'json-nested' | 'laravel' | 'markdown' | 'mediawiki' | 'mi18n-lang' | 'moko-resource' | 'odf' | 'php' | 'plainxliff' | 'po' | 'po-mono' | 'poxliff' | 'properties' | 'properties-utf16' | 'properties-utf8' | 'rc' | 'resourcedictionary' | 'resx' | 'ruby-yaml' | 'srt' | 'ssa' | 'strings' | 'strings-utf8' | 'stringsdict' | 'sub' | 'tbx' | 'ts' | 'txt' | 'webextension' | 'xliff' | 'xlsx' | 'xwiki-fullpage' | 'xwiki-java-properties' | 'xwiki-page-properties' | 'yaml';

/**
 * * `0` - No notification
 * * `1` - Instant notification
 * * `2` - Daily digest
 * * `3` - Weekly digest
 * * `4` - Monthly digest
 */
export type FrequencyEnum = 0 | 1 | 2 | 3 | 4;

/**
 * * `` -
 * * `process` - process
 * * `approve` - approve
 */
export type FuzzyEnum = 'process' | 'approve';

export type Group = {
    readonly id: number;
    name: string;
    defining_project?: string;
    project_selection?: ProjectSelectionEnum;
    language_selection?: LanguageSelectionEnum;
    readonly url: string;
    readonly roles: Array<string>;
    readonly languages: Array<string>;
    readonly projects: Array<string>;
    readonly componentlists: Array<string>;
    readonly components: Array<string>;
    /**
     * Enforced two-factor authentication
     * Requires users to have two-factor authentication configured.
     */
    enforced_2fa?: boolean;
};

export type GroupsAdminsCreateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsAdminsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsAdminsCreateError = ({
    attr: 'non_field_errors';
} & GroupsAdminsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsAdminsCreateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsAdminsCreateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsAdminsCreateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsAdminsCreateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsAdminsCreateEnforced2FaErrorComponent);

export type GroupsAdminsCreateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsAdminsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsAdminsCreateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsAdminsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsAdminsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsAdminsCreateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsAdminsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsAdminsCreateError>;
};

export type GroupsAdminsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsComponentlistsCreateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsComponentlistsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsComponentlistsCreateError = ({
    attr: 'non_field_errors';
} & GroupsComponentlistsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsComponentlistsCreateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsComponentlistsCreateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsComponentlistsCreateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsComponentlistsCreateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsComponentlistsCreateEnforced2FaErrorComponent);

export type GroupsComponentlistsCreateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsComponentlistsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsComponentlistsCreateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsComponentlistsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsComponentlistsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsComponentlistsCreateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsComponentlistsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsComponentlistsCreateError>;
};

export type GroupsComponentlistsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsComponentsCreateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsComponentsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsComponentsCreateError = ({
    attr: 'non_field_errors';
} & GroupsComponentsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsComponentsCreateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsComponentsCreateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsComponentsCreateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsComponentsCreateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsComponentsCreateEnforced2FaErrorComponent);

export type GroupsComponentsCreateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsComponentsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsComponentsCreateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsComponentsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsComponentsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsComponentsCreateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsComponentsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsComponentsCreateError>;
};

export type GroupsComponentsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsCreateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsCreateError = ({
    attr: 'non_field_errors';
} & GroupsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsCreateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsCreateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsCreateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsCreateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsCreateEnforced2FaErrorComponent);

export type GroupsCreateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsCreateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsCreateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsCreateError>;
};

export type GroupsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsLanguagesCreateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsLanguagesCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsLanguagesCreateError = ({
    attr: 'non_field_errors';
} & GroupsLanguagesCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsLanguagesCreateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsLanguagesCreateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsLanguagesCreateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsLanguagesCreateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsLanguagesCreateEnforced2FaErrorComponent);

export type GroupsLanguagesCreateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsLanguagesCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsLanguagesCreateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsLanguagesCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsLanguagesCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsLanguagesCreateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsLanguagesCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsLanguagesCreateError>;
};

export type GroupsLanguagesDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsPartialUpdateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsPartialUpdateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsPartialUpdateError = ({
    attr: 'non_field_errors';
} & GroupsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsPartialUpdateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsPartialUpdateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsPartialUpdateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsPartialUpdateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsPartialUpdateEnforced2FaErrorComponent);

export type GroupsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsPartialUpdateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsPartialUpdateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsPartialUpdateError>;
};

export type GroupsProjectsCreateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsProjectsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsProjectsCreateError = ({
    attr: 'non_field_errors';
} & GroupsProjectsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsProjectsCreateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsProjectsCreateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsProjectsCreateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsProjectsCreateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsProjectsCreateEnforced2FaErrorComponent);

export type GroupsProjectsCreateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsProjectsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsProjectsCreateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsProjectsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsProjectsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsProjectsCreateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsProjectsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsProjectsCreateError>;
};

export type GroupsProjectsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsRolesCreateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsRolesCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsRolesCreateError = ({
    attr: 'non_field_errors';
} & GroupsRolesCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsRolesCreateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsRolesCreateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsRolesCreateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsRolesCreateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsRolesCreateEnforced2FaErrorComponent);

export type GroupsRolesCreateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsRolesCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsRolesCreateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsRolesCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsRolesCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsRolesCreateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsRolesCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsRolesCreateError>;
};

export type GroupsRolesDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type GroupsUpdateDefiningProjectErrorComponent = {
    /**
     * * `defining_project` - defining_project
     */
    attr: 'defining_project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     * * `null` - null
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match' | 'null';
    detail: string;
};

export type GroupsUpdateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsUpdateError = ({
    attr: 'non_field_errors';
} & GroupsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & GroupsUpdateNameErrorComponent) | ({
    attr: 'defining_project';
} & GroupsUpdateDefiningProjectErrorComponent) | ({
    attr: 'project_selection';
} & GroupsUpdateProjectSelectionErrorComponent) | ({
    attr: 'language_selection';
} & GroupsUpdateLanguageSelectionErrorComponent) | ({
    attr: 'enforced_2fa';
} & GroupsUpdateEnforced2FaErrorComponent);

export type GroupsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & GroupsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type GroupsUpdateLanguageSelectionErrorComponent = {
    /**
     * * `language_selection` - language_selection
     */
    attr: 'language_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type GroupsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type GroupsUpdateProjectSelectionErrorComponent = {
    /**
     * * `project_selection` - project_selection
     */
    attr: 'project_selection';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type GroupsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<GroupsUpdateError>;
};

export type Language = {
    readonly id: number;
    /**
     * Language code
     */
    code: string;
    name?: string;
    plural?: LanguagePlural;
    readonly aliases: Array<unknown>;
    /**
     * Text direction
     */
    direction?: DirectionEnum | BlankEnum;
    /**
     * Number of speakers
     * Number of people speaking this language.
     */
    population?: number;
    readonly web_url: string;
    readonly url: string;
    readonly statistics_url: string;
};

/**
 * * `` - Default based on the file format
 * * `posix` - POSIX style using underscore as a separator
 * * `posix_lowercase` - POSIX style using underscore as a separator, lower cased
 * * `bcp` - BCP style using hyphen as a separator
 * * `posix_long` - POSIX style using underscore as a separator, including country code
 * * `posix_long_lowercase` - POSIX style using underscore as a separator, including country code, lower cased
 * * `bcp_long` - BCP style using hyphen as a separator, including country code
 * * `bcp_legacy` - BCP style using hyphen as a separator, legacy language codes
 * * `bcp_lower` - BCP style using hyphen as a separator, lower cased
 * * `android` - Android style
 * * `appstore` - Apple App Store metadata style
 * * `googleplay` - Google Play metadata style
 * * `linux` - Linux style
 * * `linux_lowercase` - Linux style, lower cased
 */
export type LanguageCodeStyleEnum = 'posix' | 'posix_lowercase' | 'bcp' | 'posix_long' | 'posix_long_lowercase' | 'bcp_long' | 'bcp_legacy' | 'bcp_lower' | 'android' | 'appstore' | 'googleplay' | 'linux' | 'linux_lowercase';

export type LanguagePlural = {
    readonly id: number;
    /**
     * Plural definition source
     */
    source?: SourceEnum;
    /**
     * Number of plurals
     */
    number?: number;
    /**
     * Plural formula
     */
    formula?: string;
    /**
     * Plural type
     */
    readonly type: number;
};

/**
 * * `0` - As defined
 * * `1` - All languages
 */
export type LanguageSelectionEnum = 0 | 1;

export type LanguagesCreateCodeErrorComponent = {
    /**
     * * `code` - code
     */
    attr: 'code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesCreateDirectionErrorComponent = {
    /**
     * * `direction` - direction
     */
    attr: 'direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type LanguagesCreateError = ({
    attr: 'non_field_errors';
} & LanguagesCreateNonFieldErrorsErrorComponent) | ({
    attr: 'code';
} & LanguagesCreateCodeErrorComponent) | ({
    attr: 'name';
} & LanguagesCreateNameErrorComponent) | ({
    attr: 'plural.non_field_errors';
} & LanguagesCreatePluralNonFieldErrorsErrorComponent) | ({
    attr: 'plural.source';
} & LanguagesCreatePluralSourceErrorComponent) | ({
    attr: 'plural.number';
} & LanguagesCreatePluralNumberErrorComponent) | ({
    attr: 'plural.formula';
} & LanguagesCreatePluralFormulaErrorComponent) | ({
    attr: 'direction';
} & LanguagesCreateDirectionErrorComponent) | ({
    attr: 'population';
} & LanguagesCreatePopulationErrorComponent);

export type LanguagesCreateErrorResponse400 = ({
    type: 'validation_error';
} & LanguagesCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type LanguagesCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type LanguagesCreatePluralFormulaErrorComponent = {
    /**
     * * `plural.formula` - plural.formula
     */
    attr: 'plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesCreatePluralNonFieldErrorsErrorComponent = {
    /**
     * * `plural.non_field_errors` - plural.non_field_errors
     */
    attr: 'plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type LanguagesCreatePluralNumberErrorComponent = {
    /**
     * * `plural.number` - plural.number
     */
    attr: 'plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesCreatePluralSourceErrorComponent = {
    /**
     * * `plural.source` - plural.source
     */
    attr: 'plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesCreatePopulationErrorComponent = {
    /**
     * * `population` - population
     */
    attr: 'population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<LanguagesCreateError>;
};

export type LanguagesDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type LanguagesListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type LanguagesPartialUpdateCodeErrorComponent = {
    /**
     * * `code` - code
     */
    attr: 'code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesPartialUpdateDirectionErrorComponent = {
    /**
     * * `direction` - direction
     */
    attr: 'direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type LanguagesPartialUpdateError = ({
    attr: 'non_field_errors';
} & LanguagesPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'code';
} & LanguagesPartialUpdateCodeErrorComponent) | ({
    attr: 'name';
} & LanguagesPartialUpdateNameErrorComponent) | ({
    attr: 'plural.non_field_errors';
} & LanguagesPartialUpdatePluralNonFieldErrorsErrorComponent) | ({
    attr: 'plural.source';
} & LanguagesPartialUpdatePluralSourceErrorComponent) | ({
    attr: 'plural.number';
} & LanguagesPartialUpdatePluralNumberErrorComponent) | ({
    attr: 'plural.formula';
} & LanguagesPartialUpdatePluralFormulaErrorComponent) | ({
    attr: 'direction';
} & LanguagesPartialUpdateDirectionErrorComponent) | ({
    attr: 'population';
} & LanguagesPartialUpdatePopulationErrorComponent);

export type LanguagesPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & LanguagesPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type LanguagesPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type LanguagesPartialUpdatePluralFormulaErrorComponent = {
    /**
     * * `plural.formula` - plural.formula
     */
    attr: 'plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesPartialUpdatePluralNonFieldErrorsErrorComponent = {
    /**
     * * `plural.non_field_errors` - plural.non_field_errors
     */
    attr: 'plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type LanguagesPartialUpdatePluralNumberErrorComponent = {
    /**
     * * `plural.number` - plural.number
     */
    attr: 'plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesPartialUpdatePluralSourceErrorComponent = {
    /**
     * * `plural.source` - plural.source
     */
    attr: 'plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesPartialUpdatePopulationErrorComponent = {
    /**
     * * `population` - population
     */
    attr: 'population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<LanguagesPartialUpdateError>;
};

export type LanguagesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type LanguagesStatisticsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type LanguagesUpdateCodeErrorComponent = {
    /**
     * * `code` - code
     */
    attr: 'code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesUpdateDirectionErrorComponent = {
    /**
     * * `direction` - direction
     */
    attr: 'direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type LanguagesUpdateError = ({
    attr: 'non_field_errors';
} & LanguagesUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'code';
} & LanguagesUpdateCodeErrorComponent) | ({
    attr: 'name';
} & LanguagesUpdateNameErrorComponent) | ({
    attr: 'plural.non_field_errors';
} & LanguagesUpdatePluralNonFieldErrorsErrorComponent) | ({
    attr: 'plural.source';
} & LanguagesUpdatePluralSourceErrorComponent) | ({
    attr: 'plural.number';
} & LanguagesUpdatePluralNumberErrorComponent) | ({
    attr: 'plural.formula';
} & LanguagesUpdatePluralFormulaErrorComponent) | ({
    attr: 'direction';
} & LanguagesUpdateDirectionErrorComponent) | ({
    attr: 'population';
} & LanguagesUpdatePopulationErrorComponent);

export type LanguagesUpdateErrorResponse400 = ({
    type: 'validation_error';
} & LanguagesUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type LanguagesUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type LanguagesUpdatePluralFormulaErrorComponent = {
    /**
     * * `plural.formula` - plural.formula
     */
    attr: 'plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type LanguagesUpdatePluralNonFieldErrorsErrorComponent = {
    /**
     * * `plural.non_field_errors` - plural.non_field_errors
     */
    attr: 'plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type LanguagesUpdatePluralNumberErrorComponent = {
    /**
     * * `plural.number` - plural.number
     */
    attr: 'plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesUpdatePluralSourceErrorComponent = {
    /**
     * * `plural.source` - plural.source
     */
    attr: 'plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesUpdatePopulationErrorComponent = {
    /**
     * * `population` - population
     */
    attr: 'population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type LanguagesUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<LanguagesUpdateError>;
};

/**
 * * `proprietary` - Proprietary
 * * `3D-Slicer-1.0` - 3D Slicer License v1.0
 * * `Glide` - 3dfx Glide License
 * * `Abstyles` - Abstyles License
 * * `AFL-1.1` - Academic Free License v1.1
 * * `AFL-1.2` - Academic Free License v1.2
 * * `AFL-2.0` - Academic Free License v2.0
 * * `AFL-2.1` - Academic Free License v2.1
 * * `AFL-3.0` - Academic Free License v3.0
 * * `AMPAS` - Academy of Motion Picture Arts and Sciences BSD
 * * `AdaCore-doc` - AdaCore Doc License
 * * `APL-1.0` - Adaptive Public License 1.0
 * * `Adobe-Display-PostScript` - Adobe Display PostScript License
 * * `Adobe-Glyph` - Adobe Glyph List License
 * * `APAFML` - Adobe Postscript AFM License
 * * `Adobe-2006` - Adobe Systems Incorporated Source Code License Agreement
 * * `Adobe-Utopia` - Adobe Utopia Font License
 * * `AGPL-1.0-only` - Affero General Public License v1.0 only
 * * `AGPL-1.0-or-later` - Affero General Public License v1.0 or later
 * * `Afmparse` - Afmparse License
 * * `Aladdin` - Aladdin Free Public License
 * * `ADSL` - Amazon Digital Services License
 * * `AMD-newlib` - AMD newlib License
 * * `AMDPLPA` - AMD's plpa_map.c License
 * * `AML-glslang` - AML glslang variant License
 * * `ANTLR-PD` - ANTLR Software Rights Notice
 * * `ANTLR-PD-fallback` - ANTLR Software Rights Notice with license fallback
 * * `any-OSI` - Any OSI License
 * * `any-OSI-perl-modules` - Any OSI License - Perl Modules
 * * `Apache-1.0` - Apache License 1.0
 * * `Apache-1.1` - Apache License 1.1
 * * `Apache-2.0` - Apache License 2.0
 * * `App-s2p` - App::s2p License
 * * `AML` - Apple MIT License
 * * `APSL-1.0` - Apple Public Source License 1.0
 * * `APSL-1.1` - Apple Public Source License 1.1
 * * `APSL-1.2` - Apple Public Source License 1.2
 * * `APSL-2.0` - Apple Public Source License 2.0
 * * `Arphic-1999` - Arphic Public License
 * * `Artistic-1.0` - Artistic License 1.0
 * * `Artistic-1.0-Perl` - Artistic License 1.0 (Perl)
 * * `Artistic-1.0-cl8` - Artistic License 1.0 w/clause 8
 * * `Artistic-2.0` - Artistic License 2.0
 * * `ASWF-Digital-Assets-1.1` - ASWF Digital Assets License 1.1
 * * `ASWF-Digital-Assets-1.0` - ASWF Digital Assets License version 1.0
 * * `AAL` - Attribution Assurance License
 * * `Baekmuk` - Baekmuk License
 * * `Bahyph` - Bahyph License
 * * `Barr` - Barr License
 * * `bcrypt-Solar-Designer` - bcrypt Solar Designer License
 * * `Beerware` - Beerware License
 * * `Bitstream-Charter` - Bitstream Charter Font License
 * * `Bitstream-Vera` - Bitstream Vera Font License
 * * `BitTorrent-1.0` - BitTorrent Open Source License v1.0
 * * `BitTorrent-1.1` - BitTorrent Open Source License v1.1
 * * `BlueOak-1.0.0` - Blue Oak Model License 1.0.0
 * * `Boehm-GC` - Boehm-Demers-Weiser GC License
 * * `Boehm-GC-without-fee` - Boehm-Demers-Weiser GC License (without fee)
 * * `BSL-1.0` - Boost Software License 1.0
 * * `Borceux` - Borceux license
 * * `Brian-Gladman-2-Clause` - Brian Gladman 2-Clause License
 * * `Brian-Gladman-3-Clause` - Brian Gladman 3-Clause License
 * * `BSD-1-Clause` - BSD 1-Clause License
 * * `BSD-2-Clause` - BSD 2-Clause "Simplified" License
 * * `BSD-2-Clause-first-lines` - BSD 2-Clause - first lines requirement
 * * `BSD-2-Clause-Darwin` - BSD 2-Clause - Ian Darwin variant
 * * `BSD-2-Clause-pkgconf-disclaimer` - BSD 2-Clause pkgconf disclaimer variant
 * * `BSD-2-Clause-Views` - BSD 2-Clause with views sentence
 * * `BSD-3-Clause` - BSD 3-Clause "New" or "Revised" License
 * * `BSD-3-Clause-acpica` - BSD 3-Clause acpica variant
 * * `BSD-3-Clause-Clear` - BSD 3-Clause Clear License
 * * `BSD-3-Clause-flex` - BSD 3-Clause Flex variant
 * * `BSD-3-Clause-Modification` - BSD 3-Clause Modification
 * * `BSD-3-Clause-No-Military-License` - BSD 3-Clause No Military License
 * * `BSD-3-Clause-No-Nuclear-License` - BSD 3-Clause No Nuclear License
 * * `BSD-3-Clause-No-Nuclear-License-2014` - BSD 3-Clause No Nuclear License 2014
 * * `BSD-3-Clause-No-Nuclear-Warranty` - BSD 3-Clause No Nuclear Warranty
 * * `BSD-3-Clause-Open-MPI` - BSD 3-Clause Open MPI variant
 * * `BSD-3-Clause-Sun` - BSD 3-Clause Sun Microsystems
 * * `BSD-4-Clause-Shortened` - BSD 4 Clause Shortened
 * * `BSD-4-Clause` - BSD 4-Clause "Original" or "Old" License
 * * `BSD-4.3RENO` - BSD 4.3 RENO License
 * * `BSD-4.3TAHOE` - BSD 4.3 TAHOE License
 * * `BSD-Advertising-Acknowledgement` - BSD Advertising Acknowledgement License
 * * `BSD-Protection` - BSD Protection License
 * * `BSD-Source-Code` - BSD Source Code Attribution
 * * `BSD-Source-beginning-file` - BSD Source Code Attribution - beginning of file variant
 * * `BSD-3-Clause-Attribution` - BSD with attribution
 * * `BSD-Attribution-HPND-disclaimer` - BSD with Attribution and HPND disclaimer
 * * `0BSD` - BSD Zero Clause License
 * * `BSD-2-Clause-Patent` - BSD-2-Clause Plus Patent License
 * * `BSD-4-Clause-UC` - BSD-4-Clause (University of California-Specific)
 * * `BSD-Inferno-Nettverk` - BSD-Inferno-Nettverk
 * * `BUSL-1.1` - Business Source License 1.1
 * * `bzip2-1.0.6` - bzip2 and libbzip2 License v1.0.6
 * * `Caldera` - Caldera License
 * * `Caldera-no-preamble` - Caldera License (without preamble)
 * * `Catharon` - Catharon License
 * * `CECILL-1.0` - CeCILL Free Software License Agreement v1.0
 * * `CECILL-1.1` - CeCILL Free Software License Agreement v1.1
 * * `CECILL-2.0` - CeCILL Free Software License Agreement v2.0
 * * `CECILL-2.1` - CeCILL Free Software License Agreement v2.1
 * * `CECILL-B` - CeCILL-B Free Software License Agreement
 * * `CECILL-C` - CeCILL-C Free Software License Agreement
 * * `CERN-OHL-1.1` - CERN Open Hardware Licence v1.1
 * * `CERN-OHL-1.2` - CERN Open Hardware Licence v1.2
 * * `CERN-OHL-P-2.0` - CERN Open Hardware Licence Version 2 - Permissive
 * * `CERN-OHL-S-2.0` - CERN Open Hardware Licence Version 2 - Strongly Reciprocal
 * * `CERN-OHL-W-2.0` - CERN Open Hardware Licence Version 2 - Weakly Reciprocal
 * * `CFITSIO` - CFITSIO License
 * * `check-cvs` - check-cvs License
 * * `checkmk` - Checkmk License
 * * `ClArtistic` - Clarified Artistic License
 * * `Clips` - Clips License
 * * `CMU-Mach-nodoc` - CMU    Mach - no notices-in-documentation variant
 * * `MIT-CMU` - CMU License
 * * `CMU-Mach` - CMU Mach License
 * * `CNRI-Jython` - CNRI Jython License
 * * `CNRI-Python` - CNRI Python License
 * * `CNRI-Python-GPL-Compatible` - CNRI Python Open Source GPL Compatible License Agreement
 * * `CPOL-1.02` - Code Project Open License 1.02
 * * `CDDL-1.0` - Common Development and Distribution License 1.0
 * * `CDDL-1.1` - Common Development and Distribution License 1.1
 * * `CDL-1.0` - Common Documentation License 1.0
 * * `LOOP` - Common Lisp LOOP License
 * * `CPAL-1.0` - Common Public Attribution License 1.0
 * * `CPL-1.0` - Common Public License 1.0
 * * `cve-tou` - Common Vulnerability Enumeration ToU License
 * * `CDLA-Permissive-1.0` - Community Data License Agreement Permissive 1.0
 * * `CDLA-Permissive-2.0` - Community Data License Agreement Permissive 2.0
 * * `CDLA-Sharing-1.0` - Community Data License Agreement Sharing 1.0
 * * `Community-Spec-1.0` - Community Specification License 1.0
 * * `C-UDA-1.0` - Computational Use of Data Agreement v1.0
 * * `CATOSL-1.1` - Computer Associates Trusted Open Source License 1.1
 * * `Condor-1.1` - Condor Public License v1.1
 * * `COIL-1.0` - Copyfree Open Innovation License
 * * `copyleft-next-0.3.0` - copyleft-next 0.3.0
 * * `copyleft-next-0.3.1` - copyleft-next 0.3.1
 * * `Cornell-Lossless-JPEG` - Cornell Lossless JPEG License
 * * `CC-PDM-1.0` - Creative    Commons Public Domain Mark 1.0 Universal
 * * `CC-BY-1.0` - Creative Commons Attribution 1.0 Generic
 * * `CC-BY-2.0` - Creative Commons Attribution 2.0 Generic
 * * `CC-BY-2.5-AU` - Creative Commons Attribution 2.5 Australia
 * * `CC-BY-2.5` - Creative Commons Attribution 2.5 Generic
 * * `CC-BY-3.0-AU` - Creative Commons Attribution 3.0 Australia
 * * `CC-BY-3.0-AT` - Creative Commons Attribution 3.0 Austria
 * * `CC-BY-3.0-DE` - Creative Commons Attribution 3.0 Germany
 * * `CC-BY-3.0-IGO` - Creative Commons Attribution 3.0 IGO
 * * `CC-BY-3.0-NL` - Creative Commons Attribution 3.0 Netherlands
 * * `CC-BY-3.0-US` - Creative Commons Attribution 3.0 United States
 * * `CC-BY-3.0` - Creative Commons Attribution 3.0 Unported
 * * `CC-BY-4.0` - Creative Commons Attribution 4.0 International
 * * `CC-BY-ND-1.0` - Creative Commons Attribution No Derivatives 1.0 Generic
 * * `CC-BY-ND-2.0` - Creative Commons Attribution No Derivatives 2.0 Generic
 * * `CC-BY-ND-2.5` - Creative Commons Attribution No Derivatives 2.5 Generic
 * * `CC-BY-ND-3.0-DE` - Creative Commons Attribution No Derivatives 3.0 Germany
 * * `CC-BY-ND-3.0` - Creative Commons Attribution No Derivatives 3.0 Unported
 * * `CC-BY-ND-4.0` - Creative Commons Attribution No Derivatives 4.0 International
 * * `CC-BY-NC-1.0` - Creative Commons Attribution Non Commercial 1.0 Generic
 * * `CC-BY-NC-2.0` - Creative Commons Attribution Non Commercial 2.0 Generic
 * * `CC-BY-NC-2.5` - Creative Commons Attribution Non Commercial 2.5 Generic
 * * `CC-BY-NC-3.0-DE` - Creative Commons Attribution Non Commercial 3.0 Germany
 * * `CC-BY-NC-3.0` - Creative Commons Attribution Non Commercial 3.0 Unported
 * * `CC-BY-NC-4.0` - Creative Commons Attribution Non Commercial 4.0 International
 * * `CC-BY-NC-ND-1.0` - Creative Commons Attribution Non Commercial No Derivatives 1.0 Generic
 * * `CC-BY-NC-ND-2.0` - Creative Commons Attribution Non Commercial No Derivatives 2.0 Generic
 * * `CC-BY-NC-ND-2.5` - Creative Commons Attribution Non Commercial No Derivatives 2.5 Generic
 * * `CC-BY-NC-ND-3.0-DE` - Creative Commons Attribution Non Commercial No Derivatives 3.0 Germany
 * * `CC-BY-NC-ND-3.0-IGO` - Creative Commons Attribution Non Commercial No Derivatives 3.0 IGO
 * * `CC-BY-NC-ND-3.0` - Creative Commons Attribution Non Commercial No Derivatives 3.0 Unported
 * * `CC-BY-NC-ND-4.0` - Creative Commons Attribution Non Commercial No Derivatives 4.0 International
 * * `CC-BY-NC-SA-1.0` - Creative Commons Attribution Non Commercial Share Alike 1.0 Generic
 * * `CC-BY-NC-SA-2.0-UK` - Creative Commons Attribution Non Commercial Share Alike 2.0 England and Wales
 * * `CC-BY-NC-SA-2.0` - Creative Commons Attribution Non Commercial Share Alike 2.0 Generic
 * * `CC-BY-NC-SA-2.0-DE` - Creative Commons Attribution Non Commercial Share Alike 2.0 Germany
 * * `CC-BY-NC-SA-2.5` - Creative Commons Attribution Non Commercial Share Alike 2.5 Generic
 * * `CC-BY-NC-SA-3.0-DE` - Creative Commons Attribution Non Commercial Share Alike 3.0 Germany
 * * `CC-BY-NC-SA-3.0-IGO` - Creative Commons Attribution Non Commercial Share Alike 3.0 IGO
 * * `CC-BY-NC-SA-3.0` - Creative Commons Attribution Non Commercial Share Alike 3.0 Unported
 * * `CC-BY-NC-SA-4.0` - Creative Commons Attribution Non Commercial Share Alike 4.0 International
 * * `CC-BY-SA-1.0` - Creative Commons Attribution Share Alike 1.0 Generic
 * * `CC-BY-SA-2.0-UK` - Creative Commons Attribution Share Alike 2.0 England and Wales
 * * `CC-BY-SA-2.0` - Creative Commons Attribution Share Alike 2.0 Generic
 * * `CC-BY-SA-2.1-JP` - Creative Commons Attribution Share Alike 2.1 Japan
 * * `CC-BY-SA-2.5` - Creative Commons Attribution Share Alike 2.5 Generic
 * * `CC-BY-SA-3.0-AT` - Creative Commons Attribution Share Alike 3.0 Austria
 * * `CC-BY-SA-3.0-DE` - Creative Commons Attribution Share Alike 3.0 Germany
 * * `CC-BY-SA-3.0` - Creative Commons Attribution Share Alike 3.0 Unported
 * * `CC-BY-SA-4.0` - Creative Commons Attribution Share Alike 4.0 International
 * * `CC-BY-NC-SA-2.0-FR` - Creative Commons Attribution-NonCommercial-ShareAlike 2.0 France
 * * `CC-BY-SA-3.0-IGO` - Creative Commons Attribution-ShareAlike 3.0 IGO
 * * `CC-PDDC` - Creative Commons Public Domain Dedication and Certification
 * * `CC-SA-1.0` - Creative Commons Share Alike 1.0 Generic
 * * `CC0-1.0` - Creative Commons Zero v1.0 Universal
 * * `Cronyx` - Cronyx License
 * * `Crossword` - Crossword License
 * * `CAL-1.0` - Cryptographic Autonomy License 1.0
 * * `CAL-1.0-Combined-Work-Exception` - Cryptographic Autonomy License 1.0 (Combined Work Exception)
 * * `CryptoSwift` - CryptoSwift License
 * * `CrystalStacker` - CrystalStacker License
 * * `CUA-OPL-1.0` - CUA Office Public License v1.0
 * * `Cube` - Cube License
 * * `curl` - curl License
 * * `DL-DE-BY-2.0` - Data licence Germany – attribution – version 2.0
 * * `DL-DE-ZERO-2.0` - Data licence Germany – zero – version 2.0
 * * `dtoa` - David M. Gay dtoa License
 * * `DEC-3-Clause` - DEC 3-Clause License
 * * `DRL-1.0` - Detection Rule License 1.0
 * * `DRL-1.1` - Detection Rule License 1.1
 * * `D-FSL-1.0` - Deutsche Freie Software Lizenz
 * * `diffmark` - diffmark license
 * * `WTFPL` - Do What The F*ck You Want To Public License
 * * `DOC` - DOC License
 * * `DocBook-DTD` - DocBook DTD License
 * * `DocBook-Schema` - DocBook Schema License
 * * `DocBook-Stylesheet` - DocBook Stylesheet License
 * * `DocBook-XML` - DocBook XML License
 * * `Dotseqn` - Dotseqn License
 * * `DSDP` - DSDP License
 * * `dvipdfm` - dvipdfm License
 * * `EPL-1.0` - Eclipse Public License 1.0
 * * `EPL-2.0` - Eclipse Public License 2.0
 * * `ECL-1.0` - Educational Community License v1.0
 * * `ECL-2.0` - Educational Community License v2.0
 * * `eGenix` - eGenix.com Public License 1.1.0
 * * `EFL-1.0` - Eiffel Forum License v1.0
 * * `EFL-2.0` - Eiffel Forum License v2.0
 * * `Elastic-2.0` - Elastic License 2.0
 * * `MIT-advertising` - Enlightenment License (e16)
 * * `MIT-enna` - enna License
 * * `Entessa` - Entessa Public License v1.0
 * * `EPICS` - EPICS Open License
 * * `ErlPL-1.1` - Erlang Public License v1.1
 * * `etalab-2.0` - Etalab Open License 2.0
 * * `EUDatagrid` - EU DataGrid Software License
 * * `EUPL-1.0` - European Union Public License 1.0
 * * `EUPL-1.1` - European Union Public License 1.1
 * * `EUPL-1.2` - European Union Public License 1.2
 * * `Eurosym` - Eurosym License
 * * `Fair` - Fair License
 * * `MIT-feh` - feh License
 * * `Ferguson-Twofish` - Ferguson Twofish License
 * * `Frameworx-1.0` - Frameworx Open License 1.0
 * * `FDK-AAC` - Fraunhofer FDK AAC Codec Library
 * * `FreeBSD-DOC` - FreeBSD Documentation License
 * * `FreeImage` - FreeImage Public License v1.0
 * * `FTL` - Freetype Project License
 * * `FSFAP` - FSF All Permissive License
 * * `FSFAP-no-warranty-disclaimer` - FSF All Permissive License (without Warranty)
 * * `FSFUL` - FSF Unlimited License
 * * `FSFULLRWD` - FSF Unlimited License (With License Retention and Warranty Disclaimer)
 * * `FSFULLR` - FSF Unlimited License (with License Retention)
 * * `FSL-1.1-ALv2` - Functional Source License, Version 1.1, ALv2 Future License
 * * `FSL-1.1-MIT` - Functional Source License, Version 1.1, MIT Future License
 * * `Furuseth` - Furuseth License
 * * `FBM` - Fuzzy Bitmap License
 * * `fwlw` - fwlw License
 * * `Game-Programming-Gems` - Game Programming Gems License
 * * `GD` - GD License
 * * `generic-xts` - Generic XTS License
 * * `Giftware` - Giftware License
 * * `GL2PS` - GL2PS License
 * * `Glulxe` - Glulxe License
 * * `GCR-docs` - Gnome GCR Documentation License
 * * `AGPL-3.0-only` - GNU Affero General Public License v3.0 only
 * * `AGPL-3.0-or-later` - GNU Affero General Public License v3.0 or later
 * * `GFDL-1.1-only` - GNU Free Documentation License v1.1 only
 * * `GFDL-1.1-invariants-only` - GNU Free Documentation License v1.1 only - invariants
 * * `GFDL-1.1-no-invariants-only` - GNU Free Documentation License v1.1 only - no invariants
 * * `GFDL-1.1-or-later` - GNU Free Documentation License v1.1 or later
 * * `GFDL-1.1-invariants-or-later` - GNU Free Documentation License v1.1 or later - invariants
 * * `GFDL-1.1-no-invariants-or-later` - GNU Free Documentation License v1.1 or later - no invariants
 * * `GFDL-1.2-only` - GNU Free Documentation License v1.2 only
 * * `GFDL-1.2-invariants-only` - GNU Free Documentation License v1.2 only - invariants
 * * `GFDL-1.2-no-invariants-only` - GNU Free Documentation License v1.2 only - no invariants
 * * `GFDL-1.2-or-later` - GNU Free Documentation License v1.2 or later
 * * `GFDL-1.2-invariants-or-later` - GNU Free Documentation License v1.2 or later - invariants
 * * `GFDL-1.2-no-invariants-or-later` - GNU Free Documentation License v1.2 or later - no invariants
 * * `GFDL-1.3-only` - GNU Free Documentation License v1.3 only
 * * `GFDL-1.3-invariants-only` - GNU Free Documentation License v1.3 only - invariants
 * * `GFDL-1.3-no-invariants-only` - GNU Free Documentation License v1.3 only - no invariants
 * * `GFDL-1.3-or-later` - GNU Free Documentation License v1.3 or later
 * * `GFDL-1.3-invariants-or-later` - GNU Free Documentation License v1.3 or later - invariants
 * * `GFDL-1.3-no-invariants-or-later` - GNU Free Documentation License v1.3 or later - no invariants
 * * `GPL-1.0-only` - GNU General Public License v1.0 only
 * * `GPL-1.0-or-later` - GNU General Public License v1.0 or later
 * * `GPL-2.0-only` - GNU General Public License v2.0 only
 * * `GPL-2.0-or-later` - GNU General Public License v2.0 or later
 * * `GPL-3.0-only` - GNU General Public License v3.0 only
 * * `GPL-3.0-or-later` - GNU General Public License v3.0 or later
 * * `LGPL-2.1-only` - GNU Lesser General Public License v2.1 only
 * * `LGPL-2.1-or-later` - GNU Lesser General Public License v2.1 or later
 * * `LGPL-3.0-only` - GNU Lesser General Public License v3.0 only
 * * `LGPL-3.0-or-later` - GNU Lesser General Public License v3.0 or later
 * * `LGPL-2.0-only` - GNU Library General Public License v2 only
 * * `LGPL-2.0-or-later` - GNU Library General Public License v2 or later
 * * `gnuplot` - gnuplot License
 * * `GLWTPL` - Good Luck With That Public License
 * * `Graphics-Gems` - Graphics Gems License
 * * `gSOAP-1.3b` - gSOAP Public License v1.3b
 * * `gtkbook` - gtkbook License
 * * `Gutmann` - Gutmann License
 * * `HaskellReport` - Haskell Language Report License
 * * `hdparm` - hdparm License
 * * `HP-1986` - Hewlett-Packard 1986 License
 * * `HP-1989` - Hewlett-Packard 1989 License
 * * `BSD-3-Clause-HP` - Hewlett-Packard BSD variant license
 * * `HIDAPI` - HIDAPI License
 * * `Hippocratic-2.1` - Hippocratic License 2.1
 * * `HPND` - Historical Permission Notice and Disclaimer
 * * `HPND-INRIA-IMAG` - Historical Permission Notice and Disclaimer    - INRIA-IMAG variant
 * * `HPND-DEC` - Historical Permission Notice and Disclaimer - DEC variant
 * * `HPND-doc-sell` - Historical Permission Notice and Disclaimer - documentation sell variant
 * * `HPND-doc` - Historical Permission Notice and Disclaimer - documentation variant
 * * `HPND-Fenneberg-Livingston` - Historical Permission Notice and Disclaimer - Fenneberg-Livingston variant
 * * `HPND-Intel` - Historical Permission Notice and Disclaimer - Intel variant
 * * `HPND-Kevlin-Henney` - Historical Permission Notice and Disclaimer - Kevlin Henney variant
 * * `HPND-Markus-Kuhn` - Historical Permission Notice and Disclaimer - Markus Kuhn variant
 * * `HPND-merchantability-variant` - Historical Permission Notice and Disclaimer - merchantability variant
 * * `HPND-Netrek` - Historical Permission Notice and Disclaimer - Netrek variant
 * * `HPND-Pbmplus` - Historical Permission Notice and Disclaimer - Pbmplus variant
 * * `HPND-sell-regexpr` - Historical Permission Notice and Disclaimer - sell regexpr variant
 * * `HPND-sell-variant` - Historical Permission Notice and Disclaimer - sell variant
 * * `HPND-sell-MIT-disclaimer-xserver` - Historical Permission Notice and Disclaimer - sell xserver variant with MIT disclaimer
 * * `HPND-UC` - Historical Permission Notice and Disclaimer - University of California variant
 * * `HPND-UC-export-US` - Historical Permission Notice and Disclaimer - University of California, US export warning
 * * `HPND-MIT-disclaimer` - Historical Permission Notice and Disclaimer with MIT disclaimer
 * * `HPND-sell-variant-MIT-disclaimer` - HPND sell variant with MIT disclaimer
 * * `HPND-sell-variant-MIT-disclaimer-rev` - HPND sell variant with MIT disclaimer - reverse
 * * `HPND-export2-US` - HPND with US Government export control and 2 disclaimers
 * * `HPND-export-US` - HPND with US Government export control warning
 * * `HPND-export-US-acknowledgement` - HPND with US Government export control warning and acknowledgment
 * * `HPND-export-US-modify` - HPND with US Government export control warning and modification rqmt
 * * `HTMLTIDY` - HTML Tidy License
 * * `IBM-pibs` - IBM PowerPC Initialization and Boot Software
 * * `IPL-1.0` - IBM Public License v1.0
 * * `ICU` - ICU License
 * * `IEC-Code-Components-EULA` - IEC    Code Components End-user licence agreement
 * * `ImageMagick` - ImageMagick License
 * * `iMatix` - iMatix Standard Function Library Agreement
 * * `Imlib2` - Imlib2 License
 * * `IJG` - Independent JPEG Group License
 * * `IJG-short` - Independent JPEG Group License - short
 * * `Info-ZIP` - Info-ZIP License
 * * `Inner-Net-2.0` - Inner Net License v2.0
 * * `InnoSetup` - Inno Setup License
 * * `Intel-ACPI` - Intel ACPI Software License Agreement
 * * `Intel` - Intel Open Source License
 * * `Interbase-1.0` - Interbase Public License v1.0
 * * `IPA` - IPA Font License
 * * `ISC` - ISC License
 * * `ISC-Veillard` - ISC Veillard variant
 * * `Jam` - Jam License
 * * `JPNIC` - Japan Network Information Center License
 * * `JasPer-2.0` - JasPer License
 * * `JPL-image` - JPL Image Use Policy
 * * `JSON` - JSON License
 * * `Kastrup` - Kastrup License
 * * `Kazlib` - Kazlib License
 * * `Knuth-CTAN` - Knuth CTAN License
 * * `LPPL-1.0` - LaTeX Project Public License v1.0
 * * `LPPL-1.1` - LaTeX Project Public License v1.1
 * * `LPPL-1.2` - LaTeX Project Public License v1.2
 * * `LPPL-1.3a` - LaTeX Project Public License v1.3a
 * * `LPPL-1.3c` - LaTeX Project Public License v1.3c
 * * `Latex2e` - Latex2e License
 * * `Latex2e-translated-notice` - Latex2e with translated notice permission
 * * `BSD-3-Clause-LBNL` - Lawrence Berkeley National Labs BSD variant license
 * * `Leptonica` - Leptonica License
 * * `LGPLLR` - Lesser General Public License For Linguistic Resources
 * * `Libpng` - libpng License
 * * `libselinux-1.0` - libselinux public domain notice
 * * `libtiff` - libtiff License
 * * `libutil-David-Nugent` - libutil David Nugent License
 * * `LAL-1.2` - Licence Art Libre 1.2
 * * `LAL-1.3` - Licence Art Libre 1.3
 * * `LiLiQ-P-1.1` - Licence Libre du Québec – Permissive version 1.1
 * * `LiLiQ-Rplus-1.1` - Licence Libre du Québec – Réciprocité forte version 1.1
 * * `LiLiQ-R-1.1` - Licence Libre du Québec – Réciprocité version 1.1
 * * `Linux-OpenIB` - Linux Kernel Variant of OpenIB.org license
 * * `Linux-man-pages-1-para` - Linux man-pages - 1 paragraph
 * * `Linux-man-pages-copyleft` - Linux man-pages Copyleft
 * * `Linux-man-pages-copyleft-2-para` - Linux man-pages Copyleft - 2 paragraphs
 * * `Linux-man-pages-copyleft-var` - Linux man-pages Copyleft Variant
 * * `LPD-document` - LPD Documentation License
 * * `lsof` - lsof License
 * * `LPL-1.02` - Lucent Public License v1.02
 * * `LPL-1.0` - Lucent Public License Version 1.0
 * * `Lucida-Bitmap-Fonts` - Lucida Bitmap Fonts License
 * * `LZMA-SDK-9.11-to-9.20` - LZMA SDK License (versions 9.11 to 9.20)
 * * `LZMA-SDK-9.22` - LZMA SDK License (versions 9.22 and beyond)
 * * `Mackerras-3-Clause-acknowledgment` - Mackerras 3-Clause - acknowledgment variant
 * * `Mackerras-3-Clause` - Mackerras 3-Clause License
 * * `magaz` - magaz License
 * * `mailprio` - mailprio License
 * * `MakeIndex` - MakeIndex License
 * * `man2html` - man2html License
 * * `Martin-Birgmeier` - Martin Birgmeier License
 * * `MTLL` - Matrix Template Library License
 * * `McPhee-slideshow` - McPhee Slideshow License
 * * `metamail` - metamail License
 * * `UMich-Merit` - Michigan/Merit Networks License
 * * `MS-LPL` - Microsoft Limited Public License
 * * `MS-PL` - Microsoft Public License
 * * `MS-RL` - Microsoft Reciprocal License
 * * `Minpack` - Minpack License
 * * `MIPS` - MIPS License
 * * `MITNFA` - MIT +no-false-attribs license
 * * `MIT-Click` - MIT Click License
 * * `MIT-Festival` - MIT Festival Variant
 * * `MIT-Khronos-old` - MIT Khronos - old variant
 * * `MIT` - MIT License
 * * `MIT-Modern-Variant` - MIT License Modern Variant
 * * `MIT-0` - MIT No Attribution
 * * `MIT-open-group` - MIT Open Group variant
 * * `MIT-testregex` - MIT testregex Variant
 * * `MIT-Wu` - MIT Tom Wu Variant
 * * `MMIXware` - MMIXware License
 * * `Motosoto` - Motosoto License
 * * `MPL-1.0` - Mozilla Public License 1.0
 * * `MPL-1.1` - Mozilla Public License 1.1
 * * `MPL-2.0` - Mozilla Public License 2.0
 * * `MPL-2.0-no-copyleft-exception` - Mozilla Public License 2.0 (no copyleft exception)
 * * `MPEG-SSG` - MPEG Software Simulation
 * * `mpi-permissive` - mpi Permissive License
 * * `mpich2` - mpich2 License
 * * `mplus` - mplus Font License
 * * `MulanPSL-1.0` - Mulan Permissive Software License, Version 1
 * * `MulanPSL-2.0` - Mulan Permissive Software License, Version 2
 * * `Multics` - Multics License
 * * `Mup` - Mup License
 * * `NAIST-2003` - Nara Institute of Science and Technology License (2003)
 * * `NASA-1.3` - NASA Open Source Agreement 1.3
 * * `Naumen` - Naumen Public License
 * * `NCBI-PD` - NCBI Public Domain Notice
 * * `NCL` - NCL Source Code License
 * * `NBPL-1.0` - Net Boolean Public License v1
 * * `NetCDF` - NetCDF license
 * * `NGPL` - Nethack General Public License
 * * `NOSL` - Netizen Open Source License
 * * `NPL-1.0` - Netscape Public License v1.0
 * * `NPL-1.1` - Netscape Public License v1.1
 * * `Newsletr` - Newsletr License
 * * `NICTA-1.0` - NICTA Public Software License, Version 1.0
 * * `NIST-PD` - NIST Public Domain Notice
 * * `NIST-PD-fallback` - NIST Public Domain Notice with license fallback
 * * `NIST-Software` - NIST Software License
 * * `NLPL` - No Limit Public License
 * * `Nokia` - Nokia Open Source License
 * * `NCGL-UK-2.0` - Non-Commercial Government Licence
 * * `NPOSL-3.0` - Non-Profit Open Software License 3.0
 * * `NLOD-1.0` - Norwegian Licence for Open Government Data (NLOD) 1.0
 * * `NLOD-2.0` - Norwegian Licence for Open Government Data (NLOD) 2.0
 * * `Noweb` - Noweb License
 * * `NRL` - NRL License
 * * `NTIA-PD` - NTIA Public Domain Notice
 * * `NTP` - NTP License
 * * `NTP-0` - NTP No Attribution
 * * `OAR` - OAR License
 * * `OCLC-2.0` - OCLC Research Public License 2.0
 * * `OFFIS` - OFFIS License
 * * `OGC-1.0` - OGC Software License, Version 1.0
 * * `OCCT-PL` - Open CASCADE Technology Public License
 * * `ODC-By-1.0` - Open Data Commons Attribution License v1.0
 * * `ODbL-1.0` - Open Data Commons Open Database License v1.0
 * * `PDDL-1.0` - Open Data Commons Public Domain Dedication & License 1.0
 * * `OGL-Canada-2.0` - Open Government Licence - Canada
 * * `OGL-UK-1.0` - Open Government Licence v1.0
 * * `OGL-UK-2.0` - Open Government Licence v2.0
 * * `OGL-UK-3.0` - Open Government Licence v3.0
 * * `OGTSL` - Open Group Test Suite License
 * * `OLDAP-2.2.2` - Open LDAP Public License 2.2.2
 * * `OLDAP-1.1` - Open LDAP Public License v1.1
 * * `OLDAP-1.2` - Open LDAP Public License v1.2
 * * `OLDAP-1.3` - Open LDAP Public License v1.3
 * * `OLDAP-1.4` - Open LDAP Public License v1.4
 * * `OLDAP-2.0` - Open LDAP Public License v2.0 (or possibly 2.0A and 2.0B)
 * * `OLDAP-2.0.1` - Open LDAP Public License v2.0.1
 * * `OLDAP-2.1` - Open LDAP Public License v2.1
 * * `OLDAP-2.2` - Open LDAP Public License v2.2
 * * `OLDAP-2.2.1` - Open LDAP Public License v2.2.1
 * * `OLDAP-2.3` - Open LDAP Public License v2.3
 * * `OLDAP-2.4` - Open LDAP Public License v2.4
 * * `OLDAP-2.5` - Open LDAP Public License v2.5
 * * `OLDAP-2.6` - Open LDAP Public License v2.6
 * * `OLDAP-2.7` - Open LDAP Public License v2.7
 * * `OLDAP-2.8` - Open LDAP Public License v2.8
 * * `OLFL-1.3` - Open Logistics Foundation License Version 1.3
 * * `OML` - Open Market License
 * * `OPL-1.0` - Open Public License v1.0
 * * `OPUBL-1.0` - Open Publication License v1.0
 * * `OSL-1.0` - Open Software License 1.0
 * * `OSL-1.1` - Open Software License 1.1
 * * `OSL-2.0` - Open Software License 2.0
 * * `OSL-2.1` - Open Software License 2.1
 * * `OSL-3.0` - Open Software License 3.0
 * * `O-UDA-1.0` - Open Use of Data Agreement v1.0
 * * `OpenPBS-2.3` - OpenPBS v2.3 Software License
 * * `OpenSSL` - OpenSSL License
 * * `OpenSSL-standalone` - OpenSSL License - standalone
 * * `OpenVision` - OpenVision License
 * * `OSET-PL-2.1` - OSET Public License version 2.1
 * * `PADL` - PADL License
 * * `PPL` - Peer Production License
 * * `PHP-3.0` - PHP License v3.0
 * * `PHP-3.01` - PHP License v3.01
 * * `Pixar` - Pixar License
 * * `pkgconf` - pkgconf License
 * * `Plexus` - Plexus Classworlds License
 * * `libpng-2.0` - PNG Reference Library version 2
 * * `pnmstitch` - pnmstitch License
 * * `PolyForm-Noncommercial-1.0.0` - PolyForm Noncommercial License 1.0.0
 * * `PolyForm-Small-Business-1.0.0` - PolyForm Small Business License 1.0.0
 * * `PostgreSQL` - PostgreSQL License
 * * `psfrag` - psfrag License
 * * `psutils` - psutils License
 * * `python-ldap` - Python ldap License
 * * `Python-2.0` - Python License 2.0
 * * `Python-2.0.1` - Python License 2.0.1
 * * `PSF-2.0` - Python Software Foundation License 2.0
 * * `QPL-1.0` - Q Public License 1.0
 * * `QPL-1.0-INRIA-2004` - Q Public License 1.0 - INRIA 2004 variant
 * * `Qhull` - Qhull License
 * * `radvd` - radvd License
 * * `Rdisc` - Rdisc License
 * * `RPSL-1.0` - RealNetworks Public Source License v1.0
 * * `RPL-1.1` - Reciprocal Public License 1.1
 * * `RPL-1.5` - Reciprocal Public License 1.5
 * * `RHeCos-1.1` - Red Hat eCos Public License v1.1
 * * `RSCPL` - Ricoh Source Code Public License
 * * `RSA-MD` - RSA Message-Digest License
 * * `Ruby` - Ruby License
 * * `Ruby-pty` - Ruby pty extension license
 * * `SAX-PD` - Sax Public Domain Notice
 * * `SAX-PD-2.0` - Sax Public Domain Notice 2.0
 * * `Saxpath` - Saxpath License
 * * `SCEA` - SCEA Shared Source License
 * * `SchemeReport` - Scheme Language Report License
 * * `SWL` - Scheme Widget Library (SWL) Software License Agreement
 * * `SMPPL` - Secure Messaging Protocol Public License
 * * `Sendmail` - Sendmail License
 * * `Sendmail-8.23` - Sendmail License 8.23
 * * `Sendmail-Open-Source-1.1` - Sendmail Open Source License v1.1
 * * `SSPL-1.0` - Server Side Public License, v 1
 * * `SGI-B-1.0` - SGI Free Software License B v1.0
 * * `SGI-B-1.1` - SGI Free Software License B v1.1
 * * `SGI-B-2.0` - SGI Free Software License B v2.0
 * * `SGI-OpenGL` - SGI OpenGL License
 * * `SGP4` - SGP4 Permission Notice
 * * `OFL-1.0` - SIL Open Font License 1.0
 * * `OFL-1.0-no-RFN` - SIL Open Font License 1.0 with no Reserved Font Name
 * * `OFL-1.0-RFN` - SIL Open Font License 1.0 with Reserved Font Name
 * * `OFL-1.1` - SIL Open Font License 1.1
 * * `OFL-1.1-no-RFN` - SIL Open Font License 1.1 with no Reserved Font Name
 * * `OFL-1.1-RFN` - SIL Open Font License 1.1 with Reserved Font Name
 * * `SimPL-2.0` - Simple Public License 2.0
 * * `SL` - SL License
 * * `Sleepycat` - Sleepycat License
 * * `SMAIL-GPL` - SMAIL General Public License
 * * `SNIA` - SNIA Public License 1.1
 * * `snprintf` - snprintf License
 * * `softSurfer` - softSurfer License
 * * `SHL-0.5` - Solderpad Hardware License v0.5
 * * `SHL-0.51` - Solderpad Hardware License, Version 0.51
 * * `Soundex` - Soundex License
 * * `Spencer-86` - Spencer License 86
 * * `Spencer-94` - Spencer License 94
 * * `Spencer-99` - Spencer License 99
 * * `blessing` - SQLite Blessing
 * * `SSH-OpenSSH` - SSH OpenSSH license
 * * `SSH-short` - SSH short notice
 * * `ssh-keyscan` - ssh-keyscan License
 * * `SSLeay-standalone` - SSLeay License - standalone
 * * `SMLNJ` - Standard ML of New Jersey License
 * * `SugarCRM-1.1.3` - SugarCRM Public License v1.1.3
 * * `SISSL` - Sun Industry Standards Source License v1.1
 * * `SISSL-1.2` - Sun Industry Standards Source License v1.2
 * * `Sun-PPP` - Sun PPP License
 * * `Sun-PPP-2000` - Sun PPP License (2000)
 * * `SPL-1.0` - Sun Public License v1.0
 * * `SunPro` - SunPro License
 * * `swrule` - swrule License
 * * `Watcom-1.0` - Sybase Open Watcom Public License 1.0
 * * `Symlinks` - Symlinks License
 * * `BSD-Systemics` - Systemics BSD variant license
 * * `BSD-Systemics-W3Works` - Systemics W3Works BSD variant license
 * * `OGDL-Taiwan-1.0` - Taiwan Open Government Data License, version 1.0
 * * `TAPR-OHL-1.0` - TAPR Open Hardware License v1.0
 * * `TCL` - TCL/TK License
 * * `TCP-wrappers` - TCP Wrappers License
 * * `TU-Berlin-1.0` - Technische Universitaet Berlin License 1.0
 * * `TU-Berlin-2.0` - Technische Universitaet Berlin License 2.0
 * * `TermReadKey` - TermReadKey License
 * * `TTWL` - Text-Tabs+Wrap License
 * * `MirOS` - The MirOS Licence
 * * `Parity-6.0.0` - The Parity Public License 6.0.0
 * * `Parity-7.0.0` - The Parity Public License 7.0.0
 * * `Unlicense` - The Unlicense
 * * `ThirdEye` - ThirdEye License
 * * `TPL-1.0` - THOR Public License 1.0
 * * `threeparttable` - threeparttable License
 * * `TPDL` - Time::ParseDate License
 * * `TMate` - TMate Open Source License
 * * `TORQUE-1.1` - TORQUE v2.5+ Software License v1.1
 * * `TGPPL-1.0` - Transitive Grace Period Public Licence 1.0
 * * `TOSL` - Trusster Open Source License
 * * `TrustedQSL` - TrustedQSL License
 * * `TTYP0` - TTYP0 License
 * * `Ubuntu-font-1.0` - Ubuntu Font Licence v1.0
 * * `UCAR` - UCAR License
 * * `ulem` - ulem License
 * * `Unicode-DFS-2015` - Unicode License Agreement - Data Files and Software (2015)
 * * `Unicode-DFS-2016` - Unicode License Agreement - Data Files and Software (2016)
 * * `Unicode-3.0` - Unicode License v3
 * * `Unicode-TOU` - Unicode Terms of Use
 * * `OPL-UK-3.0` - United    Kingdom Open Parliament Licence v3.0
 * * `UPL-1.0` - Universal Permissive License v1.0
 * * `NCSA` - University of Illinois/NCSA Open Source License
 * * `UnixCrypt` - UnixCrypt License
 * * `UCL-1.0` - Upstream Compatibility License v1.0
 * * `URT-RLE` - Utah Raster Toolkit Run Length Encoded License
 * * `Vim` - Vim License
 * * `VOSTROM` - VOSTROM Public License for Open Source
 * * `VSL-1.0` - Vovida Software License v1.0
 * * `W3C-20150513` - W3C Software Notice and Document License (2015-05-13)
 * * `W3C-19980720` - W3C Software Notice and License (1998-07-20)
 * * `W3C` - W3C Software Notice and License (2002-12-31)
 * * `w3m` - w3m License
 * * `Widget-Workshop` - Widget Workshop License
 * * `Wsuipa` - Wsuipa License
 * * `wwl` - WWL License
 * * `Xnet` - X.Net License
 * * `X11` - X11 License
 * * `X11-distribute-modifications-variant` - X11 License Distribution Modification Variant
 * * `X11-swapped` - X11 swapped final paragraphs
 * * `Xdebug-1.03` - Xdebug License v 1.03
 * * `Xerox` - Xerox License
 * * `Xfig` - Xfig License
 * * `XFree86-1.1` - XFree86 License 1.1
 * * `xinetd` - xinetd License
 * * `xkeyboard-config-Zinoviev` - xkeyboard-config Zinoviev License
 * * `xlock` - xlock License
 * * `xpp` - XPP License
 * * `XSkat` - XSkat License
 * * `xzoom` - xzoom License
 * * `YPL-1.0` - Yahoo! Public License v1.0
 * * `YPL-1.1` - Yahoo! Public License v1.1
 * * `Zed` - Zed License
 * * `Zeeff` - Zeeff License
 * * `Zend-2.0` - Zend License v2.0
 * * `Zimbra-1.3` - Zimbra Public License v1.3
 * * `Zimbra-1.4` - Zimbra Public License v1.4
 * * `Zlib` - zlib License
 * * `zlib-acknowledgement` - zlib/libpng License with Acknowledgement
 * * `ZPL-1.1` - Zope Public License 1.1
 * * `ZPL-2.0` - Zope Public License 2.0
 * * `ZPL-2.1` - Zope Public License 2.1
 */
export type LicenseEnum = 'proprietary' | '3D-Slicer-1.0' | 'Glide' | 'Abstyles' | 'AFL-1.1' | 'AFL-1.2' | 'AFL-2.0' | 'AFL-2.1' | 'AFL-3.0' | 'AMPAS' | 'AdaCore-doc' | 'APL-1.0' | 'Adobe-Display-PostScript' | 'Adobe-Glyph' | 'APAFML' | 'Adobe-2006' | 'Adobe-Utopia' | 'AGPL-1.0-only' | 'AGPL-1.0-or-later' | 'Afmparse' | 'Aladdin' | 'ADSL' | 'AMD-newlib' | 'AMDPLPA' | 'AML-glslang' | 'ANTLR-PD' | 'ANTLR-PD-fallback' | 'any-OSI' | 'any-OSI-perl-modules' | 'Apache-1.0' | 'Apache-1.1' | 'Apache-2.0' | 'App-s2p' | 'AML' | 'APSL-1.0' | 'APSL-1.1' | 'APSL-1.2' | 'APSL-2.0' | 'Arphic-1999' | 'Artistic-1.0' | 'Artistic-1.0-Perl' | 'Artistic-1.0-cl8' | 'Artistic-2.0' | 'ASWF-Digital-Assets-1.1' | 'ASWF-Digital-Assets-1.0' | 'AAL' | 'Baekmuk' | 'Bahyph' | 'Barr' | 'bcrypt-Solar-Designer' | 'Beerware' | 'Bitstream-Charter' | 'Bitstream-Vera' | 'BitTorrent-1.0' | 'BitTorrent-1.1' | 'BlueOak-1.0.0' | 'Boehm-GC' | 'Boehm-GC-without-fee' | 'BSL-1.0' | 'Borceux' | 'Brian-Gladman-2-Clause' | 'Brian-Gladman-3-Clause' | 'BSD-1-Clause' | 'BSD-2-Clause' | 'BSD-2-Clause-first-lines' | 'BSD-2-Clause-Darwin' | 'BSD-2-Clause-pkgconf-disclaimer' | 'BSD-2-Clause-Views' | 'BSD-3-Clause' | 'BSD-3-Clause-acpica' | 'BSD-3-Clause-Clear' | 'BSD-3-Clause-flex' | 'BSD-3-Clause-Modification' | 'BSD-3-Clause-No-Military-License' | 'BSD-3-Clause-No-Nuclear-License' | 'BSD-3-Clause-No-Nuclear-License-2014' | 'BSD-3-Clause-No-Nuclear-Warranty' | 'BSD-3-Clause-Open-MPI' | 'BSD-3-Clause-Sun' | 'BSD-4-Clause-Shortened' | 'BSD-4-Clause' | 'BSD-4.3RENO' | 'BSD-4.3TAHOE' | 'BSD-Advertising-Acknowledgement' | 'BSD-Protection' | 'BSD-Source-Code' | 'BSD-Source-beginning-file' | 'BSD-3-Clause-Attribution' | 'BSD-Attribution-HPND-disclaimer' | '0BSD' | 'BSD-2-Clause-Patent' | 'BSD-4-Clause-UC' | 'BSD-Inferno-Nettverk' | 'BUSL-1.1' | 'bzip2-1.0.6' | 'Caldera' | 'Caldera-no-preamble' | 'Catharon' | 'CECILL-1.0' | 'CECILL-1.1' | 'CECILL-2.0' | 'CECILL-2.1' | 'CECILL-B' | 'CECILL-C' | 'CERN-OHL-1.1' | 'CERN-OHL-1.2' | 'CERN-OHL-P-2.0' | 'CERN-OHL-S-2.0' | 'CERN-OHL-W-2.0' | 'CFITSIO' | 'check-cvs' | 'checkmk' | 'ClArtistic' | 'Clips' | 'CMU-Mach-nodoc' | 'MIT-CMU' | 'CMU-Mach' | 'CNRI-Jython' | 'CNRI-Python' | 'CNRI-Python-GPL-Compatible' | 'CPOL-1.02' | 'CDDL-1.0' | 'CDDL-1.1' | 'CDL-1.0' | 'LOOP' | 'CPAL-1.0' | 'CPL-1.0' | 'cve-tou' | 'CDLA-Permissive-1.0' | 'CDLA-Permissive-2.0' | 'CDLA-Sharing-1.0' | 'Community-Spec-1.0' | 'C-UDA-1.0' | 'CATOSL-1.1' | 'Condor-1.1' | 'COIL-1.0' | 'copyleft-next-0.3.0' | 'copyleft-next-0.3.1' | 'Cornell-Lossless-JPEG' | 'CC-PDM-1.0' | 'CC-BY-1.0' | 'CC-BY-2.0' | 'CC-BY-2.5-AU' | 'CC-BY-2.5' | 'CC-BY-3.0-AU' | 'CC-BY-3.0-AT' | 'CC-BY-3.0-DE' | 'CC-BY-3.0-IGO' | 'CC-BY-3.0-NL' | 'CC-BY-3.0-US' | 'CC-BY-3.0' | 'CC-BY-4.0' | 'CC-BY-ND-1.0' | 'CC-BY-ND-2.0' | 'CC-BY-ND-2.5' | 'CC-BY-ND-3.0-DE' | 'CC-BY-ND-3.0' | 'CC-BY-ND-4.0' | 'CC-BY-NC-1.0' | 'CC-BY-NC-2.0' | 'CC-BY-NC-2.5' | 'CC-BY-NC-3.0-DE' | 'CC-BY-NC-3.0' | 'CC-BY-NC-4.0' | 'CC-BY-NC-ND-1.0' | 'CC-BY-NC-ND-2.0' | 'CC-BY-NC-ND-2.5' | 'CC-BY-NC-ND-3.0-DE' | 'CC-BY-NC-ND-3.0-IGO' | 'CC-BY-NC-ND-3.0' | 'CC-BY-NC-ND-4.0' | 'CC-BY-NC-SA-1.0' | 'CC-BY-NC-SA-2.0-UK' | 'CC-BY-NC-SA-2.0' | 'CC-BY-NC-SA-2.0-DE' | 'CC-BY-NC-SA-2.5' | 'CC-BY-NC-SA-3.0-DE' | 'CC-BY-NC-SA-3.0-IGO' | 'CC-BY-NC-SA-3.0' | 'CC-BY-NC-SA-4.0' | 'CC-BY-SA-1.0' | 'CC-BY-SA-2.0-UK' | 'CC-BY-SA-2.0' | 'CC-BY-SA-2.1-JP' | 'CC-BY-SA-2.5' | 'CC-BY-SA-3.0-AT' | 'CC-BY-SA-3.0-DE' | 'CC-BY-SA-3.0' | 'CC-BY-SA-4.0' | 'CC-BY-NC-SA-2.0-FR' | 'CC-BY-SA-3.0-IGO' | 'CC-PDDC' | 'CC-SA-1.0' | 'CC0-1.0' | 'Cronyx' | 'Crossword' | 'CAL-1.0' | 'CAL-1.0-Combined-Work-Exception' | 'CryptoSwift' | 'CrystalStacker' | 'CUA-OPL-1.0' | 'Cube' | 'curl' | 'DL-DE-BY-2.0' | 'DL-DE-ZERO-2.0' | 'dtoa' | 'DEC-3-Clause' | 'DRL-1.0' | 'DRL-1.1' | 'D-FSL-1.0' | 'diffmark' | 'WTFPL' | 'DOC' | 'DocBook-DTD' | 'DocBook-Schema' | 'DocBook-Stylesheet' | 'DocBook-XML' | 'Dotseqn' | 'DSDP' | 'dvipdfm' | 'EPL-1.0' | 'EPL-2.0' | 'ECL-1.0' | 'ECL-2.0' | 'eGenix' | 'EFL-1.0' | 'EFL-2.0' | 'Elastic-2.0' | 'MIT-advertising' | 'MIT-enna' | 'Entessa' | 'EPICS' | 'ErlPL-1.1' | 'etalab-2.0' | 'EUDatagrid' | 'EUPL-1.0' | 'EUPL-1.1' | 'EUPL-1.2' | 'Eurosym' | 'Fair' | 'MIT-feh' | 'Ferguson-Twofish' | 'Frameworx-1.0' | 'FDK-AAC' | 'FreeBSD-DOC' | 'FreeImage' | 'FTL' | 'FSFAP' | 'FSFAP-no-warranty-disclaimer' | 'FSFUL' | 'FSFULLRWD' | 'FSFULLR' | 'FSL-1.1-ALv2' | 'FSL-1.1-MIT' | 'Furuseth' | 'FBM' | 'fwlw' | 'Game-Programming-Gems' | 'GD' | 'generic-xts' | 'Giftware' | 'GL2PS' | 'Glulxe' | 'GCR-docs' | 'AGPL-3.0-only' | 'AGPL-3.0-or-later' | 'GFDL-1.1-only' | 'GFDL-1.1-invariants-only' | 'GFDL-1.1-no-invariants-only' | 'GFDL-1.1-or-later' | 'GFDL-1.1-invariants-or-later' | 'GFDL-1.1-no-invariants-or-later' | 'GFDL-1.2-only' | 'GFDL-1.2-invariants-only' | 'GFDL-1.2-no-invariants-only' | 'GFDL-1.2-or-later' | 'GFDL-1.2-invariants-or-later' | 'GFDL-1.2-no-invariants-or-later' | 'GFDL-1.3-only' | 'GFDL-1.3-invariants-only' | 'GFDL-1.3-no-invariants-only' | 'GFDL-1.3-or-later' | 'GFDL-1.3-invariants-or-later' | 'GFDL-1.3-no-invariants-or-later' | 'GPL-1.0-only' | 'GPL-1.0-or-later' | 'GPL-2.0-only' | 'GPL-2.0-or-later' | 'GPL-3.0-only' | 'GPL-3.0-or-later' | 'LGPL-2.1-only' | 'LGPL-2.1-or-later' | 'LGPL-3.0-only' | 'LGPL-3.0-or-later' | 'LGPL-2.0-only' | 'LGPL-2.0-or-later' | 'gnuplot' | 'GLWTPL' | 'Graphics-Gems' | 'gSOAP-1.3b' | 'gtkbook' | 'Gutmann' | 'HaskellReport' | 'hdparm' | 'HP-1986' | 'HP-1989' | 'BSD-3-Clause-HP' | 'HIDAPI' | 'Hippocratic-2.1' | 'HPND' | 'HPND-INRIA-IMAG' | 'HPND-DEC' | 'HPND-doc-sell' | 'HPND-doc' | 'HPND-Fenneberg-Livingston' | 'HPND-Intel' | 'HPND-Kevlin-Henney' | 'HPND-Markus-Kuhn' | 'HPND-merchantability-variant' | 'HPND-Netrek' | 'HPND-Pbmplus' | 'HPND-sell-regexpr' | 'HPND-sell-variant' | 'HPND-sell-MIT-disclaimer-xserver' | 'HPND-UC' | 'HPND-UC-export-US' | 'HPND-MIT-disclaimer' | 'HPND-sell-variant-MIT-disclaimer' | 'HPND-sell-variant-MIT-disclaimer-rev' | 'HPND-export2-US' | 'HPND-export-US' | 'HPND-export-US-acknowledgement' | 'HPND-export-US-modify' | 'HTMLTIDY' | 'IBM-pibs' | 'IPL-1.0' | 'ICU' | 'IEC-Code-Components-EULA' | 'ImageMagick' | 'iMatix' | 'Imlib2' | 'IJG' | 'IJG-short' | 'Info-ZIP' | 'Inner-Net-2.0' | 'InnoSetup' | 'Intel-ACPI' | 'Intel' | 'Interbase-1.0' | 'IPA' | 'ISC' | 'ISC-Veillard' | 'Jam' | 'JPNIC' | 'JasPer-2.0' | 'JPL-image' | 'JSON' | 'Kastrup' | 'Kazlib' | 'Knuth-CTAN' | 'LPPL-1.0' | 'LPPL-1.1' | 'LPPL-1.2' | 'LPPL-1.3a' | 'LPPL-1.3c' | 'Latex2e' | 'Latex2e-translated-notice' | 'BSD-3-Clause-LBNL' | 'Leptonica' | 'LGPLLR' | 'Libpng' | 'libselinux-1.0' | 'libtiff' | 'libutil-David-Nugent' | 'LAL-1.2' | 'LAL-1.3' | 'LiLiQ-P-1.1' | 'LiLiQ-Rplus-1.1' | 'LiLiQ-R-1.1' | 'Linux-OpenIB' | 'Linux-man-pages-1-para' | 'Linux-man-pages-copyleft' | 'Linux-man-pages-copyleft-2-para' | 'Linux-man-pages-copyleft-var' | 'LPD-document' | 'lsof' | 'LPL-1.02' | 'LPL-1.0' | 'Lucida-Bitmap-Fonts' | 'LZMA-SDK-9.11-to-9.20' | 'LZMA-SDK-9.22' | 'Mackerras-3-Clause-acknowledgment' | 'Mackerras-3-Clause' | 'magaz' | 'mailprio' | 'MakeIndex' | 'man2html' | 'Martin-Birgmeier' | 'MTLL' | 'McPhee-slideshow' | 'metamail' | 'UMich-Merit' | 'MS-LPL' | 'MS-PL' | 'MS-RL' | 'Minpack' | 'MIPS' | 'MITNFA' | 'MIT-Click' | 'MIT-Festival' | 'MIT-Khronos-old' | 'MIT' | 'MIT-Modern-Variant' | 'MIT-0' | 'MIT-open-group' | 'MIT-testregex' | 'MIT-Wu' | 'MMIXware' | 'Motosoto' | 'MPL-1.0' | 'MPL-1.1' | 'MPL-2.0' | 'MPL-2.0-no-copyleft-exception' | 'MPEG-SSG' | 'mpi-permissive' | 'mpich2' | 'mplus' | 'MulanPSL-1.0' | 'MulanPSL-2.0' | 'Multics' | 'Mup' | 'NAIST-2003' | 'NASA-1.3' | 'Naumen' | 'NCBI-PD' | 'NCL' | 'NBPL-1.0' | 'NetCDF' | 'NGPL' | 'NOSL' | 'NPL-1.0' | 'NPL-1.1' | 'Newsletr' | 'NICTA-1.0' | 'NIST-PD' | 'NIST-PD-fallback' | 'NIST-Software' | 'NLPL' | 'Nokia' | 'NCGL-UK-2.0' | 'NPOSL-3.0' | 'NLOD-1.0' | 'NLOD-2.0' | 'Noweb' | 'NRL' | 'NTIA-PD' | 'NTP' | 'NTP-0' | 'OAR' | 'OCLC-2.0' | 'OFFIS' | 'OGC-1.0' | 'OCCT-PL' | 'ODC-By-1.0' | 'ODbL-1.0' | 'PDDL-1.0' | 'OGL-Canada-2.0' | 'OGL-UK-1.0' | 'OGL-UK-2.0' | 'OGL-UK-3.0' | 'OGTSL' | 'OLDAP-2.2.2' | 'OLDAP-1.1' | 'OLDAP-1.2' | 'OLDAP-1.3' | 'OLDAP-1.4' | 'OLDAP-2.0' | 'OLDAP-2.0.1' | 'OLDAP-2.1' | 'OLDAP-2.2' | 'OLDAP-2.2.1' | 'OLDAP-2.3' | 'OLDAP-2.4' | 'OLDAP-2.5' | 'OLDAP-2.6' | 'OLDAP-2.7' | 'OLDAP-2.8' | 'OLFL-1.3' | 'OML' | 'OPL-1.0' | 'OPUBL-1.0' | 'OSL-1.0' | 'OSL-1.1' | 'OSL-2.0' | 'OSL-2.1' | 'OSL-3.0' | 'O-UDA-1.0' | 'OpenPBS-2.3' | 'OpenSSL' | 'OpenSSL-standalone' | 'OpenVision' | 'OSET-PL-2.1' | 'PADL' | 'PPL' | 'PHP-3.0' | 'PHP-3.01' | 'Pixar' | 'pkgconf' | 'Plexus' | 'libpng-2.0' | 'pnmstitch' | 'PolyForm-Noncommercial-1.0.0' | 'PolyForm-Small-Business-1.0.0' | 'PostgreSQL' | 'psfrag' | 'psutils' | 'python-ldap' | 'Python-2.0' | 'Python-2.0.1' | 'PSF-2.0' | 'QPL-1.0' | 'QPL-1.0-INRIA-2004' | 'Qhull' | 'radvd' | 'Rdisc' | 'RPSL-1.0' | 'RPL-1.1' | 'RPL-1.5' | 'RHeCos-1.1' | 'RSCPL' | 'RSA-MD' | 'Ruby' | 'Ruby-pty' | 'SAX-PD' | 'SAX-PD-2.0' | 'Saxpath' | 'SCEA' | 'SchemeReport' | 'SWL' | 'SMPPL' | 'Sendmail' | 'Sendmail-8.23' | 'Sendmail-Open-Source-1.1' | 'SSPL-1.0' | 'SGI-B-1.0' | 'SGI-B-1.1' | 'SGI-B-2.0' | 'SGI-OpenGL' | 'SGP4' | 'OFL-1.0' | 'OFL-1.0-no-RFN' | 'OFL-1.0-RFN' | 'OFL-1.1' | 'OFL-1.1-no-RFN' | 'OFL-1.1-RFN' | 'SimPL-2.0' | 'SL' | 'Sleepycat' | 'SMAIL-GPL' | 'SNIA' | 'snprintf' | 'softSurfer' | 'SHL-0.5' | 'SHL-0.51' | 'Soundex' | 'Spencer-86' | 'Spencer-94' | 'Spencer-99' | 'blessing' | 'SSH-OpenSSH' | 'SSH-short' | 'ssh-keyscan' | 'SSLeay-standalone' | 'SMLNJ' | 'SugarCRM-1.1.3' | 'SISSL' | 'SISSL-1.2' | 'Sun-PPP' | 'Sun-PPP-2000' | 'SPL-1.0' | 'SunPro' | 'swrule' | 'Watcom-1.0' | 'Symlinks' | 'BSD-Systemics' | 'BSD-Systemics-W3Works' | 'OGDL-Taiwan-1.0' | 'TAPR-OHL-1.0' | 'TCL' | 'TCP-wrappers' | 'TU-Berlin-1.0' | 'TU-Berlin-2.0' | 'TermReadKey' | 'TTWL' | 'MirOS' | 'Parity-6.0.0' | 'Parity-7.0.0' | 'Unlicense' | 'ThirdEye' | 'TPL-1.0' | 'threeparttable' | 'TPDL' | 'TMate' | 'TORQUE-1.1' | 'TGPPL-1.0' | 'TOSL' | 'TrustedQSL' | 'TTYP0' | 'Ubuntu-font-1.0' | 'UCAR' | 'ulem' | 'Unicode-DFS-2015' | 'Unicode-DFS-2016' | 'Unicode-3.0' | 'Unicode-TOU' | 'OPL-UK-3.0' | 'UPL-1.0' | 'NCSA' | 'UnixCrypt' | 'UCL-1.0' | 'URT-RLE' | 'Vim' | 'VOSTROM' | 'VSL-1.0' | 'W3C-20150513' | 'W3C-19980720' | 'W3C' | 'w3m' | 'Widget-Workshop' | 'Wsuipa' | 'wwl' | 'Xnet' | 'X11' | 'X11-distribute-modifications-variant' | 'X11-swapped' | 'Xdebug-1.03' | 'Xerox' | 'Xfig' | 'XFree86-1.1' | 'xinetd' | 'xkeyboard-config-Zinoviev' | 'xlock' | 'xpp' | 'XSkat' | 'xzoom' | 'YPL-1.0' | 'YPL-1.1' | 'Zed' | 'Zeeff' | 'Zend-2.0' | 'Zimbra-1.3' | 'Zimbra-1.4' | 'Zlib' | 'zlib-acknowledgement' | 'ZPL-1.1' | 'ZPL-2.0' | 'ZPL-2.1';

export type LockRequest = {
    lock: boolean;
};

export type Memory = {
    readonly id: number;
    source: string;
    target: string;
    source_language: number;
    target_language: number;
    origin: string;
    project?: number | null;
    from_file?: boolean;
    shared?: boolean;
};

export type MemoryCreateError = ({
    attr: 'non_field_errors';
} & MemoryCreateNonFieldErrorsErrorComponent) | ({
    attr: 'source';
} & MemoryCreateSourceErrorComponent) | ({
    attr: 'target';
} & MemoryCreateTargetErrorComponent) | ({
    attr: 'source_language';
} & MemoryCreateSourceLanguageErrorComponent) | ({
    attr: 'target_language';
} & MemoryCreateTargetLanguageErrorComponent) | ({
    attr: 'origin';
} & MemoryCreateOriginErrorComponent) | ({
    attr: 'project';
} & MemoryCreateProjectErrorComponent) | ({
    attr: 'from_file';
} & MemoryCreateFromFileErrorComponent) | ({
    attr: 'shared';
} & MemoryCreateSharedErrorComponent);

export type MemoryCreateErrorResponse400 = ({
    type: 'validation_error';
} & MemoryCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type MemoryCreateFromFileErrorComponent = {
    /**
     * * `from_file` - from_file
     */
    attr: 'from_file';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryCreateOriginErrorComponent = {
    /**
     * * `origin` - origin
     */
    attr: 'origin';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryCreateProjectErrorComponent = {
    /**
     * * `project` - project
     */
    attr: 'project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type MemoryCreateSharedErrorComponent = {
    /**
     * * `shared` - shared
     */
    attr: 'shared';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryCreateSourceErrorComponent = {
    /**
     * * `source` - source
     */
    attr: 'source';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryCreateSourceLanguageErrorComponent = {
    /**
     * * `source_language` - source_language
     */
    attr: 'source_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
    detail: string;
};

export type MemoryCreateTargetErrorComponent = {
    /**
     * * `target` - target
     */
    attr: 'target';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryCreateTargetLanguageErrorComponent = {
    /**
     * * `target_language` - target_language
     */
    attr: 'target_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
    detail: string;
};

export type MemoryCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<MemoryCreateError>;
};

export type MemoryDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type MemoryListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type MemoryPartialUpdateError = ({
    attr: 'non_field_errors';
} & MemoryPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'source';
} & MemoryPartialUpdateSourceErrorComponent) | ({
    attr: 'target';
} & MemoryPartialUpdateTargetErrorComponent) | ({
    attr: 'source_language';
} & MemoryPartialUpdateSourceLanguageErrorComponent) | ({
    attr: 'target_language';
} & MemoryPartialUpdateTargetLanguageErrorComponent) | ({
    attr: 'origin';
} & MemoryPartialUpdateOriginErrorComponent) | ({
    attr: 'project';
} & MemoryPartialUpdateProjectErrorComponent) | ({
    attr: 'from_file';
} & MemoryPartialUpdateFromFileErrorComponent) | ({
    attr: 'shared';
} & MemoryPartialUpdateSharedErrorComponent);

export type MemoryPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & MemoryPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type MemoryPartialUpdateFromFileErrorComponent = {
    /**
     * * `from_file` - from_file
     */
    attr: 'from_file';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryPartialUpdateOriginErrorComponent = {
    /**
     * * `origin` - origin
     */
    attr: 'origin';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryPartialUpdateProjectErrorComponent = {
    /**
     * * `project` - project
     */
    attr: 'project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type MemoryPartialUpdateSharedErrorComponent = {
    /**
     * * `shared` - shared
     */
    attr: 'shared';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryPartialUpdateSourceErrorComponent = {
    /**
     * * `source` - source
     */
    attr: 'source';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryPartialUpdateSourceLanguageErrorComponent = {
    /**
     * * `source_language` - source_language
     */
    attr: 'source_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
    detail: string;
};

export type MemoryPartialUpdateTargetErrorComponent = {
    /**
     * * `target` - target
     */
    attr: 'target';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryPartialUpdateTargetLanguageErrorComponent = {
    /**
     * * `target_language` - target_language
     */
    attr: 'target_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
    detail: string;
};

export type MemoryPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<MemoryPartialUpdateError>;
};

export type MemoryRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type MemoryUpdateError = ({
    attr: 'non_field_errors';
} & MemoryUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'source';
} & MemoryUpdateSourceErrorComponent) | ({
    attr: 'target';
} & MemoryUpdateTargetErrorComponent) | ({
    attr: 'source_language';
} & MemoryUpdateSourceLanguageErrorComponent) | ({
    attr: 'target_language';
} & MemoryUpdateTargetLanguageErrorComponent) | ({
    attr: 'origin';
} & MemoryUpdateOriginErrorComponent) | ({
    attr: 'project';
} & MemoryUpdateProjectErrorComponent) | ({
    attr: 'from_file';
} & MemoryUpdateFromFileErrorComponent) | ({
    attr: 'shared';
} & MemoryUpdateSharedErrorComponent);

export type MemoryUpdateErrorResponse400 = ({
    type: 'validation_error';
} & MemoryUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type MemoryUpdateFromFileErrorComponent = {
    /**
     * * `from_file` - from_file
     */
    attr: 'from_file';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryUpdateOriginErrorComponent = {
    /**
     * * `origin` - origin
     */
    attr: 'origin';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryUpdateProjectErrorComponent = {
    /**
     * * `project` - project
     */
    attr: 'project';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type MemoryUpdateSharedErrorComponent = {
    /**
     * * `shared` - shared
     */
    attr: 'shared';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type MemoryUpdateSourceErrorComponent = {
    /**
     * * `source` - source
     */
    attr: 'source';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryUpdateSourceLanguageErrorComponent = {
    /**
     * * `source_language` - source_language
     */
    attr: 'source_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
    detail: string;
};

export type MemoryUpdateTargetErrorComponent = {
    /**
     * * `target` - target
     */
    attr: 'target';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type MemoryUpdateTargetLanguageErrorComponent = {
    /**
     * * `target_language` - target_language
     */
    attr: 'target_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     * * `null` - null
     * * `required` - required
     */
    code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
    detail: string;
};

export type MemoryUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<MemoryUpdateError>;
};

/**
 * * `merge` - Merge
 * * `rebase` - Rebase
 * * `merge_noff` - Merge without fast-forward
 */
export type MergeStyleEnum = 'merge' | 'rebase' | 'merge_noff';

/**
 * * `translate` - translate
 * * `approve` - approve
 * * `suggest` - suggest
 * * `fuzzy` - fuzzy
 * * `replace` - replace
 * * `source` - source
 * * `add` - add
 */
export type MethodEnum = 'translate' | 'approve' | 'suggest' | 'fuzzy' | 'replace' | 'source' | 'add';

export type Metrics = {
    units: number;
    units_translated: number;
    users: number;
    changes: number;
    projects: number;
    components: number;
    translations: number;
    languages: number;
    checks: number;
    configuration_errors: number;
    suggestions: number;
    celery_queues: {
        [key: string]: number;
    };
    name: string;
};

export type MetricsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

/**
 * * `contact` - Contact maintainers
 * * `url` - Point to translation instructions URL
 * * `add` - Create new language file
 * * `none` - Disable adding new translations
 */
export type NewLangEnum = 'contact' | 'url' | 'add' | 'none';

export type Notification = {
    notification: NotificationEnum;
    readonly id: number;
    scope: ScopeEnum;
    frequency: FrequencyEnum;
    project: Project;
    component: Component;
};

/**
 * * `RepositoryNotification` - Operation was performed in the repository
 * * `LockNotification` - Component was locked or unlocked
 * * `LicenseNotification` - License was changed
 * * `ParseErrorNotification` - Parse error occurred
 * * `NewStringNotificaton` - String is available for translation
 * * `NewContributorNotificaton` - Contributor made their first translation
 * * `NewSuggestionNotificaton` - Suggestion was added
 * * `LanguageTranslatedNotificaton` - Language was translated
 * * `ComponentTranslatedNotificaton` - Component was translated
 * * `NewCommentNotificaton` - Comment was added
 * * `MentionCommentNotificaton` - You were mentioned in a comment
 * * `LastAuthorCommentNotificaton` - Your translation received a comment
 * * `TranslatedStringNotificaton` - String was edited by user
 * * `ApprovedStringNotificaton` - String was approved
 * * `ChangedStringNotificaton` - String was changed
 * * `NewTranslationNotificaton` - New language was added or requested
 * * `NewComponentNotificaton` - New translation component was created
 * * `NewAnnouncementNotificaton` - Announcement was published
 * * `NewAlertNotificaton` - New alert emerged in a component
 * * `MergeFailureNotification` - Repository operation failed
 * * `PendingSuggestionsNotification` - Pending suggestions exist
 * * `ToDoStringsNotification` - Unfinished strings exist
 */
export type NotificationEnum = 'RepositoryNotification' | 'LockNotification' | 'LicenseNotification' | 'ParseErrorNotification' | 'NewStringNotificaton' | 'NewContributorNotificaton' | 'NewSuggestionNotificaton' | 'LanguageTranslatedNotificaton' | 'ComponentTranslatedNotificaton' | 'NewCommentNotificaton' | 'MentionCommentNotificaton' | 'LastAuthorCommentNotificaton' | 'TranslatedStringNotificaton' | 'ApprovedStringNotificaton' | 'ChangedStringNotificaton' | 'NewTranslationNotificaton' | 'NewComponentNotificaton' | 'NewAnnouncementNotificaton' | 'NewAlertNotificaton' | 'MergeFailureNotification' | 'PendingSuggestionsNotification' | 'ToDoStringsNotification';

/**
 * * `commit` - commit
 * * `pull` - pull
 * * `push` - push
 * * `reset` - reset
 * * `cleanup` - cleanup
 */
export type OperationEnum = 'commit' | 'pull' | 'push' | 'reset' | 'cleanup';

export type PaginatedAddonList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Addon>;
};

export type PaginatedBasicUserList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<BasicUser>;
};

export type PaginatedCategoryList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Category>;
};

export type PaginatedChangeList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Change>;
};

export type PaginatedComponentList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Component>;
};

export type PaginatedComponentListList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<ComponentList>;
};

export type PaginatedGroupList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Group>;
};

export type PaginatedLanguageList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Language>;
};

export type PaginatedMemoryList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Memory>;
};

export type PaginatedNotificationList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Notification>;
};

export type PaginatedProjectList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Project>;
};

export type PaginatedRoleList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Role>;
};

export type PaginatedScreenshotList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Screenshot>;
};

export type PaginatedTranslationList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Translation>;
};

export type PaginatedUnitList = {
    count: number;
    next?: string;
    previous?: string;
    results: Array<Unit>;
};

export type ParseError = {
    code: ParseErrorCodeEnum;
    detail: string;
    attr: string | null;
};

/**
 * * `parse_error` - Parse Error
 */
export type ParseErrorCodeEnum = 'parse_error';

export type ParseErrorResponse = {
    type: ClientErrorEnum;
    errors: Array<ParseError>;
};

export type PatchedAddon = {
    readonly component?: string;
    readonly project?: string;
    name?: string;
    readonly id?: number;
    configuration?: unknown;
    readonly url?: string;
};

export type PatchedBasicUser = {
    readonly id?: number;
    full_name?: string;
    /**
     * Username may only contain letters, numbers or the following characters: @ . + - _
     */
    username?: string;
};

export type PatchedCategory = {
    readonly id?: number;
    /**
     * Category name
     * Display name
     */
    name?: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug?: string;
    project?: string;
    category?: string;
    readonly url?: string;
    readonly statistics_url?: string;
};

export type PatchedComponent = {
    /**
     * Component name
     * Display name
     */
    name?: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug?: string;
    readonly id?: number;
    source_language?: Language;
    project?: Project;
    /**
     * Version control system
     * Version control system to use to access your repository containing translations. You can also choose additional integration with third party providers to submit merge requests.
     *
     * * `gerrit` - Gerrit
     * * `git` - Git
     * * `git-force-push` - Git with force push
     * * `local` - No remote repository
     * * `mercurial` - Mercurial
     * * `subversion` - Subversion
     */
    vcs?: VcsEnum;
    repo?: string;
    /**
     * Exported repository URL
     * URL of repository where users can fetch changes from Weblate
     */
    git_export?: string;
    branch?: string;
    push_branch?: string;
    /**
     * File mask
     * Path of files to translate relative to repository root, use * instead of language code, for example: po*.po or locale*LC_MESSAGES/django.po.
     */
    filemask?: string;
    /**
     * Screenshot file mask
     * Path of screenshots relative to repository root, for example: docs/screenshots*.png.
     */
    screenshot_filemask?: string;
    /**
     * Monolingual base language file
     * Filename of translation base file, containing all strings and their source for monolingual translations.
     */
    template?: string;
    /**
     * Edit base file
     * Whether users will be able to edit the base file for monolingual translations.
     */
    edit_template?: boolean;
    /**
     * Intermediate language file
     * Filename of intermediate translation file. In most cases this is a translation file provided by developers and is used when creating actual source strings.
     */
    intermediate?: string;
    /**
     * Template for new translations
     * Filename of file used for creating new translations. For gettext choose .pot file.
     */
    new_base?: string;
    file_format?: FileFormatEnum;
    /**
     * Translation license
     */
    license?: LicenseEnum | BlankEnum;
    readonly license_url?: string;
    /**
     * Contributor license agreement
     * Contributor license agreement which needs to be approved before a user can translate this component.
     */
    agreement?: string;
    readonly web_url?: string;
    readonly url?: string;
    readonly repository_url?: string;
    readonly translations_url?: string;
    readonly statistics_url?: string;
    readonly lock_url?: string;
    readonly links_url?: string;
    readonly changes_list_url?: string;
    readonly task_url?: string | null;
    readonly credits_url?: string;
    /**
     * Adding new translation
     * How to handle requests for creating new translations.
     *
     * * `contact` - Contact maintainers
     * * `url` - Point to translation instructions URL
     * * `add` - Create new language file
     * * `none` - Disable adding new translations
     */
    new_lang?: NewLangEnum;
    /**
     * Customize language code used to generate the filename for translations created by Weblate.
     *
     * * `` - Default based on the file format
     * * `posix` - POSIX style using underscore as a separator
     * * `posix_lowercase` - POSIX style using underscore as a separator, lower cased
     * * `bcp` - BCP style using hyphen as a separator
     * * `posix_long` - POSIX style using underscore as a separator, including country code
     * * `posix_long_lowercase` - POSIX style using underscore as a separator, including country code, lower cased
     * * `bcp_long` - BCP style using hyphen as a separator, including country code
     * * `bcp_legacy` - BCP style using hyphen as a separator, legacy language codes
     * * `bcp_lower` - BCP style using hyphen as a separator, lower cased
     * * `android` - Android style
     * * `appstore` - Apple App Store metadata style
     * * `googleplay` - Google Play metadata style
     * * `linux` - Linux style
     * * `linux_lowercase` - Linux style, lower cased
     */
    language_code_style?: LanguageCodeStyleEnum | BlankEnum;
    push?: string;
    /**
     * Translation flags
     * Additional comma-separated flags to influence Weblate behavior.
     */
    check_flags?: string;
    /**
     * Components with higher priority are offered first to translators.
     *
     * * `60` - Very high
     * * `80` - High
     * * `100` - Medium
     * * `120` - Low
     * * `140` - Very low
     */
    priority?: PriorityEnum;
    enforced_checks?: unknown;
    /**
     * Restricted component
     * Restrict access to the component to only those explicitly given permission.
     */
    restricted?: boolean;
    /**
     * Repository browser
     * Link to repository browser, use {{branch}} for branch, {{filename}} and {{line}} as filename and line placeholders. You might want to strip leading directory by using {{filename|parentdir}}.
     */
    repoweb?: string;
    /**
     * Source string bug reporting address
     * E-mail address for reports on errors in source strings. Leave empty for no e-mails.
     */
    report_source_bugs?: string;
    /**
     * Define whether Weblate should merge the upstream repository or rebase changes onto it.
     *
     * * `merge` - Merge
     * * `rebase` - Rebase
     * * `merge_noff` - Merge without fast-forward
     */
    merge_style?: MergeStyleEnum;
    /**
     * Commit message when translating
     * You can use template language for various info, please consult the documentation for more details.
     */
    commit_message?: string;
    /**
     * Commit message when adding translation
     * You can use template language for various info, please consult the documentation for more details.
     */
    add_message?: string;
    /**
     * Commit message when removing translation
     * You can use template language for various info, please consult the documentation for more details.
     */
    delete_message?: string;
    /**
     * Commit message when merging translation
     * You can use template language for various info, please consult the documentation for more details.
     */
    merge_message?: string;
    /**
     * Commit message when add-on makes a change
     * You can use template language for various info, please consult the documentation for more details.
     */
    addon_message?: string;
    /**
     * Merge request message
     * You can use template language for various info, please consult the documentation for more details.
     */
    pull_message?: string;
    /**
     * Whether translation updates in other components will cause automatic translation in this one
     */
    allow_translation_propagation?: boolean;
    /**
     * Manage strings
     * Enables adding and removing strings straight from Weblate. If your strings are extracted from the source code or managed externally you probably want to keep it disabled.
     */
    manage_units?: boolean;
    /**
     * Turn on suggestions
     * Whether to allow translation suggestions at all.
     */
    enable_suggestions?: boolean;
    /**
     * Users can only vote for suggestions and can’t make direct translations.
     */
    suggestion_voting?: boolean;
    /**
     * Automatically accept suggestions
     * Automatically accept suggestions with this number of votes, use 0 to turn it off.
     */
    suggestion_autoaccept?: number;
    /**
     * Whether the repository should be pushed upstream on every commit.
     */
    push_on_commit?: boolean;
    /**
     * Age of changes to commit
     * Time in hours after which any pending changes will be committed to the VCS.
     */
    commit_pending_age?: number;
    /**
     * Lock on error
     * Whether the component should be locked on repository errors.
     */
    auto_lock_error?: boolean;
    /**
     * Language filter
     * Regular expression used to filter translation files when scanning for file mask.
     */
    language_regex?: string;
    /**
     * Regular expression used to filter keys. This is only available for monolingual formats.
     */
    key_filter?: string;
    /**
     * Additional language to show together with the source language while translating. This setting is inherited from the project if left empty.
     */
    secondary_language?: number | null;
    /**
     * Variants regular expression
     * Regular expression used to determine variants of a string.
     */
    variant_regex?: string;
    zipfile?: string;
    docfile?: string;
    readonly addons?: Array<string>;
    /**
     * Use as a glossary
     */
    is_glossary?: boolean;
    glossary_color?: ColorEnum;
    disable_autoshare?: boolean;
    category?: string | null;
    readonly linked_component?: string;
    readonly locked?: boolean;
};

export type PatchedComponentList = {
    /**
     * Component list name
     * Display name
     */
    name?: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug?: string;
    readonly id?: number;
    /**
     * Show on dashboard
     * When enabled this component list will be shown as a tab on the dashboard
     */
    show_dashboard?: boolean;
    readonly components?: Array<string>;
    readonly auto_assign?: Array<AutoComponentList>;
    readonly url?: string;
};

export type PatchedGroup = {
    readonly id?: number;
    name?: string;
    defining_project?: string;
    project_selection?: ProjectSelectionEnum;
    language_selection?: LanguageSelectionEnum;
    readonly url?: string;
    readonly roles?: Array<string>;
    readonly languages?: Array<string>;
    readonly projects?: Array<string>;
    readonly componentlists?: Array<string>;
    readonly components?: Array<string>;
    /**
     * Enforced two-factor authentication
     * Requires users to have two-factor authentication configured.
     */
    enforced_2fa?: boolean;
};

export type PatchedLanguage = {
    readonly id?: number;
    /**
     * Language code
     */
    code?: string;
    name?: string;
    plural?: LanguagePlural;
    readonly aliases?: Array<unknown>;
    /**
     * Text direction
     */
    direction?: DirectionEnum | BlankEnum;
    /**
     * Number of speakers
     * Number of people speaking this language.
     */
    population?: number;
    readonly web_url?: string;
    readonly url?: string;
    readonly statistics_url?: string;
};

export type PatchedMemory = {
    readonly id?: number;
    source?: string;
    target?: string;
    source_language?: number;
    target_language?: number;
    origin?: string;
    project?: number | null;
    from_file?: boolean;
    shared?: boolean;
};

export type PatchedNotification = {
    notification?: NotificationEnum;
    readonly id?: number;
    scope?: ScopeEnum;
    frequency?: FrequencyEnum;
    project?: Project;
    component?: Component;
};

export type PatchedProject = {
    /**
     * Project name
     * Display name
     */
    name?: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug?: string;
    readonly id?: number;
    /**
     * Project website
     * Main website of translated project.
     */
    web?: string;
    readonly web_url?: string;
    readonly url?: string;
    /**
     * Translation flags
     * Additional comma-separated flags to influence Weblate behavior.
     */
    check_flags?: string;
    readonly components_list_url?: string;
    readonly repository_url?: string;
    readonly statistics_url?: string;
    readonly categories_url?: string;
    readonly changes_list_url?: string;
    readonly languages_url?: string;
    readonly labels_url?: string;
    readonly credits_url?: string;
    /**
     * Enable reviews
     * Requires dedicated reviewers to approve translations.
     */
    translation_review?: boolean;
    /**
     * Enable source reviews
     * Requires dedicated reviewers to approve source strings.
     */
    source_review?: boolean;
    /**
     * Set "Language-Team" header
     * Lets Weblate update the "Language-Team" file header of your project.
     */
    set_language_team?: boolean;
    /**
     * Translation instructions
     * You can use Markdown and mention users by @username.
     */
    instructions?: string;
    /**
     * Whether to allow updating this repository by remote hooks.
     */
    enable_hooks?: boolean;
    /**
     * Comma-separated list of language code mappings, for example: en_GB:en,en_US:en
     */
    language_aliases?: string;
    /**
     * Additional language to show together with the source language while translating.
     */
    secondary_language?: number | null;
    /**
     * Enforced two-factor authentication
     * Requires contributors to have two-factor authentication configured before being able to contribute.
     */
    enforced_2fa?: boolean;
    readonly machinery_settings?: string;
};

export type PatchedRole = {
    readonly id?: number;
    name?: string;
    permissions?: Array<string>;
    readonly url?: string;
};

export type PatchedScreenshot = {
    readonly id?: number;
    /**
     * Screenshot name
     */
    name?: string;
    /**
     * Repository path to screenshot
     * Scan for screenshot file change on repository update.
     */
    repository_filename?: string;
    readonly translation?: string;
    readonly file_url?: string;
    readonly units?: Array<string>;
    readonly url?: string;
};

export type PatchedSingleServiceConfig = {
    service?: string;
    configuration?: {
        [key: string]: unknown;
    };
};

/**
 * Serializer for updating source unit.
 */
export type PatchedUnitWrite = {
    target?: Array<string>;
    state?: StateEnum;
    /**
     * Additional explanation to clarify meaning or usage of the string.
     */
    explanation?: string;
    /**
     * Translation flags
     * Additional comma-separated flags to influence Weblate behavior.
     */
    extra_flags?: string;
    labels?: Array<UnitFlatLabels>;
};

/**
 * * `60` - Very high
 * * `80` - High
 * * `100` - Medium
 * * `120` - Low
 * * `140` - Very low
 */
export type PriorityEnum = 60 | 80 | 100 | 120 | 140;

export type Project = {
    /**
     * Project name
     * Display name
     */
    name: string;
    /**
     * URL slug
     * Name used in URLs and filenames.
     */
    slug: string;
    readonly id: number;
    /**
     * Project website
     * Main website of translated project.
     */
    web: string;
    readonly web_url: string;
    readonly url: string;
    /**
     * Translation flags
     * Additional comma-separated flags to influence Weblate behavior.
     */
    check_flags?: string;
    readonly components_list_url: string;
    readonly repository_url: string;
    readonly statistics_url: string;
    readonly categories_url: string;
    readonly changes_list_url: string;
    readonly languages_url: string;
    readonly labels_url: string;
    readonly credits_url: string;
    /**
     * Enable reviews
     * Requires dedicated reviewers to approve translations.
     */
    translation_review?: boolean;
    /**
     * Enable source reviews
     * Requires dedicated reviewers to approve source strings.
     */
    source_review?: boolean;
    /**
     * Set "Language-Team" header
     * Lets Weblate update the "Language-Team" file header of your project.
     */
    set_language_team?: boolean;
    /**
     * Translation instructions
     * You can use Markdown and mention users by @username.
     */
    instructions?: string;
    /**
     * Whether to allow updating this repository by remote hooks.
     */
    enable_hooks?: boolean;
    /**
     * Comma-separated list of language code mappings, for example: en_GB:en,en_US:en
     */
    language_aliases?: string;
    /**
     * Additional language to show together with the source language while translating.
     */
    secondary_language?: number | null;
    /**
     * Enforced two-factor authentication
     * Requires contributors to have two-factor authentication configured before being able to contribute.
     */
    enforced_2fa?: boolean;
    readonly machinery_settings: string;
};

export type ProjectMachinerySettings = {
    service_name?: {
        [key: string]: unknown;
    };
};

/**
 * * `0` - As defined
 * * `1` - All projects
 * * `3` - All public projects
 * * `4` - All protected projects
 * * `2` - From component list
 */
export type ProjectSelectionEnum = 0 | 1 | 3 | 4 | 2;

export type ProjectsAddonsCreateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsAddonsCreateEnableHooksErrorComponent = {
    /**
     * * `enable_hooks` - enable_hooks
     */
    attr: 'enable_hooks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsAddonsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsAddonsCreateError = ({
    attr: 'non_field_errors';
} & ProjectsAddonsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ProjectsAddonsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ProjectsAddonsCreateSlugErrorComponent) | ({
    attr: 'web';
} & ProjectsAddonsCreateWebErrorComponent) | ({
    attr: 'check_flags';
} & ProjectsAddonsCreateCheckFlagsErrorComponent) | ({
    attr: 'translation_review';
} & ProjectsAddonsCreateTranslationReviewErrorComponent) | ({
    attr: 'source_review';
} & ProjectsAddonsCreateSourceReviewErrorComponent) | ({
    attr: 'set_language_team';
} & ProjectsAddonsCreateSetLanguageTeamErrorComponent) | ({
    attr: 'instructions';
} & ProjectsAddonsCreateInstructionsErrorComponent) | ({
    attr: 'enable_hooks';
} & ProjectsAddonsCreateEnableHooksErrorComponent) | ({
    attr: 'language_aliases';
} & ProjectsAddonsCreateLanguageAliasesErrorComponent) | ({
    attr: 'secondary_language';
} & ProjectsAddonsCreateSecondaryLanguageErrorComponent) | ({
    attr: 'enforced_2fa';
} & ProjectsAddonsCreateEnforced2FaErrorComponent);

export type ProjectsAddonsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ProjectsAddonsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ProjectsAddonsCreateInstructionsErrorComponent = {
    /**
     * * `instructions` - instructions
     */
    attr: 'instructions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsAddonsCreateLanguageAliasesErrorComponent = {
    /**
     * * `language_aliases` - language_aliases
     */
    attr: 'language_aliases';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsAddonsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsAddonsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsAddonsCreateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ProjectsAddonsCreateSetLanguageTeamErrorComponent = {
    /**
     * * `set_language_team` - set_language_team
     */
    attr: 'set_language_team';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsAddonsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsAddonsCreateSourceReviewErrorComponent = {
    /**
     * * `source_review` - source_review
     */
    attr: 'source_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsAddonsCreateTranslationReviewErrorComponent = {
    /**
     * * `translation_review` - translation_review
     */
    attr: 'translation_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsAddonsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ProjectsAddonsCreateError>;
};

export type ProjectsAddonsCreateWebErrorComponent = {
    /**
     * * `web` - web
     */
    attr: 'web';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsCategoriesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsChangesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsComponentsCreateAddMessageErrorComponent = {
    /**
     * * `add_message` - add_message
     */
    attr: 'add_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateAddonMessageErrorComponent = {
    /**
     * * `addon_message` - addon_message
     */
    attr: 'addon_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateAgreementErrorComponent = {
    /**
     * * `agreement` - agreement
     */
    attr: 'agreement';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateAllowTranslationPropagationErrorComponent = {
    /**
     * * `allow_translation_propagation` - allow_translation_propagation
     */
    attr: 'allow_translation_propagation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateAutoLockErrorErrorComponent = {
    /**
     * * `auto_lock_error` - auto_lock_error
     */
    attr: 'auto_lock_error';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateBranchErrorComponent = {
    /**
     * * `branch` - branch
     */
    attr: 'branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateCategoryErrorComponent = {
    /**
     * * `category` - category
     */
    attr: 'category';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_match` - incorrect_match
     * * `incorrect_type` - incorrect_type
     * * `no_match` - no_match
     */
    code: 'does_not_exist' | 'incorrect_match' | 'incorrect_type' | 'no_match';
    detail: string;
};

export type ProjectsComponentsCreateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateCommitMessageErrorComponent = {
    /**
     * * `commit_message` - commit_message
     */
    attr: 'commit_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateCommitPendingAgeErrorComponent = {
    /**
     * * `commit_pending_age` - commit_pending_age
     */
    attr: 'commit_pending_age';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateDeleteMessageErrorComponent = {
    /**
     * * `delete_message` - delete_message
     */
    attr: 'delete_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateDisableAutoshareErrorComponent = {
    /**
     * * `disable_autoshare` - disable_autoshare
     */
    attr: 'disable_autoshare';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateDocfileErrorComponent = {
    /**
     * * `docfile` - docfile
     */
    attr: 'docfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateEditTemplateErrorComponent = {
    /**
     * * `edit_template` - edit_template
     */
    attr: 'edit_template';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateEnableSuggestionsErrorComponent = {
    /**
     * * `enable_suggestions` - enable_suggestions
     */
    attr: 'enable_suggestions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateEnforcedChecksErrorComponent = {
    /**
     * * `enforced_checks` - enforced_checks
     */
    attr: 'enforced_checks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateError = ({
    attr: 'non_field_errors';
} & ProjectsComponentsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ProjectsComponentsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ProjectsComponentsCreateSlugErrorComponent) | ({
    attr: 'source_language.non_field_errors';
} & ProjectsComponentsCreateSourceLanguageNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.code';
} & ProjectsComponentsCreateSourceLanguageCodeErrorComponent) | ({
    attr: 'source_language.name';
} & ProjectsComponentsCreateSourceLanguageNameErrorComponent) | ({
    attr: 'source_language.plural.non_field_errors';
} & ProjectsComponentsCreateSourceLanguagePluralNonFieldErrorsErrorComponent) | ({
    attr: 'source_language.plural.source';
} & ProjectsComponentsCreateSourceLanguagePluralSourceErrorComponent) | ({
    attr: 'source_language.plural.number';
} & ProjectsComponentsCreateSourceLanguagePluralNumberErrorComponent) | ({
    attr: 'source_language.plural.formula';
} & ProjectsComponentsCreateSourceLanguagePluralFormulaErrorComponent) | ({
    attr: 'source_language.direction';
} & ProjectsComponentsCreateSourceLanguageDirectionErrorComponent) | ({
    attr: 'source_language.population';
} & ProjectsComponentsCreateSourceLanguagePopulationErrorComponent) | ({
    attr: 'vcs';
} & ProjectsComponentsCreateVcsErrorComponent) | ({
    attr: 'repo';
} & ProjectsComponentsCreateRepoErrorComponent) | ({
    attr: 'git_export';
} & ProjectsComponentsCreateGitExportErrorComponent) | ({
    attr: 'branch';
} & ProjectsComponentsCreateBranchErrorComponent) | ({
    attr: 'push_branch';
} & ProjectsComponentsCreatePushBranchErrorComponent) | ({
    attr: 'filemask';
} & ProjectsComponentsCreateFilemaskErrorComponent) | ({
    attr: 'screenshot_filemask';
} & ProjectsComponentsCreateScreenshotFilemaskErrorComponent) | ({
    attr: 'template';
} & ProjectsComponentsCreateTemplateErrorComponent) | ({
    attr: 'edit_template';
} & ProjectsComponentsCreateEditTemplateErrorComponent) | ({
    attr: 'intermediate';
} & ProjectsComponentsCreateIntermediateErrorComponent) | ({
    attr: 'new_base';
} & ProjectsComponentsCreateNewBaseErrorComponent) | ({
    attr: 'file_format';
} & ProjectsComponentsCreateFileFormatErrorComponent) | ({
    attr: 'license';
} & ProjectsComponentsCreateLicenseErrorComponent) | ({
    attr: 'agreement';
} & ProjectsComponentsCreateAgreementErrorComponent) | ({
    attr: 'new_lang';
} & ProjectsComponentsCreateNewLangErrorComponent) | ({
    attr: 'language_code_style';
} & ProjectsComponentsCreateLanguageCodeStyleErrorComponent) | ({
    attr: 'push';
} & ProjectsComponentsCreatePushErrorComponent) | ({
    attr: 'check_flags';
} & ProjectsComponentsCreateCheckFlagsErrorComponent) | ({
    attr: 'priority';
} & ProjectsComponentsCreatePriorityErrorComponent) | ({
    attr: 'enforced_checks';
} & ProjectsComponentsCreateEnforcedChecksErrorComponent) | ({
    attr: 'restricted';
} & ProjectsComponentsCreateRestrictedErrorComponent) | ({
    attr: 'repoweb';
} & ProjectsComponentsCreateRepowebErrorComponent) | ({
    attr: 'report_source_bugs';
} & ProjectsComponentsCreateReportSourceBugsErrorComponent) | ({
    attr: 'merge_style';
} & ProjectsComponentsCreateMergeStyleErrorComponent) | ({
    attr: 'commit_message';
} & ProjectsComponentsCreateCommitMessageErrorComponent) | ({
    attr: 'add_message';
} & ProjectsComponentsCreateAddMessageErrorComponent) | ({
    attr: 'delete_message';
} & ProjectsComponentsCreateDeleteMessageErrorComponent) | ({
    attr: 'merge_message';
} & ProjectsComponentsCreateMergeMessageErrorComponent) | ({
    attr: 'addon_message';
} & ProjectsComponentsCreateAddonMessageErrorComponent) | ({
    attr: 'pull_message';
} & ProjectsComponentsCreatePullMessageErrorComponent) | ({
    attr: 'allow_translation_propagation';
} & ProjectsComponentsCreateAllowTranslationPropagationErrorComponent) | ({
    attr: 'manage_units';
} & ProjectsComponentsCreateManageUnitsErrorComponent) | ({
    attr: 'enable_suggestions';
} & ProjectsComponentsCreateEnableSuggestionsErrorComponent) | ({
    attr: 'suggestion_voting';
} & ProjectsComponentsCreateSuggestionVotingErrorComponent) | ({
    attr: 'suggestion_autoaccept';
} & ProjectsComponentsCreateSuggestionAutoacceptErrorComponent) | ({
    attr: 'push_on_commit';
} & ProjectsComponentsCreatePushOnCommitErrorComponent) | ({
    attr: 'commit_pending_age';
} & ProjectsComponentsCreateCommitPendingAgeErrorComponent) | ({
    attr: 'auto_lock_error';
} & ProjectsComponentsCreateAutoLockErrorErrorComponent) | ({
    attr: 'language_regex';
} & ProjectsComponentsCreateLanguageRegexErrorComponent) | ({
    attr: 'key_filter';
} & ProjectsComponentsCreateKeyFilterErrorComponent) | ({
    attr: 'secondary_language';
} & ProjectsComponentsCreateSecondaryLanguageErrorComponent) | ({
    attr: 'variant_regex';
} & ProjectsComponentsCreateVariantRegexErrorComponent) | ({
    attr: 'zipfile';
} & ProjectsComponentsCreateZipfileErrorComponent) | ({
    attr: 'docfile';
} & ProjectsComponentsCreateDocfileErrorComponent) | ({
    attr: 'is_glossary';
} & ProjectsComponentsCreateIsGlossaryErrorComponent) | ({
    attr: 'glossary_color';
} & ProjectsComponentsCreateGlossaryColorErrorComponent) | ({
    attr: 'disable_autoshare';
} & ProjectsComponentsCreateDisableAutoshareErrorComponent) | ({
    attr: 'category';
} & ProjectsComponentsCreateCategoryErrorComponent);

export type ProjectsComponentsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ProjectsComponentsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ProjectsComponentsCreateFileFormatErrorComponent = {
    /**
     * * `file_format` - file_format
     */
    attr: 'file_format';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ProjectsComponentsCreateFilemaskErrorComponent = {
    /**
     * * `filemask` - filemask
     */
    attr: 'filemask';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateGitExportErrorComponent = {
    /**
     * * `git_export` - git_export
     */
    attr: 'git_export';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateGlossaryColorErrorComponent = {
    /**
     * * `glossary_color` - glossary_color
     */
    attr: 'glossary_color';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateIntermediateErrorComponent = {
    /**
     * * `intermediate` - intermediate
     */
    attr: 'intermediate';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateIsGlossaryErrorComponent = {
    /**
     * * `is_glossary` - is_glossary
     */
    attr: 'is_glossary';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateKeyFilterErrorComponent = {
    /**
     * * `key_filter` - key_filter
     */
    attr: 'key_filter';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateLanguageCodeStyleErrorComponent = {
    /**
     * * `language_code_style` - language_code_style
     */
    attr: 'language_code_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateLanguageRegexErrorComponent = {
    /**
     * * `language_regex` - language_regex
     */
    attr: 'language_regex';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateLicenseErrorComponent = {
    /**
     * * `license` - license
     */
    attr: 'license';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateManageUnitsErrorComponent = {
    /**
     * * `manage_units` - manage_units
     */
    attr: 'manage_units';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateMergeMessageErrorComponent = {
    /**
     * * `merge_message` - merge_message
     */
    attr: 'merge_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateMergeStyleErrorComponent = {
    /**
     * * `merge_style` - merge_style
     */
    attr: 'merge_style';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateNewBaseErrorComponent = {
    /**
     * * `new_base` - new_base
     */
    attr: 'new_base';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateNewLangErrorComponent = {
    /**
     * * `new_lang` - new_lang
     */
    attr: 'new_lang';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreatePriorityErrorComponent = {
    /**
     * * `priority` - priority
     */
    attr: 'priority';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ProjectsComponentsCreatePullMessageErrorComponent = {
    /**
     * * `pull_message` - pull_message
     */
    attr: 'pull_message';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreatePushBranchErrorComponent = {
    /**
     * * `push_branch` - push_branch
     */
    attr: 'push_branch';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreatePushErrorComponent = {
    /**
     * * `push` - push
     */
    attr: 'push';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreatePushOnCommitErrorComponent = {
    /**
     * * `push_on_commit` - push_on_commit
     */
    attr: 'push_on_commit';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateRepoErrorComponent = {
    /**
     * * `repo` - repo
     */
    attr: 'repo';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateReportSourceBugsErrorComponent = {
    /**
     * * `report_source_bugs` - report_source_bugs
     */
    attr: 'report_source_bugs';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateRepowebErrorComponent = {
    /**
     * * `repoweb` - repoweb
     */
    attr: 'repoweb';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateRestrictedErrorComponent = {
    /**
     * * `restricted` - restricted
     */
    attr: 'restricted';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateScreenshotFilemaskErrorComponent = {
    /**
     * * `screenshot_filemask` - screenshot_filemask
     */
    attr: 'screenshot_filemask';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ProjectsComponentsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguageCodeErrorComponent = {
    /**
     * * `source_language.code` - source_language.code
     */
    attr: 'source_language.code';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguageDirectionErrorComponent = {
    /**
     * * `source_language.direction` - source_language.direction
     */
    attr: 'source_language.direction';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguageNameErrorComponent = {
    /**
     * * `source_language.name` - source_language.name
     */
    attr: 'source_language.name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguageNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.non_field_errors` - source_language.non_field_errors
     */
    attr: 'source_language.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguagePluralFormulaErrorComponent = {
    /**
     * * `source_language.plural.formula` - source_language.plural.formula
     */
    attr: 'source_language.plural.formula';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguagePluralNonFieldErrorsErrorComponent = {
    /**
     * * `source_language.plural.non_field_errors` - source_language.plural.non_field_errors
     */
    attr: 'source_language.plural.non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguagePluralNumberErrorComponent = {
    /**
     * * `source_language.plural.number` - source_language.plural.number
     */
    attr: 'source_language.plural.number';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguagePluralSourceErrorComponent = {
    /**
     * * `source_language.plural.source` - source_language.plural.source
     */
    attr: 'source_language.plural.source';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateSourceLanguagePopulationErrorComponent = {
    /**
     * * `source_language.population` - source_language.population
     */
    attr: 'source_language.population';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateSuggestionAutoacceptErrorComponent = {
    /**
     * * `suggestion_autoaccept` - suggestion_autoaccept
     */
    attr: 'suggestion_autoaccept';
    /**
     * * `invalid` - invalid
     * * `max_string_length` - max_string_length
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid' | 'max_string_length' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateSuggestionVotingErrorComponent = {
    /**
     * * `suggestion_voting` - suggestion_voting
     */
    attr: 'suggestion_voting';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateTemplateErrorComponent = {
    /**
     * * `template` - template
     */
    attr: 'template';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ProjectsComponentsCreateError>;
};

export type ProjectsComponentsCreateVariantRegexErrorComponent = {
    /**
     * * `variant_regex` - variant_regex
     */
    attr: 'variant_regex';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsComponentsCreateVcsErrorComponent = {
    /**
     * * `vcs` - vcs
     */
    attr: 'vcs';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type ProjectsComponentsCreateZipfileErrorComponent = {
    /**
     * * `zipfile` - zipfile
     */
    attr: 'zipfile';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null';
    detail: string;
};

export type ProjectsComponentsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsCreateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsCreateEnableHooksErrorComponent = {
    /**
     * * `enable_hooks` - enable_hooks
     */
    attr: 'enable_hooks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsCreateError = ({
    attr: 'non_field_errors';
} & ProjectsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ProjectsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ProjectsCreateSlugErrorComponent) | ({
    attr: 'web';
} & ProjectsCreateWebErrorComponent) | ({
    attr: 'check_flags';
} & ProjectsCreateCheckFlagsErrorComponent) | ({
    attr: 'translation_review';
} & ProjectsCreateTranslationReviewErrorComponent) | ({
    attr: 'source_review';
} & ProjectsCreateSourceReviewErrorComponent) | ({
    attr: 'set_language_team';
} & ProjectsCreateSetLanguageTeamErrorComponent) | ({
    attr: 'instructions';
} & ProjectsCreateInstructionsErrorComponent) | ({
    attr: 'enable_hooks';
} & ProjectsCreateEnableHooksErrorComponent) | ({
    attr: 'language_aliases';
} & ProjectsCreateLanguageAliasesErrorComponent) | ({
    attr: 'secondary_language';
} & ProjectsCreateSecondaryLanguageErrorComponent) | ({
    attr: 'enforced_2fa';
} & ProjectsCreateEnforced2FaErrorComponent);

export type ProjectsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ProjectsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ProjectsCreateInstructionsErrorComponent = {
    /**
     * * `instructions` - instructions
     */
    attr: 'instructions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsCreateLanguageAliasesErrorComponent = {
    /**
     * * `language_aliases` - language_aliases
     */
    attr: 'language_aliases';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsCreateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ProjectsCreateSetLanguageTeamErrorComponent = {
    /**
     * * `set_language_team` - set_language_team
     */
    attr: 'set_language_team';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsCreateSourceReviewErrorComponent = {
    /**
     * * `source_review` - source_review
     */
    attr: 'source_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsCreateTranslationReviewErrorComponent = {
    /**
     * * `translation_review` - translation_review
     */
    attr: 'translation_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ProjectsCreateError>;
};

export type ProjectsCreateWebErrorComponent = {
    /**
     * * `web` - web
     */
    attr: 'web';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsCreditsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsFileRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsLabelsCreateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsLabelsCreateEnableHooksErrorComponent = {
    /**
     * * `enable_hooks` - enable_hooks
     */
    attr: 'enable_hooks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsLabelsCreateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsLabelsCreateError = ({
    attr: 'non_field_errors';
} & ProjectsLabelsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ProjectsLabelsCreateNameErrorComponent) | ({
    attr: 'slug';
} & ProjectsLabelsCreateSlugErrorComponent) | ({
    attr: 'web';
} & ProjectsLabelsCreateWebErrorComponent) | ({
    attr: 'check_flags';
} & ProjectsLabelsCreateCheckFlagsErrorComponent) | ({
    attr: 'translation_review';
} & ProjectsLabelsCreateTranslationReviewErrorComponent) | ({
    attr: 'source_review';
} & ProjectsLabelsCreateSourceReviewErrorComponent) | ({
    attr: 'set_language_team';
} & ProjectsLabelsCreateSetLanguageTeamErrorComponent) | ({
    attr: 'instructions';
} & ProjectsLabelsCreateInstructionsErrorComponent) | ({
    attr: 'enable_hooks';
} & ProjectsLabelsCreateEnableHooksErrorComponent) | ({
    attr: 'language_aliases';
} & ProjectsLabelsCreateLanguageAliasesErrorComponent) | ({
    attr: 'secondary_language';
} & ProjectsLabelsCreateSecondaryLanguageErrorComponent) | ({
    attr: 'enforced_2fa';
} & ProjectsLabelsCreateEnforced2FaErrorComponent);

export type ProjectsLabelsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ProjectsLabelsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ProjectsLabelsCreateInstructionsErrorComponent = {
    /**
     * * `instructions` - instructions
     */
    attr: 'instructions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsLabelsCreateLanguageAliasesErrorComponent = {
    /**
     * * `language_aliases` - language_aliases
     */
    attr: 'language_aliases';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsLabelsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsLabelsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsLabelsCreateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ProjectsLabelsCreateSetLanguageTeamErrorComponent = {
    /**
     * * `set_language_team` - set_language_team
     */
    attr: 'set_language_team';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsLabelsCreateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsLabelsCreateSourceReviewErrorComponent = {
    /**
     * * `source_review` - source_review
     */
    attr: 'source_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsLabelsCreateTranslationReviewErrorComponent = {
    /**
     * * `translation_review` - translation_review
     */
    attr: 'translation_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsLabelsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ProjectsLabelsCreateError>;
};

export type ProjectsLabelsCreateWebErrorComponent = {
    /**
     * * `web` - web
     */
    attr: 'web';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsLabelsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsLanguagesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsMachinerySettingsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsPartialUpdateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsPartialUpdateEnableHooksErrorComponent = {
    /**
     * * `enable_hooks` - enable_hooks
     */
    attr: 'enable_hooks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsPartialUpdateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsPartialUpdateError = ({
    attr: 'non_field_errors';
} & ProjectsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ProjectsPartialUpdateNameErrorComponent) | ({
    attr: 'slug';
} & ProjectsPartialUpdateSlugErrorComponent) | ({
    attr: 'web';
} & ProjectsPartialUpdateWebErrorComponent) | ({
    attr: 'check_flags';
} & ProjectsPartialUpdateCheckFlagsErrorComponent) | ({
    attr: 'translation_review';
} & ProjectsPartialUpdateTranslationReviewErrorComponent) | ({
    attr: 'source_review';
} & ProjectsPartialUpdateSourceReviewErrorComponent) | ({
    attr: 'set_language_team';
} & ProjectsPartialUpdateSetLanguageTeamErrorComponent) | ({
    attr: 'instructions';
} & ProjectsPartialUpdateInstructionsErrorComponent) | ({
    attr: 'enable_hooks';
} & ProjectsPartialUpdateEnableHooksErrorComponent) | ({
    attr: 'language_aliases';
} & ProjectsPartialUpdateLanguageAliasesErrorComponent) | ({
    attr: 'secondary_language';
} & ProjectsPartialUpdateSecondaryLanguageErrorComponent) | ({
    attr: 'enforced_2fa';
} & ProjectsPartialUpdateEnforced2FaErrorComponent);

export type ProjectsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ProjectsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ProjectsPartialUpdateInstructionsErrorComponent = {
    /**
     * * `instructions` - instructions
     */
    attr: 'instructions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsPartialUpdateLanguageAliasesErrorComponent = {
    /**
     * * `language_aliases` - language_aliases
     */
    attr: 'language_aliases';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsPartialUpdateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ProjectsPartialUpdateSetLanguageTeamErrorComponent = {
    /**
     * * `set_language_team` - set_language_team
     */
    attr: 'set_language_team';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsPartialUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsPartialUpdateSourceReviewErrorComponent = {
    /**
     * * `source_review` - source_review
     */
    attr: 'source_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsPartialUpdateTranslationReviewErrorComponent = {
    /**
     * * `translation_review` - translation_review
     */
    attr: 'translation_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ProjectsPartialUpdateError>;
};

export type ProjectsPartialUpdateWebErrorComponent = {
    /**
     * * `web` - web
     */
    attr: 'web';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsRepositoryCreateError = ({
    attr: 'non_field_errors';
} & ProjectsRepositoryCreateNonFieldErrorsErrorComponent) | ({
    attr: 'operation';
} & ProjectsRepositoryCreateOperationErrorComponent);

export type ProjectsRepositoryCreateErrorResponse400 = ({
    type: 'validation_error';
} & ProjectsRepositoryCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ProjectsRepositoryCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsRepositoryCreateOperationErrorComponent = {
    /**
     * * `operation` - operation
     */
    attr: 'operation';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type ProjectsRepositoryCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ProjectsRepositoryCreateError>;
};

export type ProjectsRepositoryRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsStatisticsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ProjectsUpdateCheckFlagsErrorComponent = {
    /**
     * * `check_flags` - check_flags
     */
    attr: 'check_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsUpdateEnableHooksErrorComponent = {
    /**
     * * `enable_hooks` - enable_hooks
     */
    attr: 'enable_hooks';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsUpdateEnforced2FaErrorComponent = {
    /**
     * * `enforced_2fa` - enforced_2fa
     */
    attr: 'enforced_2fa';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsUpdateError = ({
    attr: 'non_field_errors';
} & ProjectsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ProjectsUpdateNameErrorComponent) | ({
    attr: 'slug';
} & ProjectsUpdateSlugErrorComponent) | ({
    attr: 'web';
} & ProjectsUpdateWebErrorComponent) | ({
    attr: 'check_flags';
} & ProjectsUpdateCheckFlagsErrorComponent) | ({
    attr: 'translation_review';
} & ProjectsUpdateTranslationReviewErrorComponent) | ({
    attr: 'source_review';
} & ProjectsUpdateSourceReviewErrorComponent) | ({
    attr: 'set_language_team';
} & ProjectsUpdateSetLanguageTeamErrorComponent) | ({
    attr: 'instructions';
} & ProjectsUpdateInstructionsErrorComponent) | ({
    attr: 'enable_hooks';
} & ProjectsUpdateEnableHooksErrorComponent) | ({
    attr: 'language_aliases';
} & ProjectsUpdateLanguageAliasesErrorComponent) | ({
    attr: 'secondary_language';
} & ProjectsUpdateSecondaryLanguageErrorComponent) | ({
    attr: 'enforced_2fa';
} & ProjectsUpdateEnforced2FaErrorComponent);

export type ProjectsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ProjectsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ProjectsUpdateInstructionsErrorComponent = {
    /**
     * * `instructions` - instructions
     */
    attr: 'instructions';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsUpdateLanguageAliasesErrorComponent = {
    /**
     * * `language_aliases` - language_aliases
     */
    attr: 'language_aliases';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ProjectsUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsUpdateSecondaryLanguageErrorComponent = {
    /**
     * * `secondary_language` - secondary_language
     */
    attr: 'secondary_language';
    /**
     * * `does_not_exist` - does_not_exist
     * * `incorrect_type` - incorrect_type
     */
    code: 'does_not_exist' | 'incorrect_type';
    detail: string;
};

export type ProjectsUpdateSetLanguageTeamErrorComponent = {
    /**
     * * `set_language_team` - set_language_team
     */
    attr: 'set_language_team';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsUpdateSlugErrorComponent = {
    /**
     * * `slug` - slug
     */
    attr: 'slug';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type ProjectsUpdateSourceReviewErrorComponent = {
    /**
     * * `source_review` - source_review
     */
    attr: 'source_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsUpdateTranslationReviewErrorComponent = {
    /**
     * * `translation_review` - translation_review
     */
    attr: 'translation_review';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ProjectsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ProjectsUpdateError>;
};

export type ProjectsUpdateWebErrorComponent = {
    /**
     * * `web` - web
     */
    attr: 'web';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type RepoRequest = {
    operation: OperationEnum;
};

export type Role = {
    readonly id: number;
    name: string;
    permissions: Array<string>;
    readonly url: string;
};

export type RolesCreateError = ({
    attr: 'non_field_errors';
} & RolesCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & RolesCreateNameErrorComponent) | ({
    attr: 'permissions';
} & RolesCreatePermissionsErrorComponent);

export type RolesCreateErrorResponse400 = ({
    type: 'validation_error';
} & RolesCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type RolesCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type RolesCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type RolesCreatePermissionsErrorComponent = {
    /**
     * * `permissions` - permissions
     */
    attr: 'permissions';
    /**
     * * `not_a_list` - not_a_list
     * * `null` - null
     * * `required` - required
     */
    code: 'not_a_list' | 'null' | 'required';
    detail: string;
};

export type RolesCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<RolesCreateError>;
};

export type RolesDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type RolesListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type RolesPartialUpdateError = ({
    attr: 'non_field_errors';
} & RolesPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & RolesPartialUpdateNameErrorComponent) | ({
    attr: 'permissions';
} & RolesPartialUpdatePermissionsErrorComponent);

export type RolesPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & RolesPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type RolesPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type RolesPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type RolesPartialUpdatePermissionsErrorComponent = {
    /**
     * * `permissions` - permissions
     */
    attr: 'permissions';
    /**
     * * `not_a_list` - not_a_list
     * * `null` - null
     * * `required` - required
     */
    code: 'not_a_list' | 'null' | 'required';
    detail: string;
};

export type RolesPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<RolesPartialUpdateError>;
};

export type RolesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type RolesUpdateError = ({
    attr: 'non_field_errors';
} & RolesUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & RolesUpdateNameErrorComponent) | ({
    attr: 'permissions';
} & RolesUpdatePermissionsErrorComponent);

export type RolesUpdateErrorResponse400 = ({
    type: 'validation_error';
} & RolesUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type RolesUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type RolesUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type RolesUpdatePermissionsErrorComponent = {
    /**
     * * `permissions` - permissions
     */
    attr: 'permissions';
    /**
     * * `not_a_list` - not_a_list
     * * `null` - null
     * * `required` - required
     */
    code: 'not_a_list' | 'null' | 'required';
    detail: string;
};

export type RolesUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<RolesUpdateError>;
};

/**
 * * `0` - All
 * * `10` - Watched
 * * `20` - Administered
 * * `30` - Project
 * * `40` - Component
 */
export type ScopeEnum = 0 | 10 | 20 | 30 | 40;

export type Screenshot = {
    readonly id: number;
    /**
     * Screenshot name
     */
    name: string;
    /**
     * Repository path to screenshot
     * Scan for screenshot file change on repository update.
     */
    repository_filename?: string;
    readonly translation: string;
    readonly file_url: string;
    readonly units: Array<string>;
    readonly url: string;
};

export type ScreenshotFile = {
    image: string;
};

export type ScreenshotsCreateError = ({
    attr: 'non_field_errors';
} & ScreenshotsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ScreenshotsCreateNameErrorComponent) | ({
    attr: 'repository_filename';
} & ScreenshotsCreateRepositoryFilenameErrorComponent);

export type ScreenshotsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ScreenshotsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ScreenshotsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ScreenshotsCreateRepositoryFilenameErrorComponent = {
    /**
     * * `repository_filename` - repository_filename
     */
    attr: 'repository_filename';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ScreenshotsCreateError>;
};

export type ScreenshotsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ScreenshotsFileCreateError = ({
    attr: 'non_field_errors';
} & ScreenshotsFileCreateNonFieldErrorsErrorComponent) | ({
    attr: 'image';
} & ScreenshotsFileCreateImageErrorComponent);

export type ScreenshotsFileCreateErrorResponse400 = ({
    type: 'validation_error';
} & ScreenshotsFileCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ScreenshotsFileCreateImageErrorComponent = {
    /**
     * * `image` - image
     */
    attr: 'image';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `invalid_image` - invalid_image
     * * `no_name` - no_name
     * * `null` - null
     * * `required` - required
     */
    code: 'empty' | 'invalid' | 'invalid_image' | 'no_name' | 'null' | 'required';
    detail: string;
};

export type ScreenshotsFileCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ScreenshotsFileCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ScreenshotsFileCreateError>;
};

export type ScreenshotsFileRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ScreenshotsFileUpdateError = ({
    attr: 'non_field_errors';
} & ScreenshotsFileUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'image';
} & ScreenshotsFileUpdateImageErrorComponent);

export type ScreenshotsFileUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ScreenshotsFileUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ScreenshotsFileUpdateImageErrorComponent = {
    /**
     * * `image` - image
     */
    attr: 'image';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `invalid_image` - invalid_image
     * * `no_name` - no_name
     * * `null` - null
     * * `required` - required
     */
    code: 'empty' | 'invalid' | 'invalid_image' | 'no_name' | 'null' | 'required';
    detail: string;
};

export type ScreenshotsFileUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ScreenshotsFileUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ScreenshotsFileUpdateError>;
};

export type ScreenshotsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ScreenshotsPartialUpdateError = ({
    attr: 'non_field_errors';
} & ScreenshotsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ScreenshotsPartialUpdateNameErrorComponent) | ({
    attr: 'repository_filename';
} & ScreenshotsPartialUpdateRepositoryFilenameErrorComponent);

export type ScreenshotsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ScreenshotsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ScreenshotsPartialUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ScreenshotsPartialUpdateRepositoryFilenameErrorComponent = {
    /**
     * * `repository_filename` - repository_filename
     */
    attr: 'repository_filename';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ScreenshotsPartialUpdateError>;
};

export type ScreenshotsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ScreenshotsUnitsCreateError = ({
    attr: 'non_field_errors';
} & ScreenshotsUnitsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ScreenshotsUnitsCreateNameErrorComponent) | ({
    attr: 'repository_filename';
} & ScreenshotsUnitsCreateRepositoryFilenameErrorComponent);

export type ScreenshotsUnitsCreateErrorResponse400 = ({
    type: 'validation_error';
} & ScreenshotsUnitsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ScreenshotsUnitsCreateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsUnitsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ScreenshotsUnitsCreateRepositoryFilenameErrorComponent = {
    /**
     * * `repository_filename` - repository_filename
     */
    attr: 'repository_filename';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsUnitsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ScreenshotsUnitsCreateError>;
};

export type ScreenshotsUnitsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type ScreenshotsUpdateError = ({
    attr: 'non_field_errors';
} & ScreenshotsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'name';
} & ScreenshotsUpdateNameErrorComponent) | ({
    attr: 'repository_filename';
} & ScreenshotsUpdateRepositoryFilenameErrorComponent);

export type ScreenshotsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & ScreenshotsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type ScreenshotsUpdateNameErrorComponent = {
    /**
     * * `name` - name
     */
    attr: 'name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type ScreenshotsUpdateRepositoryFilenameErrorComponent = {
    /**
     * * `repository_filename` - repository_filename
     */
    attr: 'repository_filename';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type ScreenshotsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<ScreenshotsUpdateError>;
};

export type SearchRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

/**
 * * `server_error` - Server Error
 */
export type ServerErrorEnum = 'server_error';

export type SingleServiceConfig = {
    service: string;
    configuration: {
        [key: string]: unknown;
    };
};

/**
 * * `0` - Default plural
 * * `1` - gettext plural formula
 * * `3` - CLDR plural with zero
 * * `4` - CLDR v38+ plural
 * * `5` - Android plural
 * * `6` - Qt Linguist plural
 * * `2` - Manually entered formula
 */
export type SourceEnum = 0 | 1 | 3 | 4 | 5 | 6 | 2;

/**
 * * `0` - Empty
 * * `10` - Needs editing
 * * `20` - Translated
 * * `30` - Approved
 * * `100` - Read-only
 */
export type StateEnum = 0 | 10 | 20 | 30 | 100;

export type TasksDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TasksRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type Translation = {
    language: Language;
    component: Component;
    language_code?: string;
    readonly id: number;
    filename: string;
    revision?: string;
    readonly web_url: string;
    readonly share_url: string;
    readonly translate_url: string;
    readonly url: string;
    readonly is_template: boolean;
    readonly is_source: boolean;
    readonly total: number;
    readonly total_words: number;
    readonly translated: number;
    readonly translated_words: number;
    readonly translated_percent: number;
    readonly fuzzy: number;
    readonly fuzzy_words: number;
    readonly fuzzy_percent: number;
    readonly failing_checks: number;
    readonly failing_checks_words: number;
    readonly failing_checks_percent: number;
    readonly have_suggestion: number;
    readonly have_comment: number;
    readonly last_change: string;
    readonly last_author: string;
    readonly repository_url: string;
    readonly file_url: string;
    readonly statistics_url: string;
    readonly changes_list_url: string;
    readonly units_list_url: string;
};

export type TranslationsAutotranslateCreateError = ({
    attr: 'non_field_errors';
} & TranslationsAutotranslateCreateNonFieldErrorsErrorComponent) | ({
    attr: 'language_code';
} & TranslationsAutotranslateCreateLanguageCodeErrorComponent) | ({
    attr: 'filename';
} & TranslationsAutotranslateCreateFilenameErrorComponent) | ({
    attr: 'revision';
} & TranslationsAutotranslateCreateRevisionErrorComponent);

export type TranslationsAutotranslateCreateErrorResponse400 = ({
    type: 'validation_error';
} & TranslationsAutotranslateCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type TranslationsAutotranslateCreateFilenameErrorComponent = {
    /**
     * * `filename` - filename
     */
    attr: 'filename';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsAutotranslateCreateLanguageCodeErrorComponent = {
    /**
     * * `language_code` - language_code
     */
    attr: 'language_code';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsAutotranslateCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type TranslationsAutotranslateCreateRevisionErrorComponent = {
    /**
     * * `revision` - revision
     */
    attr: 'revision';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsAutotranslateCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<TranslationsAutotranslateCreateError>;
};

export type TranslationsChangesRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TranslationsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TranslationsFileCreateAuthorEmailErrorComponent = {
    /**
     * * `author_email` - author_email
     */
    attr: 'author_email';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsFileCreateAuthorNameErrorComponent = {
    /**
     * * `author_name` - author_name
     */
    attr: 'author_name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsFileCreateConflictsErrorComponent = {
    /**
     * * `conflicts` - conflicts
     */
    attr: 'conflicts';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type TranslationsFileCreateError = ({
    attr: 'non_field_errors';
} & TranslationsFileCreateNonFieldErrorsErrorComponent) | ({
    attr: 'file';
} & TranslationsFileCreateFileErrorComponent) | ({
    attr: 'author_email';
} & TranslationsFileCreateAuthorEmailErrorComponent) | ({
    attr: 'author_name';
} & TranslationsFileCreateAuthorNameErrorComponent) | ({
    attr: 'method';
} & TranslationsFileCreateMethodErrorComponent) | ({
    attr: 'fuzzy';
} & TranslationsFileCreateFuzzyErrorComponent) | ({
    attr: 'conflicts';
} & TranslationsFileCreateConflictsErrorComponent);

export type TranslationsFileCreateErrorResponse400 = ({
    type: 'validation_error';
} & TranslationsFileCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type TranslationsFileCreateFileErrorComponent = {
    /**
     * * `file` - file
     */
    attr: 'file';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     * * `required` - required
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null' | 'required';
    detail: string;
};

export type TranslationsFileCreateFuzzyErrorComponent = {
    /**
     * * `fuzzy` - fuzzy
     */
    attr: 'fuzzy';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type TranslationsFileCreateMethodErrorComponent = {
    /**
     * * `method` - method
     */
    attr: 'method';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type TranslationsFileCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type TranslationsFileCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<TranslationsFileCreateError>;
};

export type TranslationsFileRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TranslationsFileUpdateAuthorEmailErrorComponent = {
    /**
     * * `author_email` - author_email
     */
    attr: 'author_email';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsFileUpdateAuthorNameErrorComponent = {
    /**
     * * `author_name` - author_name
     */
    attr: 'author_name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsFileUpdateConflictsErrorComponent = {
    /**
     * * `conflicts` - conflicts
     */
    attr: 'conflicts';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type TranslationsFileUpdateError = ({
    attr: 'non_field_errors';
} & TranslationsFileUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'file';
} & TranslationsFileUpdateFileErrorComponent) | ({
    attr: 'author_email';
} & TranslationsFileUpdateAuthorEmailErrorComponent) | ({
    attr: 'author_name';
} & TranslationsFileUpdateAuthorNameErrorComponent) | ({
    attr: 'method';
} & TranslationsFileUpdateMethodErrorComponent) | ({
    attr: 'fuzzy';
} & TranslationsFileUpdateFuzzyErrorComponent) | ({
    attr: 'conflicts';
} & TranslationsFileUpdateConflictsErrorComponent);

export type TranslationsFileUpdateErrorResponse400 = ({
    type: 'validation_error';
} & TranslationsFileUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type TranslationsFileUpdateFileErrorComponent = {
    /**
     * * `file` - file
     */
    attr: 'file';
    /**
     * * `empty` - empty
     * * `invalid` - invalid
     * * `no_name` - no_name
     * * `null` - null
     * * `required` - required
     */
    code: 'empty' | 'invalid' | 'no_name' | 'null' | 'required';
    detail: string;
};

export type TranslationsFileUpdateFuzzyErrorComponent = {
    /**
     * * `fuzzy` - fuzzy
     */
    attr: 'fuzzy';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type TranslationsFileUpdateMethodErrorComponent = {
    /**
     * * `method` - method
     */
    attr: 'method';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     */
    code: 'invalid_choice' | 'null';
    detail: string;
};

export type TranslationsFileUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type TranslationsFileUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<TranslationsFileUpdateError>;
};

export type TranslationsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TranslationsRepositoryCreateError = ({
    attr: 'non_field_errors';
} & TranslationsRepositoryCreateNonFieldErrorsErrorComponent) | ({
    attr: 'operation';
} & TranslationsRepositoryCreateOperationErrorComponent);

export type TranslationsRepositoryCreateErrorResponse400 = ({
    type: 'validation_error';
} & TranslationsRepositoryCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type TranslationsRepositoryCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type TranslationsRepositoryCreateOperationErrorComponent = {
    /**
     * * `operation` - operation
     */
    attr: 'operation';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type TranslationsRepositoryCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<TranslationsRepositoryCreateError>;
};

export type TranslationsRepositoryRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TranslationsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TranslationsStatisticsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type TranslationsUnitsCreateError = ({
    attr: 'non_field_errors';
} & TranslationsUnitsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'language_code';
} & TranslationsUnitsCreateLanguageCodeErrorComponent) | ({
    attr: 'filename';
} & TranslationsUnitsCreateFilenameErrorComponent) | ({
    attr: 'revision';
} & TranslationsUnitsCreateRevisionErrorComponent);

export type TranslationsUnitsCreateErrorResponse400 = ({
    type: 'validation_error';
} & TranslationsUnitsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type TranslationsUnitsCreateFilenameErrorComponent = {
    /**
     * * `filename` - filename
     */
    attr: 'filename';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsUnitsCreateLanguageCodeErrorComponent = {
    /**
     * * `language_code` - language_code
     */
    attr: 'language_code';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsUnitsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type TranslationsUnitsCreateRevisionErrorComponent = {
    /**
     * * `revision` - revision
     */
    attr: 'revision';
    /**
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type TranslationsUnitsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<TranslationsUnitsCreateError>;
};

export type TranslationsUnitsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type Unit = {
    readonly translation: string;
    readonly language_code: string;
    source: Array<string>;
    previous_source?: string;
    target: Array<string>;
    id_hash: number;
    readonly content_hash: number;
    location?: string;
    context?: string;
    note?: string;
    flags?: string;
    labels: Array<UnitLabels>;
    state?: StateEnum;
    readonly fuzzy: boolean;
    readonly translated: boolean;
    readonly approved: boolean;
    position: number;
    readonly has_suggestion: boolean;
    readonly has_comment: boolean;
    readonly has_failing_check: boolean;
    num_words?: number;
    readonly source_unit: string;
    priority?: number;
    readonly id: number;
    readonly web_url: string;
    readonly url: string;
    /**
     * Additional explanation to clarify meaning or usage of the string.
     */
    explanation?: string;
    /**
     * Translation flags
     * Additional comma-separated flags to influence Weblate behavior.
     */
    extra_flags?: string;
    readonly pending: boolean;
    readonly timestamp: string;
    readonly last_updated: string;
};

export type UnitFlatLabels = {
    readonly id: number;
    /**
     * Label name
     */
    name: string;
    /**
     * Label description
     */
    description?: string;
    color?: ColorEnum;
};

export type UnitLabels = {
    readonly id: number;
    /**
     * Label name
     */
    name: string;
    /**
     * Label description
     */
    description?: string;
    color?: ColorEnum;
};

/**
 * Serializer for updating source unit.
 */
export type UnitWrite = {
    target: Array<string>;
    state?: StateEnum;
    /**
     * Additional explanation to clarify meaning or usage of the string.
     */
    explanation?: string;
    /**
     * Translation flags
     * Additional comma-separated flags to influence Weblate behavior.
     */
    extra_flags?: string;
    labels: Array<UnitFlatLabels>;
};

export type UnitsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UnitsListErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UnitsPartialUpdateError = ({
    attr: 'non_field_errors';
} & UnitsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'target';
} & UnitsPartialUpdateTargetErrorComponent) | ({
    attr: 'target.INDEX';
} & UnitsPartialUpdateTargetIndexErrorComponent) | ({
    attr: 'state';
} & UnitsPartialUpdateStateErrorComponent) | ({
    attr: 'explanation';
} & UnitsPartialUpdateExplanationErrorComponent) | ({
    attr: 'extra_flags';
} & UnitsPartialUpdateExtraFlagsErrorComponent) | ({
    attr: 'labels';
} & UnitsPartialUpdateLabelsErrorComponent);

export type UnitsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & UnitsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UnitsPartialUpdateExplanationErrorComponent = {
    /**
     * * `explanation` - explanation
     */
    attr: 'explanation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UnitsPartialUpdateExtraFlagsErrorComponent = {
    /**
     * * `extra_flags` - extra_flags
     */
    attr: 'extra_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UnitsPartialUpdateLabelsErrorComponent = {
    /**
     * * `labels` - labels
     */
    attr: 'labels';
    /**
     * * `invalid` - invalid
     * * `not_a_list` - not_a_list
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid' | 'not_a_list' | 'null' | 'required';
    detail: string;
};

export type UnitsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UnitsPartialUpdateStateErrorComponent = {
    /**
     * * `state` - state
     */
    attr: 'state';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type UnitsPartialUpdateTargetErrorComponent = {
    /**
     * * `target` - target
     */
    attr: 'target';
    /**
     * * `not_a_list` - not_a_list
     * * `null` - null
     * * `required` - required
     */
    code: 'not_a_list' | 'null' | 'required';
    detail: string;
};

export type UnitsPartialUpdateTargetIndexErrorComponent = {
    /**
     * * `target.INDEX` - target.INDEX
     */
    attr: 'target.INDEX';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UnitsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UnitsPartialUpdateError>;
};

export type UnitsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UnitsTranslationsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UnitsUpdateError = ({
    attr: 'non_field_errors';
} & UnitsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'target';
} & UnitsUpdateTargetErrorComponent) | ({
    attr: 'target.INDEX';
} & UnitsUpdateTargetIndexErrorComponent) | ({
    attr: 'state';
} & UnitsUpdateStateErrorComponent) | ({
    attr: 'explanation';
} & UnitsUpdateExplanationErrorComponent) | ({
    attr: 'extra_flags';
} & UnitsUpdateExtraFlagsErrorComponent) | ({
    attr: 'labels';
} & UnitsUpdateLabelsErrorComponent);

export type UnitsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & UnitsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UnitsUpdateExplanationErrorComponent = {
    /**
     * * `explanation` - explanation
     */
    attr: 'explanation';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UnitsUpdateExtraFlagsErrorComponent = {
    /**
     * * `extra_flags` - extra_flags
     */
    attr: 'extra_flags';
    /**
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UnitsUpdateLabelsErrorComponent = {
    /**
     * * `labels` - labels
     */
    attr: 'labels';
    /**
     * * `invalid` - invalid
     * * `not_a_list` - not_a_list
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid' | 'not_a_list' | 'null' | 'required';
    detail: string;
};

export type UnitsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UnitsUpdateStateErrorComponent = {
    /**
     * * `state` - state
     */
    attr: 'state';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null';
    detail: string;
};

export type UnitsUpdateTargetErrorComponent = {
    /**
     * * `target` - target
     */
    attr: 'target';
    /**
     * * `not_a_list` - not_a_list
     * * `null` - null
     * * `required` - required
     */
    code: 'not_a_list' | 'null' | 'required';
    detail: string;
};

export type UnitsUpdateTargetIndexErrorComponent = {
    /**
     * * `target.INDEX` - target.INDEX
     */
    attr: 'target.INDEX';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UnitsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UnitsUpdateError>;
};

export type UploadRequest = {
    file: string;
    author_email?: string;
    author_name?: string;
    method?: MethodEnum;
    fuzzy?: FuzzyEnum | BlankEnum;
    conflicts?: ConflictsEnum | BlankEnum;
};

export type UsersCreateError = ({
    attr: 'non_field_errors';
} & UsersCreateNonFieldErrorsErrorComponent) | ({
    attr: 'full_name';
} & UsersCreateFullNameErrorComponent) | ({
    attr: 'username';
} & UsersCreateUsernameErrorComponent);

export type UsersCreateErrorResponse400 = ({
    type: 'validation_error';
} & UsersCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersCreateFullNameErrorComponent = {
    /**
     * * `full_name` - full_name
     */
    attr: 'full_name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UsersCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UsersCreateUsernameErrorComponent = {
    /**
     * * `username` - username
     */
    attr: 'username';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type UsersCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersCreateError>;
};

export type UsersDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UsersGroupsCreateError = ({
    attr: 'non_field_errors';
} & UsersGroupsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'full_name';
} & UsersGroupsCreateFullNameErrorComponent) | ({
    attr: 'username';
} & UsersGroupsCreateUsernameErrorComponent);

export type UsersGroupsCreateErrorResponse400 = ({
    type: 'validation_error';
} & UsersGroupsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersGroupsCreateFullNameErrorComponent = {
    /**
     * * `full_name` - full_name
     */
    attr: 'full_name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UsersGroupsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UsersGroupsCreateUsernameErrorComponent = {
    /**
     * * `username` - username
     */
    attr: 'username';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type UsersGroupsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersGroupsCreateError>;
};

export type UsersGroupsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UsersListError = ({
    attr: 'username';
} & UsersListUsernameErrorComponent) | ({
    attr: 'id';
} & UsersListIdErrorComponent);

export type UsersListErrorResponse400 = ({
    type: 'validation_error';
} & UsersListValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersListIdErrorComponent = {
    /**
     * * `id` - id
     */
    attr: 'id';
    /**
     * * `invalid` - invalid
     * * `max_value` - max_value
     */
    code: 'invalid' | 'max_value';
    detail: string;
};

export type UsersListUsernameErrorComponent = {
    /**
     * * `username` - username
     */
    attr: 'username';
    /**
     * * `null_characters_not_allowed` - null_characters_not_allowed
     */
    code: 'null_characters_not_allowed';
    detail: string;
};

export type UsersListValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersListError>;
};

export type UsersNotificationsCreateError = ({
    attr: 'non_field_errors';
} & UsersNotificationsCreateNonFieldErrorsErrorComponent) | ({
    attr: 'notification';
} & UsersNotificationsCreateNotificationErrorComponent) | ({
    attr: 'scope';
} & UsersNotificationsCreateScopeErrorComponent) | ({
    attr: 'frequency';
} & UsersNotificationsCreateFrequencyErrorComponent);

export type UsersNotificationsCreateErrorResponse400 = ({
    type: 'validation_error';
} & UsersNotificationsCreateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersNotificationsCreateFrequencyErrorComponent = {
    /**
     * * `frequency` - frequency
     */
    attr: 'frequency';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsCreateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UsersNotificationsCreateNotificationErrorComponent = {
    /**
     * * `notification` - notification
     */
    attr: 'notification';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsCreateScopeErrorComponent = {
    /**
     * * `scope` - scope
     */
    attr: 'scope';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsCreateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersNotificationsCreateError>;
};

export type UsersNotificationsDestroyErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UsersNotificationsListError = ({
    attr: 'username';
} & UsersNotificationsListUsernameErrorComponent) | ({
    attr: 'id';
} & UsersNotificationsListIdErrorComponent);

export type UsersNotificationsListErrorResponse400 = ({
    type: 'validation_error';
} & UsersNotificationsListValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersNotificationsListIdErrorComponent = {
    /**
     * * `id` - id
     */
    attr: 'id';
    /**
     * * `invalid` - invalid
     * * `max_value` - max_value
     */
    code: 'invalid' | 'max_value';
    detail: string;
};

export type UsersNotificationsListUsernameErrorComponent = {
    /**
     * * `username` - username
     */
    attr: 'username';
    /**
     * * `null_characters_not_allowed` - null_characters_not_allowed
     */
    code: 'null_characters_not_allowed';
    detail: string;
};

export type UsersNotificationsListValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersNotificationsListError>;
};

export type UsersNotificationsPartialUpdateError = ({
    attr: 'non_field_errors';
} & UsersNotificationsPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'notification';
} & UsersNotificationsPartialUpdateNotificationErrorComponent) | ({
    attr: 'scope';
} & UsersNotificationsPartialUpdateScopeErrorComponent) | ({
    attr: 'frequency';
} & UsersNotificationsPartialUpdateFrequencyErrorComponent);

export type UsersNotificationsPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & UsersNotificationsPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersNotificationsPartialUpdateFrequencyErrorComponent = {
    /**
     * * `frequency` - frequency
     */
    attr: 'frequency';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UsersNotificationsPartialUpdateNotificationErrorComponent = {
    /**
     * * `notification` - notification
     */
    attr: 'notification';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsPartialUpdateScopeErrorComponent = {
    /**
     * * `scope` - scope
     */
    attr: 'scope';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersNotificationsPartialUpdateError>;
};

export type UsersNotificationsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UsersNotificationsUpdateError = ({
    attr: 'non_field_errors';
} & UsersNotificationsUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'notification';
} & UsersNotificationsUpdateNotificationErrorComponent) | ({
    attr: 'scope';
} & UsersNotificationsUpdateScopeErrorComponent) | ({
    attr: 'frequency';
} & UsersNotificationsUpdateFrequencyErrorComponent);

export type UsersNotificationsUpdateErrorResponse400 = ({
    type: 'validation_error';
} & UsersNotificationsUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersNotificationsUpdateFrequencyErrorComponent = {
    /**
     * * `frequency` - frequency
     */
    attr: 'frequency';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UsersNotificationsUpdateNotificationErrorComponent = {
    /**
     * * `notification` - notification
     */
    attr: 'notification';
    /**
     * * `invalid_choice` - invalid_choice
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsUpdateScopeErrorComponent = {
    /**
     * * `scope` - scope
     */
    attr: 'scope';
    /**
     * * `invalid_choice` - invalid_choice
     * * `max_value` - max_value
     * * `min_value` - min_value
     * * `null` - null
     * * `required` - required
     */
    code: 'invalid_choice' | 'max_value' | 'min_value' | 'null' | 'required';
    detail: string;
};

export type UsersNotificationsUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersNotificationsUpdateError>;
};

export type UsersPartialUpdateError = ({
    attr: 'non_field_errors';
} & UsersPartialUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'full_name';
} & UsersPartialUpdateFullNameErrorComponent) | ({
    attr: 'username';
} & UsersPartialUpdateUsernameErrorComponent);

export type UsersPartialUpdateErrorResponse400 = ({
    type: 'validation_error';
} & UsersPartialUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersPartialUpdateFullNameErrorComponent = {
    /**
     * * `full_name` - full_name
     */
    attr: 'full_name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UsersPartialUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UsersPartialUpdateUsernameErrorComponent = {
    /**
     * * `username` - username
     */
    attr: 'username';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type UsersPartialUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersPartialUpdateError>;
};

export type UsersRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UsersStatisticsRetrieveErrorResponse400 = {
    type: 'client_error';
} & ParseErrorResponse;

export type UsersUpdateError = ({
    attr: 'non_field_errors';
} & UsersUpdateNonFieldErrorsErrorComponent) | ({
    attr: 'full_name';
} & UsersUpdateFullNameErrorComponent) | ({
    attr: 'username';
} & UsersUpdateUsernameErrorComponent);

export type UsersUpdateErrorResponse400 = ({
    type: 'validation_error';
} & UsersUpdateValidationError) | ({
    type: 'client_error';
} & ParseErrorResponse);

export type UsersUpdateFullNameErrorComponent = {
    /**
     * * `full_name` - full_name
     */
    attr: 'full_name';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed';
    detail: string;
};

export type UsersUpdateNonFieldErrorsErrorComponent = {
    /**
     * * `non_field_errors` - non_field_errors
     */
    attr: 'non_field_errors';
    /**
     * * `invalid` - invalid
     * * `null` - null
     */
    code: 'invalid' | 'null';
    detail: string;
};

export type UsersUpdateUsernameErrorComponent = {
    /**
     * * `username` - username
     */
    attr: 'username';
    /**
     * * `blank` - blank
     * * `invalid` - invalid
     * * `max_length` - max_length
     * * `null` - null
     * * `null_characters_not_allowed` - null_characters_not_allowed
     * * `required` - required
     * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
     * * `unique` - unique
     */
    code: 'blank' | 'invalid' | 'max_length' | 'null' | 'null_characters_not_allowed' | 'required' | 'surrogate_characters_not_allowed' | 'unique';
    detail: string;
};

export type UsersUpdateValidationError = {
    type: ValidationErrorEnum;
    errors: Array<UsersUpdateError>;
};

/**
 * * `validation_error` - Validation Error
 */
export type ValidationErrorEnum = 'validation_error';

/**
 * * `gerrit` - Gerrit
 * * `git` - Git
 * * `git-force-push` - Git with force push
 * * `local` - No remote repository
 * * `mercurial` - Mercurial
 * * `subversion` - Subversion
 */
export type VcsEnum = 'gerrit' | 'git' | 'git-force-push' | 'local' | 'mercurial' | 'subversion';

export type Patch200MessageResponseSerializer = {
    message: string;
};

export type Patch400ErrorMessageSerializer = {
    errors: string;
};

export type Post201MessageResponseSerializer = {
    message: string;
};

export type Post400ErrorMessageSerializer = {
    errors: string;
};

export type Put200MessageResponseSerializer = {
    message: string;
};

export type Put400ErrorMessageSerializer = {
    errors: string;
};

export type AddonsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/addons/';
};

export type AddonsListErrors = {
    400: AddonsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type AddonsListError = AddonsListErrors[keyof AddonsListErrors];

export type AddonsListResponses = {
    200: PaginatedAddonList;
};

export type AddonsListResponse = AddonsListResponses[keyof AddonsListResponses];

export type AddonsDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/addons/{id}/';
};

export type AddonsDestroyErrors = {
    400: AddonsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type AddonsDestroyError = AddonsDestroyErrors[keyof AddonsDestroyErrors];

export type AddonsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type AddonsDestroyResponse = AddonsDestroyResponses[keyof AddonsDestroyResponses];

export type AddonsRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/addons/{id}/';
};

export type AddonsRetrieveErrors = {
    400: AddonsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type AddonsRetrieveError = AddonsRetrieveErrors[keyof AddonsRetrieveErrors];

export type AddonsRetrieveResponses = {
    200: Addon;
};

export type AddonsRetrieveResponse = AddonsRetrieveResponses[keyof AddonsRetrieveResponses];

export type AddonsPartialUpdateData = {
    body?: PatchedAddon;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/addons/{id}/';
};

export type AddonsPartialUpdateErrors = {
    400: AddonsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type AddonsPartialUpdateError2 = AddonsPartialUpdateErrors[keyof AddonsPartialUpdateErrors];

export type AddonsPartialUpdateResponses = {
    200: Addon;
};

export type AddonsPartialUpdateResponse = AddonsPartialUpdateResponses[keyof AddonsPartialUpdateResponses];

export type AddonsUpdateData = {
    body: Addon;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/addons/{id}/';
};

export type AddonsUpdateErrors = {
    400: AddonsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type AddonsUpdateError2 = AddonsUpdateErrors[keyof AddonsUpdateErrors];

export type AddonsUpdateResponses = {
    200: Addon;
};

export type AddonsUpdateResponse = AddonsUpdateResponses[keyof AddonsUpdateResponses];

export type CategoriesListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/categories/';
};

export type CategoriesListErrors = {
    400: CategoriesListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type CategoriesListError = CategoriesListErrors[keyof CategoriesListErrors];

export type CategoriesListResponses = {
    200: PaginatedCategoryList;
};

export type CategoriesListResponse = CategoriesListResponses[keyof CategoriesListResponses];

export type CategoriesCreateData = {
    body: Category;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/categories/';
};

export type CategoriesCreateErrors = {
    400: CategoriesCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type CategoriesCreateError2 = CategoriesCreateErrors[keyof CategoriesCreateErrors];

export type CategoriesCreateResponses = {
    201: Category;
};

export type CategoriesCreateResponse = CategoriesCreateResponses[keyof CategoriesCreateResponses];

export type CategoriesDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/categories/{id}/';
};

export type CategoriesDestroyErrors = {
    400: CategoriesDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type CategoriesDestroyError = CategoriesDestroyErrors[keyof CategoriesDestroyErrors];

export type CategoriesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type CategoriesDestroyResponse = CategoriesDestroyResponses[keyof CategoriesDestroyResponses];

export type CategoriesRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/categories/{id}/';
};

export type CategoriesRetrieveErrors = {
    400: CategoriesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type CategoriesRetrieveError = CategoriesRetrieveErrors[keyof CategoriesRetrieveErrors];

export type CategoriesRetrieveResponses = {
    200: Category;
};

export type CategoriesRetrieveResponse = CategoriesRetrieveResponses[keyof CategoriesRetrieveResponses];

export type CategoriesPartialUpdateData = {
    body?: PatchedCategory;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/categories/{id}/';
};

export type CategoriesPartialUpdateErrors = {
    400: CategoriesPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type CategoriesPartialUpdateError2 = CategoriesPartialUpdateErrors[keyof CategoriesPartialUpdateErrors];

export type CategoriesPartialUpdateResponses = {
    200: Category;
};

export type CategoriesPartialUpdateResponse = CategoriesPartialUpdateResponses[keyof CategoriesPartialUpdateResponses];

export type CategoriesUpdateData = {
    body: Category;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/categories/{id}/';
};

export type CategoriesUpdateErrors = {
    400: CategoriesUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type CategoriesUpdateError2 = CategoriesUpdateErrors[keyof CategoriesUpdateErrors];

export type CategoriesUpdateResponses = {
    200: Category;
};

export type CategoriesUpdateResponse = CategoriesUpdateResponses[keyof CategoriesUpdateResponses];

export type CategoriesStatisticsRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json' | 'json-flat';
    };
    url: '/categories/{id}/statistics/';
};

export type CategoriesStatisticsRetrieveErrors = {
    400: CategoriesStatisticsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type CategoriesStatisticsRetrieveError = CategoriesStatisticsRetrieveErrors[keyof CategoriesStatisticsRetrieveErrors];

export type CategoriesStatisticsRetrieveResponses = {
    200: Category;
};

export type CategoriesStatisticsRetrieveResponse = CategoriesStatisticsRetrieveResponses[keyof CategoriesStatisticsRetrieveResponses];

export type ChangesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * * `0` - Resource updated
         * * `1` - Translation completed
         * * `2` - Translation changed
         * * `3` - Comment added
         * * `4` - Suggestion added
         * * `5` - Translation added
         * * `6` - Automatically translated
         * * `7` - Suggestion accepted
         * * `8` - Translation reverted
         * * `9` - Translation uploaded
         * * `13` - Source string added
         * * `14` - Component locked
         * * `15` - Component unlocked
         * * `17` - Changes committed
         * * `18` - Changes pushed
         * * `19` - Repository reset
         * * `20` - Repository merged
         * * `21` - Repository rebased
         * * `22` - Repository merge failed
         * * `23` - Repository rebase failed
         * * `24` - Parsing failed
         * * `25` - Translation removed
         * * `26` - Suggestion removed
         * * `27` - Translation replaced
         * * `28` - Repository push failed
         * * `29` - Suggestion removed during clean-up
         * * `30` - Source string changed
         * * `31` - String added
         * * `32` - Bulk status changed
         * * `33` - Visibility changed
         * * `34` - User added
         * * `35` - User removed
         * * `36` - Translation approved
         * * `37` - Marked for edit
         * * `38` - Component removed
         * * `39` - Project removed
         * * `41` - Project renamed
         * * `42` - Component renamed
         * * `43` - Moved component
         * * `45` - Contributor joined
         * * `46` - Announcement posted
         * * `47` - Alert triggered
         * * `48` - Language added
         * * `49` - Language requested
         * * `50` - Project created
         * * `51` - Component created
         * * `52` - User invited
         * * `53` - Repository notification received
         * * `54` - Translation replaced file by upload
         * * `55` - License changed
         * * `56` - Contributor license agreement changed
         * * `57` - Screenshot added
         * * `58` - Screenshot uploaded
         * * `59` - String updated in the repository
         * * `60` - Add-on installed
         * * `61` - Add-on configuration changed
         * * `62` - Add-on uninstalled
         * * `63` - String removed
         * * `64` - Comment removed
         * * `65` - Comment resolved
         * * `66` - Explanation updated
         * * `67` - Category removed
         * * `68` - Category renamed
         * * `69` - Category moved
         * * `70` - Saving string failed
         * * `71` - String added in the repository
         * * `72` - String updated in the upload
         * * `73` - String added in the upload
         * * `74` - Translation updated by source upload
         * * `75` - Component translation completed
         * * `76` - Applied enforced check
         * * `77` - Propagated change
         * * `78` - File uploaded
         * * `79` - Extra flags updated
         */
        action?: Array<0 | 1 | 13 | 14 | 15 | 17 | 18 | 19 | 2 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 3 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 4 | 41 | 42 | 43 | 45 | 46 | 47 | 48 | 49 | 5 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 6 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 7 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 8 | 9>;
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        timestamp_after?: string;
        timestamp_before?: string;
        user?: string;
    };
    url: '/changes/';
};

export type ChangesListErrors = {
    400: ChangesListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ChangesListError2 = ChangesListErrors[keyof ChangesListErrors];

export type ChangesListResponses = {
    200: PaginatedChangeList;
};

export type ChangesListResponse = ChangesListResponses[keyof ChangesListResponses];

export type ChangesRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/changes/{id}/';
};

export type ChangesRetrieveErrors = {
    400: ChangesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ChangesRetrieveError = ChangesRetrieveErrors[keyof ChangesRetrieveErrors];

export type ChangesRetrieveResponses = {
    200: Change;
};

export type ChangesRetrieveResponse = ChangesRetrieveResponses[keyof ChangesRetrieveResponses];

export type ComponentListsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/component-lists/';
};

export type ComponentListsListErrors = {
    400: ComponentListsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsListError = ComponentListsListErrors[keyof ComponentListsListErrors];

export type ComponentListsListResponses = {
    200: PaginatedComponentListList;
};

export type ComponentListsListResponse = ComponentListsListResponses[keyof ComponentListsListResponses];

export type ComponentListsCreateData = {
    body: ComponentList;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/';
};

export type ComponentListsCreateErrors = {
    400: ComponentListsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsCreateError2 = ComponentListsCreateErrors[keyof ComponentListsCreateErrors];

export type ComponentListsCreateResponses = {
    201: ComponentList;
};

export type ComponentListsCreateResponse = ComponentListsCreateResponses[keyof ComponentListsCreateResponses];

export type ComponentListsDestroyData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/{slug}/';
};

export type ComponentListsDestroyErrors = {
    400: ComponentListsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsDestroyError = ComponentListsDestroyErrors[keyof ComponentListsDestroyErrors];

export type ComponentListsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ComponentListsDestroyResponse = ComponentListsDestroyResponses[keyof ComponentListsDestroyResponses];

export type ComponentListsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/{slug}/';
};

export type ComponentListsRetrieveErrors = {
    400: ComponentListsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsRetrieveError = ComponentListsRetrieveErrors[keyof ComponentListsRetrieveErrors];

export type ComponentListsRetrieveResponses = {
    200: ComponentList;
};

export type ComponentListsRetrieveResponse = ComponentListsRetrieveResponses[keyof ComponentListsRetrieveResponses];

export type ComponentListsPartialUpdateData = {
    body?: PatchedComponentList;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/{slug}/';
};

export type ComponentListsPartialUpdateErrors = {
    400: ComponentListsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsPartialUpdateError2 = ComponentListsPartialUpdateErrors[keyof ComponentListsPartialUpdateErrors];

export type ComponentListsPartialUpdateResponses = {
    200: ComponentList;
};

export type ComponentListsPartialUpdateResponse = ComponentListsPartialUpdateResponses[keyof ComponentListsPartialUpdateResponses];

export type ComponentListsUpdateData = {
    body: ComponentList;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/{slug}/';
};

export type ComponentListsUpdateErrors = {
    400: ComponentListsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsUpdateError2 = ComponentListsUpdateErrors[keyof ComponentListsUpdateErrors];

export type ComponentListsUpdateResponses = {
    200: ComponentList;
};

export type ComponentListsUpdateResponse = ComponentListsUpdateResponses[keyof ComponentListsUpdateResponses];

export type ComponentListsComponentsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/{slug}/components/';
};

export type ComponentListsComponentsRetrieveErrors = {
    400: ComponentListsComponentsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsComponentsRetrieveError = ComponentListsComponentsRetrieveErrors[keyof ComponentListsComponentsRetrieveErrors];

export type ComponentListsComponentsRetrieveResponses = {
    200: ComponentList;
};

export type ComponentListsComponentsRetrieveResponse = ComponentListsComponentsRetrieveResponses[keyof ComponentListsComponentsRetrieveResponses];

export type ComponentListsComponentsCreateData = {
    body: ComponentList;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/{slug}/components/';
};

export type ComponentListsComponentsCreateErrors = {
    400: ComponentListsComponentsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsComponentsCreateError2 = ComponentListsComponentsCreateErrors[keyof ComponentListsComponentsCreateErrors];

export type ComponentListsComponentsCreateResponses = {
    200: ComponentList;
};

export type ComponentListsComponentsCreateResponse = ComponentListsComponentsCreateResponses[keyof ComponentListsComponentsCreateResponses];

export type ComponentListsComponentsDestroyData = {
    body?: never;
    path: {
        component_slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/component-lists/{slug}/components/{component_slug}/';
};

export type ComponentListsComponentsDestroyErrors = {
    400: ComponentListsComponentsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentListsComponentsDestroyError = ComponentListsComponentsDestroyErrors[keyof ComponentListsComponentsDestroyErrors];

export type ComponentListsComponentsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ComponentListsComponentsDestroyResponse = ComponentListsComponentsDestroyResponses[keyof ComponentListsComponentsDestroyResponses];

export type ComponentsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/components/';
};

export type ComponentsListErrors = {
    400: ComponentsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsListError = ComponentsListErrors[keyof ComponentsListErrors];

export type ComponentsListResponses = {
    200: PaginatedComponentList;
};

export type ComponentsListResponse = ComponentsListResponses[keyof ComponentsListResponses];

export type ComponentsDestroyData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/';
};

export type ComponentsDestroyErrors = {
    400: ComponentsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsDestroyError = ComponentsDestroyErrors[keyof ComponentsDestroyErrors];

export type ComponentsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ComponentsDestroyResponse = ComponentsDestroyResponses[keyof ComponentsDestroyResponses];

export type ComponentsRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/';
};

export type ComponentsRetrieveErrors = {
    400: ComponentsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsRetrieveError = ComponentsRetrieveErrors[keyof ComponentsRetrieveErrors];

export type ComponentsRetrieveResponses = {
    200: Component;
};

export type ComponentsRetrieveResponse = ComponentsRetrieveResponses[keyof ComponentsRetrieveResponses];

export type ComponentsPartialUpdateData = {
    body?: PatchedComponent;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/';
};

export type ComponentsPartialUpdateErrors = {
    400: ComponentsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsPartialUpdateError2 = ComponentsPartialUpdateErrors[keyof ComponentsPartialUpdateErrors];

export type ComponentsPartialUpdateResponses = {
    200: Component;
};

export type ComponentsPartialUpdateResponse = ComponentsPartialUpdateResponses[keyof ComponentsPartialUpdateResponses];

export type ComponentsUpdateData = {
    body: Component;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/';
};

export type ComponentsUpdateErrors = {
    400: ComponentsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsUpdateError2 = ComponentsUpdateErrors[keyof ComponentsUpdateErrors];

export type ComponentsUpdateResponses = {
    200: Component;
};

export type ComponentsUpdateResponse = ComponentsUpdateResponses[keyof ComponentsUpdateResponses];

export type ComponentsAddonsCreateData = {
    body: Component;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/addons/';
};

export type ComponentsAddonsCreateErrors = {
    400: ComponentsAddonsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsAddonsCreateError2 = ComponentsAddonsCreateErrors[keyof ComponentsAddonsCreateErrors];

export type ComponentsAddonsCreateResponses = {
    200: Component;
};

export type ComponentsAddonsCreateResponse = ComponentsAddonsCreateResponses[keyof ComponentsAddonsCreateResponses];

export type ComponentsChangesRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/changes/';
};

export type ComponentsChangesRetrieveErrors = {
    400: ComponentsChangesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsChangesRetrieveError = ComponentsChangesRetrieveErrors[keyof ComponentsChangesRetrieveErrors];

export type ComponentsChangesRetrieveResponses = {
    200: Component;
};

export type ComponentsChangesRetrieveResponse = ComponentsChangesRetrieveResponses[keyof ComponentsChangesRetrieveResponses];

export type ComponentsCreditsRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/credits/';
};

export type ComponentsCreditsRetrieveErrors = {
    400: ComponentsCreditsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsCreditsRetrieveError = ComponentsCreditsRetrieveErrors[keyof ComponentsCreditsRetrieveErrors];

export type ComponentsCreditsRetrieveResponses = {
    200: Component;
};

export type ComponentsCreditsRetrieveResponse = ComponentsCreditsRetrieveResponses[keyof ComponentsCreditsRetrieveResponses];

export type ComponentsFileRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/file/';
};

export type ComponentsFileRetrieveErrors = {
    400: ComponentsFileRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsFileRetrieveError = ComponentsFileRetrieveErrors[keyof ComponentsFileRetrieveErrors];

export type ComponentsFileRetrieveResponses = {
    200: Component;
};

export type ComponentsFileRetrieveResponse = ComponentsFileRetrieveResponses[keyof ComponentsFileRetrieveResponses];

export type ComponentsLinksRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/links/';
};

export type ComponentsLinksRetrieveErrors = {
    400: ComponentsLinksRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsLinksRetrieveError = ComponentsLinksRetrieveErrors[keyof ComponentsLinksRetrieveErrors];

export type ComponentsLinksRetrieveResponses = {
    200: Component;
};

export type ComponentsLinksRetrieveResponse = ComponentsLinksRetrieveResponses[keyof ComponentsLinksRetrieveResponses];

export type ComponentsLinksCreateData = {
    body: Component;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/links/';
};

export type ComponentsLinksCreateErrors = {
    400: ComponentsLinksCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsLinksCreateError2 = ComponentsLinksCreateErrors[keyof ComponentsLinksCreateErrors];

export type ComponentsLinksCreateResponses = {
    200: Component;
};

export type ComponentsLinksCreateResponse = ComponentsLinksCreateResponses[keyof ComponentsLinksCreateResponses];

export type ComponentsLinksDestroyData = {
    body?: never;
    path: {
        project__slug: string;
        project_slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/links/{project_slug}/';
};

export type ComponentsLinksDestroyErrors = {
    400: ComponentsLinksDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsLinksDestroyError = ComponentsLinksDestroyErrors[keyof ComponentsLinksDestroyErrors];

export type ComponentsLinksDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ComponentsLinksDestroyResponse = ComponentsLinksDestroyResponses[keyof ComponentsLinksDestroyResponses];

export type ComponentsLockRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/lock/';
};

export type ComponentsLockRetrieveErrors = {
    400: ComponentsLockRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsLockRetrieveError = ComponentsLockRetrieveErrors[keyof ComponentsLockRetrieveErrors];

export type ComponentsLockRetrieveResponses = {
    200: LockRequest;
};

export type ComponentsLockRetrieveResponse = ComponentsLockRetrieveResponses[keyof ComponentsLockRetrieveResponses];

export type ComponentsLockCreateData = {
    body: LockRequest;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/lock/';
};

export type ComponentsLockCreateErrors = {
    400: ComponentsLockCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsLockCreateError2 = ComponentsLockCreateErrors[keyof ComponentsLockCreateErrors];

export type ComponentsLockCreateResponses = {
    200: LockRequest;
};

export type ComponentsLockCreateResponse = ComponentsLockCreateResponses[keyof ComponentsLockCreateResponses];

export type ComponentsMonolingualBaseRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/monolingual_base/';
};

export type ComponentsMonolingualBaseRetrieveErrors = {
    400: ComponentsMonolingualBaseRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsMonolingualBaseRetrieveError = ComponentsMonolingualBaseRetrieveErrors[keyof ComponentsMonolingualBaseRetrieveErrors];

export type ComponentsMonolingualBaseRetrieveResponses = {
    200: Component;
};

export type ComponentsMonolingualBaseRetrieveResponse = ComponentsMonolingualBaseRetrieveResponses[keyof ComponentsMonolingualBaseRetrieveResponses];

export type ComponentsNewTemplateRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/new_template/';
};

export type ComponentsNewTemplateRetrieveErrors = {
    400: ComponentsNewTemplateRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsNewTemplateRetrieveError = ComponentsNewTemplateRetrieveErrors[keyof ComponentsNewTemplateRetrieveErrors];

export type ComponentsNewTemplateRetrieveResponses = {
    200: Component;
};

export type ComponentsNewTemplateRetrieveResponse = ComponentsNewTemplateRetrieveResponses[keyof ComponentsNewTemplateRetrieveResponses];

export type ComponentsRepositoryRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/repository/';
};

export type ComponentsRepositoryRetrieveErrors = {
    400: ComponentsRepositoryRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsRepositoryRetrieveError = ComponentsRepositoryRetrieveErrors[keyof ComponentsRepositoryRetrieveErrors];

export type ComponentsRepositoryRetrieveResponses = {
    200: RepoRequest;
};

export type ComponentsRepositoryRetrieveResponse = ComponentsRepositoryRetrieveResponses[keyof ComponentsRepositoryRetrieveResponses];

export type ComponentsRepositoryCreateData = {
    body: RepoRequest;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/repository/';
};

export type ComponentsRepositoryCreateErrors = {
    400: ComponentsRepositoryCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsRepositoryCreateError2 = ComponentsRepositoryCreateErrors[keyof ComponentsRepositoryCreateErrors];

export type ComponentsRepositoryCreateResponses = {
    200: RepoRequest;
};

export type ComponentsRepositoryCreateResponse = ComponentsRepositoryCreateResponses[keyof ComponentsRepositoryCreateResponses];

export type ComponentsScreenshotsRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/screenshots/';
};

export type ComponentsScreenshotsRetrieveErrors = {
    400: ComponentsScreenshotsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsScreenshotsRetrieveError = ComponentsScreenshotsRetrieveErrors[keyof ComponentsScreenshotsRetrieveErrors];

export type ComponentsScreenshotsRetrieveResponses = {
    200: Component;
};

export type ComponentsScreenshotsRetrieveResponse = ComponentsScreenshotsRetrieveResponses[keyof ComponentsScreenshotsRetrieveResponses];

export type ComponentsStatisticsRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json' | 'json-flat';
    };
    url: '/components/{project__slug}/{slug}/statistics/';
};

export type ComponentsStatisticsRetrieveErrors = {
    400: ComponentsStatisticsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsStatisticsRetrieveError = ComponentsStatisticsRetrieveErrors[keyof ComponentsStatisticsRetrieveErrors];

export type ComponentsStatisticsRetrieveResponses = {
    200: Component;
};

export type ComponentsStatisticsRetrieveResponse = ComponentsStatisticsRetrieveResponses[keyof ComponentsStatisticsRetrieveResponses];

export type ComponentsTranslationsRetrieveData = {
    body?: never;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/translations/';
};

export type ComponentsTranslationsRetrieveErrors = {
    400: ComponentsTranslationsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsTranslationsRetrieveError = ComponentsTranslationsRetrieveErrors[keyof ComponentsTranslationsRetrieveErrors];

export type ComponentsTranslationsRetrieveResponses = {
    200: Component;
};

export type ComponentsTranslationsRetrieveResponse = ComponentsTranslationsRetrieveResponses[keyof ComponentsTranslationsRetrieveResponses];

export type ComponentsTranslationsCreateData = {
    body: Component;
    path: {
        project__slug: string;
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/components/{project__slug}/{slug}/translations/';
};

export type ComponentsTranslationsCreateErrors = {
    400: ComponentsTranslationsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ComponentsTranslationsCreateError2 = ComponentsTranslationsCreateErrors[keyof ComponentsTranslationsCreateErrors];

export type ComponentsTranslationsCreateResponses = {
    200: Component;
};

export type ComponentsTranslationsCreateResponse = ComponentsTranslationsCreateResponses[keyof ComponentsTranslationsCreateResponses];

export type GroupsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/groups/';
};

export type GroupsListErrors = {
    400: GroupsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsListError = GroupsListErrors[keyof GroupsListErrors];

export type GroupsListResponses = {
    200: PaginatedGroupList;
};

export type GroupsListResponse = GroupsListResponses[keyof GroupsListResponses];

export type GroupsCreateData = {
    body: Group;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/';
};

export type GroupsCreateErrors = {
    400: GroupsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsCreateError2 = GroupsCreateErrors[keyof GroupsCreateErrors];

export type GroupsCreateResponses = {
    201: Group;
};

export type GroupsCreateResponse = GroupsCreateResponses[keyof GroupsCreateResponses];

export type GroupsDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/';
};

export type GroupsDestroyErrors = {
    400: GroupsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsDestroyError = GroupsDestroyErrors[keyof GroupsDestroyErrors];

export type GroupsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsDestroyResponse = GroupsDestroyResponses[keyof GroupsDestroyResponses];

export type GroupsRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/';
};

export type GroupsRetrieveErrors = {
    400: GroupsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsRetrieveError = GroupsRetrieveErrors[keyof GroupsRetrieveErrors];

export type GroupsRetrieveResponses = {
    200: Group;
};

export type GroupsRetrieveResponse = GroupsRetrieveResponses[keyof GroupsRetrieveResponses];

export type GroupsPartialUpdateData = {
    body?: PatchedGroup;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/';
};

export type GroupsPartialUpdateErrors = {
    400: GroupsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsPartialUpdateError2 = GroupsPartialUpdateErrors[keyof GroupsPartialUpdateErrors];

export type GroupsPartialUpdateResponses = {
    200: Group;
};

export type GroupsPartialUpdateResponse = GroupsPartialUpdateResponses[keyof GroupsPartialUpdateResponses];

export type GroupsUpdateData = {
    body: Group;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/';
};

export type GroupsUpdateErrors = {
    400: GroupsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsUpdateError2 = GroupsUpdateErrors[keyof GroupsUpdateErrors];

export type GroupsUpdateResponses = {
    200: Group;
};

export type GroupsUpdateResponse = GroupsUpdateResponses[keyof GroupsUpdateResponses];

export type GroupsAdminsCreateData = {
    body: Group;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/admins/';
};

export type GroupsAdminsCreateErrors = {
    400: GroupsAdminsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsAdminsCreateError2 = GroupsAdminsCreateErrors[keyof GroupsAdminsCreateErrors];

export type GroupsAdminsCreateResponses = {
    200: Group;
};

export type GroupsAdminsCreateResponse = GroupsAdminsCreateResponses[keyof GroupsAdminsCreateResponses];

export type GroupsAdminsDestroyData = {
    body?: never;
    path: {
        id: string;
        user_pk: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/admins/{user_pk}/';
};

export type GroupsAdminsDestroyErrors = {
    400: GroupsAdminsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsAdminsDestroyError = GroupsAdminsDestroyErrors[keyof GroupsAdminsDestroyErrors];

export type GroupsAdminsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsAdminsDestroyResponse = GroupsAdminsDestroyResponses[keyof GroupsAdminsDestroyResponses];

export type GroupsComponentlistsCreateData = {
    body: Group;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/componentlists/';
};

export type GroupsComponentlistsCreateErrors = {
    400: GroupsComponentlistsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsComponentlistsCreateError2 = GroupsComponentlistsCreateErrors[keyof GroupsComponentlistsCreateErrors];

export type GroupsComponentlistsCreateResponses = {
    200: Group;
};

export type GroupsComponentlistsCreateResponse = GroupsComponentlistsCreateResponses[keyof GroupsComponentlistsCreateResponses];

export type GroupsComponentlistsDestroyData = {
    body?: never;
    path: {
        component_list_id: string;
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/componentlists/{component_list_id}/';
};

export type GroupsComponentlistsDestroyErrors = {
    400: GroupsComponentlistsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsComponentlistsDestroyError = GroupsComponentlistsDestroyErrors[keyof GroupsComponentlistsDestroyErrors];

export type GroupsComponentlistsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsComponentlistsDestroyResponse = GroupsComponentlistsDestroyResponses[keyof GroupsComponentlistsDestroyResponses];

export type GroupsComponentsCreateData = {
    body: Group;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/components/';
};

export type GroupsComponentsCreateErrors = {
    400: GroupsComponentsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsComponentsCreateError2 = GroupsComponentsCreateErrors[keyof GroupsComponentsCreateErrors];

export type GroupsComponentsCreateResponses = {
    200: Group;
};

export type GroupsComponentsCreateResponse = GroupsComponentsCreateResponses[keyof GroupsComponentsCreateResponses];

export type GroupsComponentsDestroyData = {
    body?: never;
    path: {
        component_id: string;
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/components/{component_id}/';
};

export type GroupsComponentsDestroyErrors = {
    400: GroupsComponentsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsComponentsDestroyError = GroupsComponentsDestroyErrors[keyof GroupsComponentsDestroyErrors];

export type GroupsComponentsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsComponentsDestroyResponse = GroupsComponentsDestroyResponses[keyof GroupsComponentsDestroyResponses];

export type GroupsLanguagesCreateData = {
    body: Group;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/languages/';
};

export type GroupsLanguagesCreateErrors = {
    400: GroupsLanguagesCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsLanguagesCreateError2 = GroupsLanguagesCreateErrors[keyof GroupsLanguagesCreateErrors];

export type GroupsLanguagesCreateResponses = {
    200: Group;
};

export type GroupsLanguagesCreateResponse = GroupsLanguagesCreateResponses[keyof GroupsLanguagesCreateResponses];

export type GroupsLanguagesDestroyData = {
    body?: never;
    path: {
        id: string;
        language_code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/languages/{language_code}/';
};

export type GroupsLanguagesDestroyErrors = {
    400: GroupsLanguagesDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsLanguagesDestroyError = GroupsLanguagesDestroyErrors[keyof GroupsLanguagesDestroyErrors];

export type GroupsLanguagesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsLanguagesDestroyResponse = GroupsLanguagesDestroyResponses[keyof GroupsLanguagesDestroyResponses];

export type GroupsProjectsCreateData = {
    body: Group;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/projects/';
};

export type GroupsProjectsCreateErrors = {
    400: GroupsProjectsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsProjectsCreateError2 = GroupsProjectsCreateErrors[keyof GroupsProjectsCreateErrors];

export type GroupsProjectsCreateResponses = {
    200: Group;
};

export type GroupsProjectsCreateResponse = GroupsProjectsCreateResponses[keyof GroupsProjectsCreateResponses];

export type GroupsProjectsDestroyData = {
    body?: never;
    path: {
        id: string;
        project_id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/projects/{project_id}/';
};

export type GroupsProjectsDestroyErrors = {
    400: GroupsProjectsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsProjectsDestroyError = GroupsProjectsDestroyErrors[keyof GroupsProjectsDestroyErrors];

export type GroupsProjectsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsProjectsDestroyResponse = GroupsProjectsDestroyResponses[keyof GroupsProjectsDestroyResponses];

export type GroupsRolesCreateData = {
    body: Group;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/roles/';
};

export type GroupsRolesCreateErrors = {
    400: GroupsRolesCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsRolesCreateError2 = GroupsRolesCreateErrors[keyof GroupsRolesCreateErrors];

export type GroupsRolesCreateResponses = {
    200: Group;
};

export type GroupsRolesCreateResponse = GroupsRolesCreateResponses[keyof GroupsRolesCreateResponses];

export type GroupsRolesDestroyData = {
    body?: never;
    path: {
        id: string;
        role_id: number;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/groups/{id}/roles/{role_id}/';
};

export type GroupsRolesDestroyErrors = {
    400: GroupsRolesDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type GroupsRolesDestroyError = GroupsRolesDestroyErrors[keyof GroupsRolesDestroyErrors];

export type GroupsRolesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsRolesDestroyResponse = GroupsRolesDestroyResponses[keyof GroupsRolesDestroyResponses];

export type LanguagesListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/languages/';
};

export type LanguagesListErrors = {
    400: LanguagesListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type LanguagesListError = LanguagesListErrors[keyof LanguagesListErrors];

export type LanguagesListResponses = {
    200: PaginatedLanguageList;
};

export type LanguagesListResponse = LanguagesListResponses[keyof LanguagesListResponses];

export type LanguagesCreateData = {
    body: Language;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/languages/';
};

export type LanguagesCreateErrors = {
    400: LanguagesCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type LanguagesCreateError2 = LanguagesCreateErrors[keyof LanguagesCreateErrors];

export type LanguagesCreateResponses = {
    201: Language;
};

export type LanguagesCreateResponse = LanguagesCreateResponses[keyof LanguagesCreateResponses];

export type LanguagesDestroyData = {
    body?: never;
    path: {
        code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/languages/{code}/';
};

export type LanguagesDestroyErrors = {
    400: LanguagesDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type LanguagesDestroyError = LanguagesDestroyErrors[keyof LanguagesDestroyErrors];

export type LanguagesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type LanguagesDestroyResponse = LanguagesDestroyResponses[keyof LanguagesDestroyResponses];

export type LanguagesRetrieveData = {
    body?: never;
    path: {
        code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/languages/{code}/';
};

export type LanguagesRetrieveErrors = {
    400: LanguagesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type LanguagesRetrieveError = LanguagesRetrieveErrors[keyof LanguagesRetrieveErrors];

export type LanguagesRetrieveResponses = {
    200: Language;
};

export type LanguagesRetrieveResponse = LanguagesRetrieveResponses[keyof LanguagesRetrieveResponses];

export type LanguagesPartialUpdateData = {
    body?: PatchedLanguage;
    path: {
        code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/languages/{code}/';
};

export type LanguagesPartialUpdateErrors = {
    400: LanguagesPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type LanguagesPartialUpdateError2 = LanguagesPartialUpdateErrors[keyof LanguagesPartialUpdateErrors];

export type LanguagesPartialUpdateResponses = {
    200: Language;
};

export type LanguagesPartialUpdateResponse = LanguagesPartialUpdateResponses[keyof LanguagesPartialUpdateResponses];

export type LanguagesUpdateData = {
    body: Language;
    path: {
        code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/languages/{code}/';
};

export type LanguagesUpdateErrors = {
    400: LanguagesUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type LanguagesUpdateError2 = LanguagesUpdateErrors[keyof LanguagesUpdateErrors];

export type LanguagesUpdateResponses = {
    200: Language;
};

export type LanguagesUpdateResponse = LanguagesUpdateResponses[keyof LanguagesUpdateResponses];

export type LanguagesStatisticsRetrieveData = {
    body?: never;
    path: {
        code: string;
    };
    query?: {
        format?: 'csv' | 'json' | 'json-flat';
    };
    url: '/languages/{code}/statistics/';
};

export type LanguagesStatisticsRetrieveErrors = {
    400: LanguagesStatisticsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type LanguagesStatisticsRetrieveError = LanguagesStatisticsRetrieveErrors[keyof LanguagesStatisticsRetrieveErrors];

export type LanguagesStatisticsRetrieveResponses = {
    200: Language;
};

export type LanguagesStatisticsRetrieveResponse = LanguagesStatisticsRetrieveResponses[keyof LanguagesStatisticsRetrieveResponses];

export type MemoryListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/memory/';
};

export type MemoryListErrors = {
    400: MemoryListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type MemoryListError = MemoryListErrors[keyof MemoryListErrors];

export type MemoryListResponses = {
    200: PaginatedMemoryList;
};

export type MemoryListResponse = MemoryListResponses[keyof MemoryListResponses];

export type MemoryCreateData = {
    body: Memory;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/memory/';
};

export type MemoryCreateErrors = {
    400: MemoryCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type MemoryCreateError2 = MemoryCreateErrors[keyof MemoryCreateErrors];

export type MemoryCreateResponses = {
    201: Memory;
};

export type MemoryCreateResponse = MemoryCreateResponses[keyof MemoryCreateResponses];

export type MemoryDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/memory/{id}/';
};

export type MemoryDestroyErrors = {
    400: MemoryDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type MemoryDestroyError = MemoryDestroyErrors[keyof MemoryDestroyErrors];

export type MemoryDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type MemoryDestroyResponse = MemoryDestroyResponses[keyof MemoryDestroyResponses];

export type MemoryRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/memory/{id}/';
};

export type MemoryRetrieveErrors = {
    400: MemoryRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type MemoryRetrieveError = MemoryRetrieveErrors[keyof MemoryRetrieveErrors];

export type MemoryRetrieveResponses = {
    200: Memory;
};

export type MemoryRetrieveResponse = MemoryRetrieveResponses[keyof MemoryRetrieveResponses];

export type MemoryPartialUpdateData = {
    body?: PatchedMemory;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/memory/{id}/';
};

export type MemoryPartialUpdateErrors = {
    400: MemoryPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type MemoryPartialUpdateError2 = MemoryPartialUpdateErrors[keyof MemoryPartialUpdateErrors];

export type MemoryPartialUpdateResponses = {
    200: Memory;
};

export type MemoryPartialUpdateResponse = MemoryPartialUpdateResponses[keyof MemoryPartialUpdateResponses];

export type MemoryUpdateData = {
    body: Memory;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/memory/{id}/';
};

export type MemoryUpdateErrors = {
    400: MemoryUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type MemoryUpdateError2 = MemoryUpdateErrors[keyof MemoryUpdateErrors];

export type MemoryUpdateResponses = {
    200: Memory;
};

export type MemoryUpdateResponse = MemoryUpdateResponses[keyof MemoryUpdateResponses];

export type MetricsRetrieveData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json' | 'openmetrics';
    };
    url: '/metrics/';
};

export type MetricsRetrieveErrors = {
    400: MetricsRetrieveErrorResponse400;
    401: ErrorResponse401;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type MetricsRetrieveError = MetricsRetrieveErrors[keyof MetricsRetrieveErrors];

export type MetricsRetrieveResponses = {
    200: Metrics;
};

export type MetricsRetrieveResponse = MetricsRetrieveResponses[keyof MetricsRetrieveResponses];

export type ProjectsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/projects/';
};

export type ProjectsListErrors = {
    400: ProjectsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsListError = ProjectsListErrors[keyof ProjectsListErrors];

export type ProjectsListResponses = {
    200: PaginatedProjectList;
};

export type ProjectsListResponse = ProjectsListResponses[keyof ProjectsListResponses];

export type ProjectsCreateData = {
    body: Project;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/';
};

export type ProjectsCreateErrors = {
    400: ProjectsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsCreateError2 = ProjectsCreateErrors[keyof ProjectsCreateErrors];

export type ProjectsCreateResponses = {
    201: Project;
};

export type ProjectsCreateResponse = ProjectsCreateResponses[keyof ProjectsCreateResponses];

export type ProjectsDestroyData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/';
};

export type ProjectsDestroyErrors = {
    400: ProjectsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsDestroyError = ProjectsDestroyErrors[keyof ProjectsDestroyErrors];

export type ProjectsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ProjectsDestroyResponse = ProjectsDestroyResponses[keyof ProjectsDestroyResponses];

export type ProjectsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/';
};

export type ProjectsRetrieveErrors = {
    400: ProjectsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsRetrieveError = ProjectsRetrieveErrors[keyof ProjectsRetrieveErrors];

export type ProjectsRetrieveResponses = {
    200: Project;
};

export type ProjectsRetrieveResponse = ProjectsRetrieveResponses[keyof ProjectsRetrieveResponses];

export type ProjectsPartialUpdateData = {
    body?: PatchedProject;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/';
};

export type ProjectsPartialUpdateErrors = {
    400: ProjectsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsPartialUpdateError2 = ProjectsPartialUpdateErrors[keyof ProjectsPartialUpdateErrors];

export type ProjectsPartialUpdateResponses = {
    200: Project;
};

export type ProjectsPartialUpdateResponse = ProjectsPartialUpdateResponses[keyof ProjectsPartialUpdateResponses];

export type ProjectsUpdateData = {
    body: Project;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/';
};

export type ProjectsUpdateErrors = {
    400: ProjectsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsUpdateError2 = ProjectsUpdateErrors[keyof ProjectsUpdateErrors];

export type ProjectsUpdateResponses = {
    200: Project;
};

export type ProjectsUpdateResponse = ProjectsUpdateResponses[keyof ProjectsUpdateResponses];

export type ProjectsAddonsCreateData = {
    body: Project;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/addons/';
};

export type ProjectsAddonsCreateErrors = {
    400: ProjectsAddonsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsAddonsCreateError2 = ProjectsAddonsCreateErrors[keyof ProjectsAddonsCreateErrors];

export type ProjectsAddonsCreateResponses = {
    200: Project;
};

export type ProjectsAddonsCreateResponse = ProjectsAddonsCreateResponses[keyof ProjectsAddonsCreateResponses];

export type ProjectsCategoriesRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/categories/';
};

export type ProjectsCategoriesRetrieveErrors = {
    400: ProjectsCategoriesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsCategoriesRetrieveError = ProjectsCategoriesRetrieveErrors[keyof ProjectsCategoriesRetrieveErrors];

export type ProjectsCategoriesRetrieveResponses = {
    200: Project;
};

export type ProjectsCategoriesRetrieveResponse = ProjectsCategoriesRetrieveResponses[keyof ProjectsCategoriesRetrieveResponses];

export type ProjectsChangesRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/changes/';
};

export type ProjectsChangesRetrieveErrors = {
    400: ProjectsChangesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsChangesRetrieveError = ProjectsChangesRetrieveErrors[keyof ProjectsChangesRetrieveErrors];

export type ProjectsChangesRetrieveResponses = {
    200: Project;
};

export type ProjectsChangesRetrieveResponse = ProjectsChangesRetrieveResponses[keyof ProjectsChangesRetrieveResponses];

export type ProjectsComponentsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/components/';
};

export type ProjectsComponentsRetrieveErrors = {
    400: ProjectsComponentsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsComponentsRetrieveError = ProjectsComponentsRetrieveErrors[keyof ProjectsComponentsRetrieveErrors];

export type ProjectsComponentsRetrieveResponses = {
    200: Component;
};

export type ProjectsComponentsRetrieveResponse = ProjectsComponentsRetrieveResponses[keyof ProjectsComponentsRetrieveResponses];

export type ProjectsComponentsCreateData = {
    body: Component;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/components/';
};

export type ProjectsComponentsCreateErrors = {
    400: ProjectsComponentsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsComponentsCreateError2 = ProjectsComponentsCreateErrors[keyof ProjectsComponentsCreateErrors];

export type ProjectsComponentsCreateResponses = {
    200: Component;
};

export type ProjectsComponentsCreateResponse = ProjectsComponentsCreateResponses[keyof ProjectsComponentsCreateResponses];

export type ProjectsCreditsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/credits/';
};

export type ProjectsCreditsRetrieveErrors = {
    400: ProjectsCreditsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsCreditsRetrieveError = ProjectsCreditsRetrieveErrors[keyof ProjectsCreditsRetrieveErrors];

export type ProjectsCreditsRetrieveResponses = {
    200: Project;
};

export type ProjectsCreditsRetrieveResponse = ProjectsCreditsRetrieveResponses[keyof ProjectsCreditsRetrieveResponses];

export type ProjectsFileRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/file/';
};

export type ProjectsFileRetrieveErrors = {
    400: ProjectsFileRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsFileRetrieveError = ProjectsFileRetrieveErrors[keyof ProjectsFileRetrieveErrors];

export type ProjectsFileRetrieveResponses = {
    200: Project;
};

export type ProjectsFileRetrieveResponse = ProjectsFileRetrieveResponses[keyof ProjectsFileRetrieveResponses];

export type ProjectsLabelsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/labels/';
};

export type ProjectsLabelsRetrieveErrors = {
    400: ProjectsLabelsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsLabelsRetrieveError = ProjectsLabelsRetrieveErrors[keyof ProjectsLabelsRetrieveErrors];

export type ProjectsLabelsRetrieveResponses = {
    200: Project;
};

export type ProjectsLabelsRetrieveResponse = ProjectsLabelsRetrieveResponses[keyof ProjectsLabelsRetrieveResponses];

export type ProjectsLabelsCreateData = {
    body: Project;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/labels/';
};

export type ProjectsLabelsCreateErrors = {
    400: ProjectsLabelsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsLabelsCreateError2 = ProjectsLabelsCreateErrors[keyof ProjectsLabelsCreateErrors];

export type ProjectsLabelsCreateResponses = {
    200: Project;
};

export type ProjectsLabelsCreateResponse = ProjectsLabelsCreateResponses[keyof ProjectsLabelsCreateResponses];

export type ProjectsLanguagesRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json' | 'json-flat';
    };
    url: '/projects/{slug}/languages/';
};

export type ProjectsLanguagesRetrieveErrors = {
    400: ProjectsLanguagesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsLanguagesRetrieveError = ProjectsLanguagesRetrieveErrors[keyof ProjectsLanguagesRetrieveErrors];

export type ProjectsLanguagesRetrieveResponses = {
    200: Project;
};

export type ProjectsLanguagesRetrieveResponse = ProjectsLanguagesRetrieveResponses[keyof ProjectsLanguagesRetrieveResponses];

export type ProjectsMachinerySettingsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/machinery_settings/';
};

export type ProjectsMachinerySettingsRetrieveErrors = {
    400: ProjectsMachinerySettingsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsMachinerySettingsRetrieveError = ProjectsMachinerySettingsRetrieveErrors[keyof ProjectsMachinerySettingsRetrieveErrors];

export type ProjectsMachinerySettingsRetrieveResponses = {
    200: ProjectMachinerySettings;
};

export type ProjectsMachinerySettingsRetrieveResponse = ProjectsMachinerySettingsRetrieveResponses[keyof ProjectsMachinerySettingsRetrieveResponses];

export type ProjectsMachinerySettingsPartialUpdateData = {
    body?: PatchedSingleServiceConfig;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/machinery_settings/';
};

export type ProjectsMachinerySettingsPartialUpdateErrors = {
    400: Patch400ErrorMessageSerializer;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsMachinerySettingsPartialUpdateError = ProjectsMachinerySettingsPartialUpdateErrors[keyof ProjectsMachinerySettingsPartialUpdateErrors];

export type ProjectsMachinerySettingsPartialUpdateResponses = {
    200: Patch200MessageResponseSerializer;
};

export type ProjectsMachinerySettingsPartialUpdateResponse = ProjectsMachinerySettingsPartialUpdateResponses[keyof ProjectsMachinerySettingsPartialUpdateResponses];

export type ProjectsMachinerySettingsCreateData = {
    body: SingleServiceConfig;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/machinery_settings/';
};

export type ProjectsMachinerySettingsCreateErrors = {
    400: Post400ErrorMessageSerializer;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsMachinerySettingsCreateError = ProjectsMachinerySettingsCreateErrors[keyof ProjectsMachinerySettingsCreateErrors];

export type ProjectsMachinerySettingsCreateResponses = {
    201: Post201MessageResponseSerializer;
};

export type ProjectsMachinerySettingsCreateResponse = ProjectsMachinerySettingsCreateResponses[keyof ProjectsMachinerySettingsCreateResponses];

export type ProjectsMachinerySettingsUpdateData = {
    body?: ProjectMachinerySettings;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/machinery_settings/';
};

export type ProjectsMachinerySettingsUpdateErrors = {
    400: Put400ErrorMessageSerializer;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsMachinerySettingsUpdateError = ProjectsMachinerySettingsUpdateErrors[keyof ProjectsMachinerySettingsUpdateErrors];

export type ProjectsMachinerySettingsUpdateResponses = {
    200: Put200MessageResponseSerializer;
};

export type ProjectsMachinerySettingsUpdateResponse = ProjectsMachinerySettingsUpdateResponses[keyof ProjectsMachinerySettingsUpdateResponses];

export type ProjectsRepositoryRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/repository/';
};

export type ProjectsRepositoryRetrieveErrors = {
    400: ProjectsRepositoryRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsRepositoryRetrieveError = ProjectsRepositoryRetrieveErrors[keyof ProjectsRepositoryRetrieveErrors];

export type ProjectsRepositoryRetrieveResponses = {
    200: RepoRequest;
};

export type ProjectsRepositoryRetrieveResponse = ProjectsRepositoryRetrieveResponses[keyof ProjectsRepositoryRetrieveResponses];

export type ProjectsRepositoryCreateData = {
    body: RepoRequest;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/projects/{slug}/repository/';
};

export type ProjectsRepositoryCreateErrors = {
    400: ProjectsRepositoryCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsRepositoryCreateError2 = ProjectsRepositoryCreateErrors[keyof ProjectsRepositoryCreateErrors];

export type ProjectsRepositoryCreateResponses = {
    200: RepoRequest;
};

export type ProjectsRepositoryCreateResponse = ProjectsRepositoryCreateResponses[keyof ProjectsRepositoryCreateResponses];

export type ProjectsStatisticsRetrieveData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: {
        format?: 'csv' | 'json' | 'json-flat';
    };
    url: '/projects/{slug}/statistics/';
};

export type ProjectsStatisticsRetrieveErrors = {
    400: ProjectsStatisticsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ProjectsStatisticsRetrieveError = ProjectsStatisticsRetrieveErrors[keyof ProjectsStatisticsRetrieveErrors];

export type ProjectsStatisticsRetrieveResponses = {
    200: Project;
};

export type ProjectsStatisticsRetrieveResponse = ProjectsStatisticsRetrieveResponses[keyof ProjectsStatisticsRetrieveResponses];

export type RolesListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/roles/';
};

export type RolesListErrors = {
    400: RolesListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type RolesListError = RolesListErrors[keyof RolesListErrors];

export type RolesListResponses = {
    200: PaginatedRoleList;
};

export type RolesListResponse = RolesListResponses[keyof RolesListResponses];

export type RolesCreateData = {
    body: Role;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/roles/';
};

export type RolesCreateErrors = {
    400: RolesCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type RolesCreateError2 = RolesCreateErrors[keyof RolesCreateErrors];

export type RolesCreateResponses = {
    201: Role;
};

export type RolesCreateResponse = RolesCreateResponses[keyof RolesCreateResponses];

export type RolesDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/roles/{id}/';
};

export type RolesDestroyErrors = {
    400: RolesDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type RolesDestroyError = RolesDestroyErrors[keyof RolesDestroyErrors];

export type RolesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type RolesDestroyResponse = RolesDestroyResponses[keyof RolesDestroyResponses];

export type RolesRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/roles/{id}/';
};

export type RolesRetrieveErrors = {
    400: RolesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type RolesRetrieveError = RolesRetrieveErrors[keyof RolesRetrieveErrors];

export type RolesRetrieveResponses = {
    200: Role;
};

export type RolesRetrieveResponse = RolesRetrieveResponses[keyof RolesRetrieveResponses];

export type RolesPartialUpdateData = {
    body?: PatchedRole;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/roles/{id}/';
};

export type RolesPartialUpdateErrors = {
    400: RolesPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type RolesPartialUpdateError2 = RolesPartialUpdateErrors[keyof RolesPartialUpdateErrors];

export type RolesPartialUpdateResponses = {
    200: Role;
};

export type RolesPartialUpdateResponse = RolesPartialUpdateResponses[keyof RolesPartialUpdateResponses];

export type RolesUpdateData = {
    body: Role;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/roles/{id}/';
};

export type RolesUpdateErrors = {
    400: RolesUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type RolesUpdateError2 = RolesUpdateErrors[keyof RolesUpdateErrors];

export type RolesUpdateResponses = {
    200: Role;
};

export type RolesUpdateResponse = RolesUpdateResponses[keyof RolesUpdateResponses];

export type ScreenshotsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/screenshots/';
};

export type ScreenshotsListErrors = {
    400: ScreenshotsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsListError = ScreenshotsListErrors[keyof ScreenshotsListErrors];

export type ScreenshotsListResponses = {
    200: PaginatedScreenshotList;
};

export type ScreenshotsListResponse = ScreenshotsListResponses[keyof ScreenshotsListResponses];

export type ScreenshotsCreateData = {
    body: Screenshot;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/';
};

export type ScreenshotsCreateErrors = {
    400: ScreenshotsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsCreateError2 = ScreenshotsCreateErrors[keyof ScreenshotsCreateErrors];

export type ScreenshotsCreateResponses = {
    201: Screenshot;
};

export type ScreenshotsCreateResponse = ScreenshotsCreateResponses[keyof ScreenshotsCreateResponses];

export type ScreenshotsDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/';
};

export type ScreenshotsDestroyErrors = {
    400: ScreenshotsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsDestroyError = ScreenshotsDestroyErrors[keyof ScreenshotsDestroyErrors];

export type ScreenshotsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ScreenshotsDestroyResponse = ScreenshotsDestroyResponses[keyof ScreenshotsDestroyResponses];

export type ScreenshotsRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/';
};

export type ScreenshotsRetrieveErrors = {
    400: ScreenshotsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsRetrieveError = ScreenshotsRetrieveErrors[keyof ScreenshotsRetrieveErrors];

export type ScreenshotsRetrieveResponses = {
    200: Screenshot;
};

export type ScreenshotsRetrieveResponse = ScreenshotsRetrieveResponses[keyof ScreenshotsRetrieveResponses];

export type ScreenshotsPartialUpdateData = {
    body?: PatchedScreenshot;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/';
};

export type ScreenshotsPartialUpdateErrors = {
    400: ScreenshotsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsPartialUpdateError2 = ScreenshotsPartialUpdateErrors[keyof ScreenshotsPartialUpdateErrors];

export type ScreenshotsPartialUpdateResponses = {
    200: Screenshot;
};

export type ScreenshotsPartialUpdateResponse = ScreenshotsPartialUpdateResponses[keyof ScreenshotsPartialUpdateResponses];

export type ScreenshotsUpdateData = {
    body: Screenshot;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/';
};

export type ScreenshotsUpdateErrors = {
    400: ScreenshotsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsUpdateError2 = ScreenshotsUpdateErrors[keyof ScreenshotsUpdateErrors];

export type ScreenshotsUpdateResponses = {
    200: Screenshot;
};

export type ScreenshotsUpdateResponse = ScreenshotsUpdateResponses[keyof ScreenshotsUpdateResponses];

export type ScreenshotsFileRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/file/';
};

export type ScreenshotsFileRetrieveErrors = {
    400: ScreenshotsFileRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsFileRetrieveError = ScreenshotsFileRetrieveErrors[keyof ScreenshotsFileRetrieveErrors];

export type ScreenshotsFileRetrieveResponses = {
    200: ScreenshotFile;
};

export type ScreenshotsFileRetrieveResponse = ScreenshotsFileRetrieveResponses[keyof ScreenshotsFileRetrieveResponses];

export type ScreenshotsFileCreateData = {
    body: ScreenshotFile;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/file/';
};

export type ScreenshotsFileCreateErrors = {
    400: ScreenshotsFileCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsFileCreateError2 = ScreenshotsFileCreateErrors[keyof ScreenshotsFileCreateErrors];

export type ScreenshotsFileCreateResponses = {
    200: ScreenshotFile;
};

export type ScreenshotsFileCreateResponse = ScreenshotsFileCreateResponses[keyof ScreenshotsFileCreateResponses];

export type ScreenshotsFileUpdateData = {
    body: ScreenshotFile;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/file/';
};

export type ScreenshotsFileUpdateErrors = {
    400: ScreenshotsFileUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsFileUpdateError2 = ScreenshotsFileUpdateErrors[keyof ScreenshotsFileUpdateErrors];

export type ScreenshotsFileUpdateResponses = {
    200: ScreenshotFile;
};

export type ScreenshotsFileUpdateResponse = ScreenshotsFileUpdateResponses[keyof ScreenshotsFileUpdateResponses];

export type ScreenshotsUnitsCreateData = {
    body: Screenshot;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/units/';
};

export type ScreenshotsUnitsCreateErrors = {
    400: ScreenshotsUnitsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsUnitsCreateError2 = ScreenshotsUnitsCreateErrors[keyof ScreenshotsUnitsCreateErrors];

export type ScreenshotsUnitsCreateResponses = {
    200: Screenshot;
};

export type ScreenshotsUnitsCreateResponse = ScreenshotsUnitsCreateResponses[keyof ScreenshotsUnitsCreateResponses];

export type ScreenshotsUnitsDestroyData = {
    body?: never;
    path: {
        id: string;
        unit_id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/screenshots/{id}/units/{unit_id}/';
};

export type ScreenshotsUnitsDestroyErrors = {
    400: ScreenshotsUnitsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type ScreenshotsUnitsDestroyError = ScreenshotsUnitsDestroyErrors[keyof ScreenshotsUnitsDestroyErrors];

export type ScreenshotsUnitsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ScreenshotsUnitsDestroyResponse = ScreenshotsUnitsDestroyResponses[keyof ScreenshotsUnitsDestroyResponses];

export type SearchRetrieveData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/search/';
};

export type SearchRetrieveErrors = {
    400: SearchRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type SearchRetrieveError = SearchRetrieveErrors[keyof SearchRetrieveErrors];

export type SearchRetrieveResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type TasksDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/tasks/{id}/';
};

export type TasksDestroyErrors = {
    400: TasksDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TasksDestroyError = TasksDestroyErrors[keyof TasksDestroyErrors];

export type TasksDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type TasksDestroyResponse = TasksDestroyResponses[keyof TasksDestroyResponses];

export type TasksRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/tasks/{id}/';
};

export type TasksRetrieveErrors = {
    400: TasksRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TasksRetrieveError = TasksRetrieveErrors[keyof TasksRetrieveErrors];

export type TasksRetrieveResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type TranslationsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/translations/';
};

export type TranslationsListErrors = {
    400: TranslationsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsListError = TranslationsListErrors[keyof TranslationsListErrors];

export type TranslationsListResponses = {
    200: PaginatedTranslationList;
};

export type TranslationsListResponse = TranslationsListResponses[keyof TranslationsListResponses];

export type TranslationsDestroyData = {
    body?: never;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/';
};

export type TranslationsDestroyErrors = {
    400: TranslationsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsDestroyError = TranslationsDestroyErrors[keyof TranslationsDestroyErrors];

export type TranslationsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type TranslationsDestroyResponse = TranslationsDestroyResponses[keyof TranslationsDestroyResponses];

export type TranslationsRetrieveData = {
    body?: never;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/';
};

export type TranslationsRetrieveErrors = {
    400: TranslationsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsRetrieveError = TranslationsRetrieveErrors[keyof TranslationsRetrieveErrors];

export type TranslationsRetrieveResponses = {
    200: Translation;
};

export type TranslationsRetrieveResponse = TranslationsRetrieveResponses[keyof TranslationsRetrieveResponses];

export type TranslationsAutotranslateCreateData = {
    body: Translation;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/autotranslate/';
};

export type TranslationsAutotranslateCreateErrors = {
    400: TranslationsAutotranslateCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsAutotranslateCreateError2 = TranslationsAutotranslateCreateErrors[keyof TranslationsAutotranslateCreateErrors];

export type TranslationsAutotranslateCreateResponses = {
    200: Translation;
};

export type TranslationsAutotranslateCreateResponse = TranslationsAutotranslateCreateResponses[keyof TranslationsAutotranslateCreateResponses];

export type TranslationsChangesRetrieveData = {
    body?: never;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/changes/';
};

export type TranslationsChangesRetrieveErrors = {
    400: TranslationsChangesRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsChangesRetrieveError = TranslationsChangesRetrieveErrors[keyof TranslationsChangesRetrieveErrors];

export type TranslationsChangesRetrieveResponses = {
    200: Translation;
};

export type TranslationsChangesRetrieveResponse = TranslationsChangesRetrieveResponses[keyof TranslationsChangesRetrieveResponses];

export type TranslationsFileRetrieveData = {
    body?: never;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/file/';
};

export type TranslationsFileRetrieveErrors = {
    400: TranslationsFileRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsFileRetrieveError = TranslationsFileRetrieveErrors[keyof TranslationsFileRetrieveErrors];

export type TranslationsFileRetrieveResponses = {
    200: UploadRequest;
};

export type TranslationsFileRetrieveResponse = TranslationsFileRetrieveResponses[keyof TranslationsFileRetrieveResponses];

export type TranslationsFileCreateData = {
    body: UploadRequest;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/file/';
};

export type TranslationsFileCreateErrors = {
    400: TranslationsFileCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsFileCreateError2 = TranslationsFileCreateErrors[keyof TranslationsFileCreateErrors];

export type TranslationsFileCreateResponses = {
    200: UploadRequest;
};

export type TranslationsFileCreateResponse = TranslationsFileCreateResponses[keyof TranslationsFileCreateResponses];

export type TranslationsFileUpdateData = {
    body: UploadRequest;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/file/';
};

export type TranslationsFileUpdateErrors = {
    400: TranslationsFileUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsFileUpdateError2 = TranslationsFileUpdateErrors[keyof TranslationsFileUpdateErrors];

export type TranslationsFileUpdateResponses = {
    200: UploadRequest;
};

export type TranslationsFileUpdateResponse = TranslationsFileUpdateResponses[keyof TranslationsFileUpdateResponses];

export type TranslationsRepositoryRetrieveData = {
    body?: never;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/repository/';
};

export type TranslationsRepositoryRetrieveErrors = {
    400: TranslationsRepositoryRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsRepositoryRetrieveError = TranslationsRepositoryRetrieveErrors[keyof TranslationsRepositoryRetrieveErrors];

export type TranslationsRepositoryRetrieveResponses = {
    200: RepoRequest;
};

export type TranslationsRepositoryRetrieveResponse = TranslationsRepositoryRetrieveResponses[keyof TranslationsRepositoryRetrieveResponses];

export type TranslationsRepositoryCreateData = {
    body: RepoRequest;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/repository/';
};

export type TranslationsRepositoryCreateErrors = {
    400: TranslationsRepositoryCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsRepositoryCreateError2 = TranslationsRepositoryCreateErrors[keyof TranslationsRepositoryCreateErrors];

export type TranslationsRepositoryCreateResponses = {
    200: RepoRequest;
};

export type TranslationsRepositoryCreateResponse = TranslationsRepositoryCreateResponses[keyof TranslationsRepositoryCreateResponses];

export type TranslationsStatisticsRetrieveData = {
    body?: never;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json' | 'json-flat';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/statistics/';
};

export type TranslationsStatisticsRetrieveErrors = {
    400: TranslationsStatisticsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsStatisticsRetrieveError = TranslationsStatisticsRetrieveErrors[keyof TranslationsStatisticsRetrieveErrors];

export type TranslationsStatisticsRetrieveResponses = {
    200: Translation;
};

export type TranslationsStatisticsRetrieveResponse = TranslationsStatisticsRetrieveResponses[keyof TranslationsStatisticsRetrieveResponses];

export type TranslationsUnitsRetrieveData = {
    body?: never;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/units/';
};

export type TranslationsUnitsRetrieveErrors = {
    400: TranslationsUnitsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsUnitsRetrieveError = TranslationsUnitsRetrieveErrors[keyof TranslationsUnitsRetrieveErrors];

export type TranslationsUnitsRetrieveResponses = {
    200: Translation;
};

export type TranslationsUnitsRetrieveResponse = TranslationsUnitsRetrieveResponses[keyof TranslationsUnitsRetrieveResponses];

export type TranslationsUnitsCreateData = {
    body: Translation;
    path: {
        component__project__slug: string;
        component__slug: string;
        language__code: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/translations/{component__project__slug}/{component__slug}/{language__code}/units/';
};

export type TranslationsUnitsCreateErrors = {
    400: TranslationsUnitsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type TranslationsUnitsCreateError2 = TranslationsUnitsCreateErrors[keyof TranslationsUnitsCreateErrors];

export type TranslationsUnitsCreateResponses = {
    200: Translation;
};

export type TranslationsUnitsCreateResponse = TranslationsUnitsCreateResponses[keyof TranslationsUnitsCreateResponses];

export type UnitsListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
    };
    url: '/units/';
};

export type UnitsListErrors = {
    400: UnitsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UnitsListError = UnitsListErrors[keyof UnitsListErrors];

export type UnitsListResponses = {
    200: PaginatedUnitList;
};

export type UnitsListResponse = UnitsListResponses[keyof UnitsListResponses];

export type UnitsDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/units/{id}/';
};

export type UnitsDestroyErrors = {
    400: UnitsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UnitsDestroyError = UnitsDestroyErrors[keyof UnitsDestroyErrors];

export type UnitsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UnitsDestroyResponse = UnitsDestroyResponses[keyof UnitsDestroyResponses];

export type UnitsRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/units/{id}/';
};

export type UnitsRetrieveErrors = {
    400: UnitsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UnitsRetrieveError = UnitsRetrieveErrors[keyof UnitsRetrieveErrors];

export type UnitsRetrieveResponses = {
    200: Unit;
};

export type UnitsRetrieveResponse = UnitsRetrieveResponses[keyof UnitsRetrieveResponses];

export type UnitsPartialUpdateData = {
    body?: PatchedUnitWrite;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/units/{id}/';
};

export type UnitsPartialUpdateErrors = {
    400: UnitsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UnitsPartialUpdateError2 = UnitsPartialUpdateErrors[keyof UnitsPartialUpdateErrors];

export type UnitsPartialUpdateResponses = {
    200: UnitWrite;
};

export type UnitsPartialUpdateResponse = UnitsPartialUpdateResponses[keyof UnitsPartialUpdateResponses];

export type UnitsUpdateData = {
    body: UnitWrite;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/units/{id}/';
};

export type UnitsUpdateErrors = {
    400: UnitsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UnitsUpdateError2 = UnitsUpdateErrors[keyof UnitsUpdateErrors];

export type UnitsUpdateResponses = {
    200: UnitWrite;
};

export type UnitsUpdateResponse = UnitsUpdateResponses[keyof UnitsUpdateResponses];

export type UnitsTranslationsRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/units/{id}/translations/';
};

export type UnitsTranslationsRetrieveErrors = {
    400: UnitsTranslationsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UnitsTranslationsRetrieveError = UnitsTranslationsRetrieveErrors[keyof UnitsTranslationsRetrieveErrors];

export type UnitsTranslationsRetrieveResponses = {
    200: UnitWrite;
};

export type UnitsTranslationsRetrieveResponse = UnitsTranslationsRetrieveResponses[keyof UnitsTranslationsRetrieveResponses];

export type UsersListData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
        id?: number;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        username?: string;
    };
    url: '/users/';
};

export type UsersListErrors = {
    400: UsersListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersListError2 = UsersListErrors[keyof UsersListErrors];

export type UsersListResponses = {
    200: PaginatedBasicUserList;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersCreateData = {
    body: BasicUser;
    path?: never;
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/';
};

export type UsersCreateErrors = {
    400: UsersCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersCreateError2 = UsersCreateErrors[keyof UsersCreateErrors];

export type UsersCreateResponses = {
    201: BasicUser;
};

export type UsersCreateResponse = UsersCreateResponses[keyof UsersCreateResponses];

export type UsersDestroyData = {
    body?: never;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/';
};

export type UsersDestroyErrors = {
    400: UsersDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersDestroyError = UsersDestroyErrors[keyof UsersDestroyErrors];

export type UsersDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UsersDestroyResponse = UsersDestroyResponses[keyof UsersDestroyResponses];

export type UsersRetrieveData = {
    body?: never;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/';
};

export type UsersRetrieveErrors = {
    400: UsersRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersRetrieveError = UsersRetrieveErrors[keyof UsersRetrieveErrors];

export type UsersRetrieveResponses = {
    200: BasicUser;
};

export type UsersRetrieveResponse = UsersRetrieveResponses[keyof UsersRetrieveResponses];

export type UsersPartialUpdateData = {
    body?: PatchedBasicUser;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/';
};

export type UsersPartialUpdateErrors = {
    400: UsersPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersPartialUpdateError2 = UsersPartialUpdateErrors[keyof UsersPartialUpdateErrors];

export type UsersPartialUpdateResponses = {
    200: BasicUser;
};

export type UsersPartialUpdateResponse = UsersPartialUpdateResponses[keyof UsersPartialUpdateResponses];

export type UsersUpdateData = {
    body: BasicUser;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/';
};

export type UsersUpdateErrors = {
    400: UsersUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersUpdateError2 = UsersUpdateErrors[keyof UsersUpdateErrors];

export type UsersUpdateResponses = {
    200: BasicUser;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];

export type UsersGroupsDestroyData = {
    body?: never;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/groups/';
};

export type UsersGroupsDestroyErrors = {
    400: UsersGroupsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersGroupsDestroyError = UsersGroupsDestroyErrors[keyof UsersGroupsDestroyErrors];

export type UsersGroupsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UsersGroupsDestroyResponse = UsersGroupsDestroyResponses[keyof UsersGroupsDestroyResponses];

export type UsersGroupsCreateData = {
    body: BasicUser;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/groups/';
};

export type UsersGroupsCreateErrors = {
    400: UsersGroupsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersGroupsCreateError2 = UsersGroupsCreateErrors[keyof UsersGroupsCreateErrors];

export type UsersGroupsCreateResponses = {
    200: BasicUser;
};

export type UsersGroupsCreateResponse = UsersGroupsCreateResponses[keyof UsersGroupsCreateResponses];

export type UsersNotificationsListData = {
    body?: never;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
        id?: number;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        username?: string;
    };
    url: '/users/{username}/notifications/';
};

export type UsersNotificationsListErrors = {
    400: UsersNotificationsListErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersNotificationsListError2 = UsersNotificationsListErrors[keyof UsersNotificationsListErrors];

export type UsersNotificationsListResponses = {
    200: PaginatedNotificationList;
};

export type UsersNotificationsListResponse = UsersNotificationsListResponses[keyof UsersNotificationsListResponses];

export type UsersNotificationsCreateData = {
    body: Notification;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
        id?: number;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        username?: string;
    };
    url: '/users/{username}/notifications/';
};

export type UsersNotificationsCreateErrors = {
    400: UsersNotificationsCreateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersNotificationsCreateError2 = UsersNotificationsCreateErrors[keyof UsersNotificationsCreateErrors];

export type UsersNotificationsCreateResponses = {
    200: PaginatedNotificationList;
};

export type UsersNotificationsCreateResponse = UsersNotificationsCreateResponses[keyof UsersNotificationsCreateResponses];

export type UsersNotificationsDestroyData = {
    body?: never;
    path: {
        subscription_id: number;
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/notifications/{subscription_id}/';
};

export type UsersNotificationsDestroyErrors = {
    400: UsersNotificationsDestroyErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersNotificationsDestroyError = UsersNotificationsDestroyErrors[keyof UsersNotificationsDestroyErrors];

export type UsersNotificationsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UsersNotificationsDestroyResponse = UsersNotificationsDestroyResponses[keyof UsersNotificationsDestroyResponses];

export type UsersNotificationsRetrieveData = {
    body?: never;
    path: {
        subscription_id: number;
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/notifications/{subscription_id}/';
};

export type UsersNotificationsRetrieveErrors = {
    400: UsersNotificationsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersNotificationsRetrieveError = UsersNotificationsRetrieveErrors[keyof UsersNotificationsRetrieveErrors];

export type UsersNotificationsRetrieveResponses = {
    200: Notification;
};

export type UsersNotificationsRetrieveResponse = UsersNotificationsRetrieveResponses[keyof UsersNotificationsRetrieveResponses];

export type UsersNotificationsPartialUpdateData = {
    body?: PatchedNotification;
    path: {
        subscription_id: number;
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/notifications/{subscription_id}/';
};

export type UsersNotificationsPartialUpdateErrors = {
    400: UsersNotificationsPartialUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersNotificationsPartialUpdateError2 = UsersNotificationsPartialUpdateErrors[keyof UsersNotificationsPartialUpdateErrors];

export type UsersNotificationsPartialUpdateResponses = {
    200: Notification;
};

export type UsersNotificationsPartialUpdateResponse = UsersNotificationsPartialUpdateResponses[keyof UsersNotificationsPartialUpdateResponses];

export type UsersNotificationsUpdateData = {
    body: Notification;
    path: {
        subscription_id: number;
        username: string;
    };
    query?: {
        format?: 'csv' | 'json';
    };
    url: '/users/{username}/notifications/{subscription_id}/';
};

export type UsersNotificationsUpdateErrors = {
    400: UsersNotificationsUpdateErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersNotificationsUpdateError2 = UsersNotificationsUpdateErrors[keyof UsersNotificationsUpdateErrors];

export type UsersNotificationsUpdateResponses = {
    200: Notification;
};

export type UsersNotificationsUpdateResponse = UsersNotificationsUpdateResponses[keyof UsersNotificationsUpdateResponses];

export type UsersStatisticsRetrieveData = {
    body?: never;
    path: {
        username: string;
    };
    query?: {
        format?: 'csv' | 'json' | 'json-flat';
    };
    url: '/users/{username}/statistics/';
};

export type UsersStatisticsRetrieveErrors = {
    400: UsersStatisticsRetrieveErrorResponse400;
    401: ErrorResponse401;
    403: ErrorResponse403;
    404: ErrorResponse404;
    405: ErrorResponse405;
    406: ErrorResponse406;
    415: ErrorResponse415;
    423: ErrorResponse423;
    429: ErrorResponse429;
    500: ErrorResponse500;
};

export type UsersStatisticsRetrieveError = UsersStatisticsRetrieveErrors[keyof UsersStatisticsRetrieveErrors];

export type UsersStatisticsRetrieveResponses = {
    200: BasicUser;
};

export type UsersStatisticsRetrieveResponse = UsersStatisticsRetrieveResponses[keyof UsersStatisticsRetrieveResponses];

export type ClientOptions = {
    baseUrl: '' | (string & {});
};