// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { AddonsListData, AddonsListResponses, AddonsListErrors, AddonsDestroyData, AddonsDestroyResponses, AddonsDestroyErrors, AddonsRetrieveData, AddonsRetrieveResponses, AddonsRetrieveErrors, AddonsPartialUpdateData, AddonsPartialUpdateResponses, AddonsPartialUpdateErrors, AddonsUpdateData, AddonsUpdateResponses, AddonsUpdateErrors, CategoriesListData, CategoriesListResponses, CategoriesListErrors, CategoriesCreateData, CategoriesCreateResponses, CategoriesCreateErrors, CategoriesDestroyData, CategoriesDestroyResponses, CategoriesDestroyErrors, CategoriesRetrieveData, CategoriesRetrieveResponses, CategoriesRetrieveErrors, CategoriesPartialUpdateData, CategoriesPartialUpdateResponses, CategoriesPartialUpdateErrors, CategoriesUpdateData, CategoriesUpdateResponses, CategoriesUpdateErrors, CategoriesStatisticsRetrieveData, CategoriesStatisticsRetrieveResponses, CategoriesStatisticsRetrieveErrors, ChangesListData, ChangesListResponses, ChangesListErrors, ChangesRetrieveData, ChangesRetrieveResponses, ChangesRetrieveErrors, ComponentListsListData, ComponentListsListResponses, ComponentListsListErrors, ComponentListsCreateData, ComponentListsCreateResponses, ComponentListsCreateErrors, ComponentListsDestroyData, ComponentListsDestroyResponses, ComponentListsDestroyErrors, ComponentListsRetrieveData, ComponentListsRetrieveResponses, ComponentListsRetrieveErrors, ComponentListsPartialUpdateData, ComponentListsPartialUpdateResponses, ComponentListsPartialUpdateErrors, ComponentListsUpdateData, ComponentListsUpdateResponses, ComponentListsUpdateErrors, ComponentListsComponentsRetrieveData, ComponentListsComponentsRetrieveResponses, ComponentListsComponentsRetrieveErrors, ComponentListsComponentsCreateData, ComponentListsComponentsCreateResponses, ComponentListsComponentsCreateErrors, ComponentListsComponentsDestroyData, ComponentListsComponentsDestroyResponses, ComponentListsComponentsDestroyErrors, ComponentsListData, ComponentsListResponses, ComponentsListErrors, ComponentsDestroyData, ComponentsDestroyResponses, ComponentsDestroyErrors, ComponentsRetrieveData, ComponentsRetrieveResponses, ComponentsRetrieveErrors, ComponentsPartialUpdateData, ComponentsPartialUpdateResponses, ComponentsPartialUpdateErrors, ComponentsUpdateData, ComponentsUpdateResponses, ComponentsUpdateErrors, ComponentsAddonsCreateData, ComponentsAddonsCreateResponses, ComponentsAddonsCreateErrors, ComponentsChangesRetrieveData, ComponentsChangesRetrieveResponses, ComponentsChangesRetrieveErrors, ComponentsCreditsRetrieveData, ComponentsCreditsRetrieveResponses, ComponentsCreditsRetrieveErrors, ComponentsFileRetrieveData, ComponentsFileRetrieveResponses, ComponentsFileRetrieveErrors, ComponentsLinksRetrieveData, ComponentsLinksRetrieveResponses, ComponentsLinksRetrieveErrors, ComponentsLinksCreateData, ComponentsLinksCreateResponses, ComponentsLinksCreateErrors, ComponentsLinksDestroyData, ComponentsLinksDestroyResponses, ComponentsLinksDestroyErrors, ComponentsLockRetrieveData, ComponentsLockRetrieveResponses, ComponentsLockRetrieveErrors, ComponentsLockCreateData, ComponentsLockCreateResponses, ComponentsLockCreateErrors, ComponentsMonolingualBaseRetrieveData, ComponentsMonolingualBaseRetrieveResponses, ComponentsMonolingualBaseRetrieveErrors, ComponentsNewTemplateRetrieveData, ComponentsNewTemplateRetrieveResponses, ComponentsNewTemplateRetrieveErrors, ComponentsRepositoryRetrieveData, ComponentsRepositoryRetrieveResponses, ComponentsRepositoryRetrieveErrors, ComponentsRepositoryCreateData, ComponentsRepositoryCreateResponses, ComponentsRepositoryCreateErrors, ComponentsScreenshotsRetrieveData, ComponentsScreenshotsRetrieveResponses, ComponentsScreenshotsRetrieveErrors, ComponentsStatisticsRetrieveData, ComponentsStatisticsRetrieveResponses, ComponentsStatisticsRetrieveErrors, ComponentsTranslationsRetrieveData, ComponentsTranslationsRetrieveResponses, ComponentsTranslationsRetrieveErrors, ComponentsTranslationsCreateData, ComponentsTranslationsCreateResponses, ComponentsTranslationsCreateErrors, GroupsListData, GroupsListResponses, GroupsListErrors, GroupsCreateData, GroupsCreateResponses, GroupsCreateErrors, GroupsDestroyData, GroupsDestroyResponses, GroupsDestroyErrors, GroupsRetrieveData, GroupsRetrieveResponses, GroupsRetrieveErrors, GroupsPartialUpdateData, GroupsPartialUpdateResponses, GroupsPartialUpdateErrors, GroupsUpdateData, GroupsUpdateResponses, GroupsUpdateErrors, GroupsAdminsCreateData, GroupsAdminsCreateResponses, GroupsAdminsCreateErrors, GroupsAdminsDestroyData, GroupsAdminsDestroyResponses, GroupsAdminsDestroyErrors, GroupsComponentlistsCreateData, GroupsComponentlistsCreateResponses, GroupsComponentlistsCreateErrors, GroupsComponentlistsDestroyData, GroupsComponentlistsDestroyResponses, GroupsComponentlistsDestroyErrors, GroupsComponentsCreateData, GroupsComponentsCreateResponses, GroupsComponentsCreateErrors, GroupsComponentsDestroyData, GroupsComponentsDestroyResponses, GroupsComponentsDestroyErrors, GroupsLanguagesCreateData, GroupsLanguagesCreateResponses, GroupsLanguagesCreateErrors, GroupsLanguagesDestroyData, GroupsLanguagesDestroyResponses, GroupsLanguagesDestroyErrors, GroupsProjectsCreateData, GroupsProjectsCreateResponses, GroupsProjectsCreateErrors, GroupsProjectsDestroyData, GroupsProjectsDestroyResponses, GroupsProjectsDestroyErrors, GroupsRolesCreateData, GroupsRolesCreateResponses, GroupsRolesCreateErrors, GroupsRolesDestroyData, GroupsRolesDestroyResponses, GroupsRolesDestroyErrors, LanguagesListData, LanguagesListResponses, LanguagesListErrors, LanguagesCreateData, LanguagesCreateResponses, LanguagesCreateErrors, LanguagesDestroyData, LanguagesDestroyResponses, LanguagesDestroyErrors, LanguagesRetrieveData, LanguagesRetrieveResponses, LanguagesRetrieveErrors, LanguagesPartialUpdateData, LanguagesPartialUpdateResponses, LanguagesPartialUpdateErrors, LanguagesUpdateData, LanguagesUpdateResponses, LanguagesUpdateErrors, LanguagesStatisticsRetrieveData, LanguagesStatisticsRetrieveResponses, LanguagesStatisticsRetrieveErrors, MemoryListData, MemoryListResponses, MemoryListErrors, MemoryCreateData, MemoryCreateResponses, MemoryCreateErrors, MemoryDestroyData, MemoryDestroyResponses, MemoryDestroyErrors, MemoryRetrieveData, MemoryRetrieveResponses, MemoryRetrieveErrors, MemoryPartialUpdateData, MemoryPartialUpdateResponses, MemoryPartialUpdateErrors, MemoryUpdateData, MemoryUpdateResponses, MemoryUpdateErrors, MetricsRetrieveData, MetricsRetrieveResponses, MetricsRetrieveErrors, ProjectsListData, ProjectsListResponses, ProjectsListErrors, ProjectsCreateData, ProjectsCreateResponses, ProjectsCreateErrors, ProjectsDestroyData, ProjectsDestroyResponses, ProjectsDestroyErrors, ProjectsRetrieveData, ProjectsRetrieveResponses, ProjectsRetrieveErrors, ProjectsPartialUpdateData, ProjectsPartialUpdateResponses, ProjectsPartialUpdateErrors, ProjectsUpdateData, ProjectsUpdateResponses, ProjectsUpdateErrors, ProjectsAddonsCreateData, ProjectsAddonsCreateResponses, ProjectsAddonsCreateErrors, ProjectsCategoriesRetrieveData, ProjectsCategoriesRetrieveResponses, ProjectsCategoriesRetrieveErrors, ProjectsChangesRetrieveData, ProjectsChangesRetrieveResponses, ProjectsChangesRetrieveErrors, ProjectsComponentsRetrieveData, ProjectsComponentsRetrieveResponses, ProjectsComponentsRetrieveErrors, ProjectsComponentsCreateData, ProjectsComponentsCreateResponses, ProjectsComponentsCreateErrors, ProjectsCreditsRetrieveData, ProjectsCreditsRetrieveResponses, ProjectsCreditsRetrieveErrors, ProjectsFileRetrieveData, ProjectsFileRetrieveResponses, ProjectsFileRetrieveErrors, ProjectsLabelsRetrieveData, ProjectsLabelsRetrieveResponses, ProjectsLabelsRetrieveErrors, ProjectsLabelsCreateData, ProjectsLabelsCreateResponses, ProjectsLabelsCreateErrors, ProjectsLanguagesRetrieveData, ProjectsLanguagesRetrieveResponses, ProjectsLanguagesRetrieveErrors, ProjectsMachinerySettingsRetrieveData, ProjectsMachinerySettingsRetrieveResponses, ProjectsMachinerySettingsRetrieveErrors, ProjectsMachinerySettingsPartialUpdateData, ProjectsMachinerySettingsPartialUpdateResponses, ProjectsMachinerySettingsPartialUpdateErrors, ProjectsMachinerySettingsCreateData, ProjectsMachinerySettingsCreateResponses, ProjectsMachinerySettingsCreateErrors, ProjectsMachinerySettingsUpdateData, ProjectsMachinerySettingsUpdateResponses, ProjectsMachinerySettingsUpdateErrors, ProjectsRepositoryRetrieveData, ProjectsRepositoryRetrieveResponses, ProjectsRepositoryRetrieveErrors, ProjectsRepositoryCreateData, ProjectsRepositoryCreateResponses, ProjectsRepositoryCreateErrors, ProjectsStatisticsRetrieveData, ProjectsStatisticsRetrieveResponses, ProjectsStatisticsRetrieveErrors, RolesListData, RolesListResponses, RolesListErrors, RolesCreateData, RolesCreateResponses, RolesCreateErrors, RolesDestroyData, RolesDestroyResponses, RolesDestroyErrors, RolesRetrieveData, RolesRetrieveResponses, RolesRetrieveErrors, RolesPartialUpdateData, RolesPartialUpdateResponses, RolesPartialUpdateErrors, RolesUpdateData, RolesUpdateResponses, RolesUpdateErrors, ScreenshotsListData, ScreenshotsListResponses, ScreenshotsListErrors, ScreenshotsCreateData, ScreenshotsCreateResponses, ScreenshotsCreateErrors, ScreenshotsDestroyData, ScreenshotsDestroyResponses, ScreenshotsDestroyErrors, ScreenshotsRetrieveData, ScreenshotsRetrieveResponses, ScreenshotsRetrieveErrors, ScreenshotsPartialUpdateData, ScreenshotsPartialUpdateResponses, ScreenshotsPartialUpdateErrors, ScreenshotsUpdateData, ScreenshotsUpdateResponses, ScreenshotsUpdateErrors, ScreenshotsFileRetrieveData, ScreenshotsFileRetrieveResponses, ScreenshotsFileRetrieveErrors, ScreenshotsFileCreateData, ScreenshotsFileCreateResponses, ScreenshotsFileCreateErrors, ScreenshotsFileUpdateData, ScreenshotsFileUpdateResponses, ScreenshotsFileUpdateErrors, ScreenshotsUnitsCreateData, ScreenshotsUnitsCreateResponses, ScreenshotsUnitsCreateErrors, ScreenshotsUnitsDestroyData, ScreenshotsUnitsDestroyResponses, ScreenshotsUnitsDestroyErrors, SearchRetrieveData, SearchRetrieveResponses, SearchRetrieveErrors, TasksDestroyData, TasksDestroyResponses, TasksDestroyErrors, TasksRetrieveData, TasksRetrieveResponses, TasksRetrieveErrors, TranslationsListData, TranslationsListResponses, TranslationsListErrors, TranslationsDestroyData, TranslationsDestroyResponses, TranslationsDestroyErrors, TranslationsRetrieveData, TranslationsRetrieveResponses, TranslationsRetrieveErrors, TranslationsAutotranslateCreateData, TranslationsAutotranslateCreateResponses, TranslationsAutotranslateCreateErrors, TranslationsChangesRetrieveData, TranslationsChangesRetrieveResponses, TranslationsChangesRetrieveErrors, TranslationsFileRetrieveData, TranslationsFileRetrieveResponses, TranslationsFileRetrieveErrors, TranslationsFileCreateData, TranslationsFileCreateResponses, TranslationsFileCreateErrors, TranslationsFileUpdateData, TranslationsFileUpdateResponses, TranslationsFileUpdateErrors, TranslationsRepositoryRetrieveData, TranslationsRepositoryRetrieveResponses, TranslationsRepositoryRetrieveErrors, TranslationsRepositoryCreateData, TranslationsRepositoryCreateResponses, TranslationsRepositoryCreateErrors, TranslationsStatisticsRetrieveData, TranslationsStatisticsRetrieveResponses, TranslationsStatisticsRetrieveErrors, TranslationsUnitsRetrieveData, TranslationsUnitsRetrieveResponses, TranslationsUnitsRetrieveErrors, TranslationsUnitsCreateData, TranslationsUnitsCreateResponses, TranslationsUnitsCreateErrors, UnitsListData, UnitsListResponses, UnitsListErrors, UnitsDestroyData, UnitsDestroyResponses, UnitsDestroyErrors, UnitsRetrieveData, UnitsRetrieveResponses, UnitsRetrieveErrors, UnitsPartialUpdateData, UnitsPartialUpdateResponses, UnitsPartialUpdateErrors, UnitsUpdateData, UnitsUpdateResponses, UnitsUpdateErrors, UnitsTranslationsRetrieveData, UnitsTranslationsRetrieveResponses, UnitsTranslationsRetrieveErrors, UsersListData, UsersListResponses, UsersListErrors, UsersCreateData, UsersCreateResponses, UsersCreateErrors, UsersDestroyData, UsersDestroyResponses, UsersDestroyErrors, UsersRetrieveData, UsersRetrieveResponses, UsersRetrieveErrors, UsersPartialUpdateData, UsersPartialUpdateResponses, UsersPartialUpdateErrors, UsersUpdateData, UsersUpdateResponses, UsersUpdateErrors, UsersGroupsDestroyData, UsersGroupsDestroyResponses, UsersGroupsDestroyErrors, UsersGroupsCreateData, UsersGroupsCreateResponses, UsersGroupsCreateErrors, UsersNotificationsListData, UsersNotificationsListResponses, UsersNotificationsListErrors, UsersNotificationsCreateData, UsersNotificationsCreateResponses, UsersNotificationsCreateErrors, UsersNotificationsDestroyData, UsersNotificationsDestroyResponses, UsersNotificationsDestroyErrors, UsersNotificationsRetrieveData, UsersNotificationsRetrieveResponses, UsersNotificationsRetrieveErrors, UsersNotificationsPartialUpdateData, UsersNotificationsPartialUpdateResponses, UsersNotificationsPartialUpdateErrors, UsersNotificationsUpdateData, UsersNotificationsUpdateResponses, UsersNotificationsUpdateErrors, UsersStatisticsRetrieveData, UsersStatisticsRetrieveResponses, UsersStatisticsRetrieveErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Return a list of add-ons.
 */
export const addonsList = <ThrowOnError extends boolean = false>(options?: Options<AddonsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AddonsListResponses, AddonsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/addons/',
        ...options
    });
};

/**
 * Delete add-on.
 */
export const addonsDestroy = <ThrowOnError extends boolean = false>(options: Options<AddonsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AddonsDestroyResponses, AddonsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/addons/{id}/',
        ...options
    });
};

/**
 * Returns information about add-on information.
 */
export const addonsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AddonsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AddonsRetrieveResponses, AddonsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/addons/{id}/',
        ...options
    });
};

/**
 * Edit partial information about add-on.
 */
export const addonsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AddonsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AddonsPartialUpdateResponses, AddonsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/addons/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit full information about add-on.
 */
export const addonsUpdate = <ThrowOnError extends boolean = false>(options: Options<AddonsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddonsUpdateResponses, AddonsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/addons/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List available categories.
 */
export const categoriesList = <ThrowOnError extends boolean = false>(options?: Options<CategoriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CategoriesListResponses, CategoriesListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/categories/',
        ...options
    });
};

/**
 * Category API.
 */
export const categoriesCreate = <ThrowOnError extends boolean = false>(options: Options<CategoriesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CategoriesCreateResponses, CategoriesCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete category.
 */
export const categoriesDestroy = <ThrowOnError extends boolean = false>(options: Options<CategoriesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CategoriesDestroyResponses, CategoriesDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/categories/{id}/',
        ...options
    });
};

/**
 * Category API.
 */
export const categoriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<CategoriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesRetrieveResponses, CategoriesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/categories/{id}/',
        ...options
    });
};

/**
 * Category API.
 */
export const categoriesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CategoriesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CategoriesPartialUpdateResponses, CategoriesPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/categories/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit full information about category.
 */
export const categoriesUpdate = <ThrowOnError extends boolean = false>(options: Options<CategoriesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CategoriesUpdateResponses, CategoriesUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/categories/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return statistics for a category.
 */
export const categoriesStatisticsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CategoriesStatisticsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesStatisticsRetrieveResponses, CategoriesStatisticsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/categories/{id}/statistics/',
        ...options
    });
};

/**
 * Return a list of translation changes.
 */
export const changesList = <ThrowOnError extends boolean = false>(options?: Options<ChangesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChangesListResponses, ChangesListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/changes/',
        ...options
    });
};

/**
 * Return information about a translation change.
 */
export const changesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ChangesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChangesRetrieveResponses, ChangesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/changes/{id}/',
        ...options
    });
};

/**
 * Return a list of component lists.
 */
export const componentListsList = <ThrowOnError extends boolean = false>(options?: Options<ComponentListsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ComponentListsListResponses, ComponentListsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/',
        ...options
    });
};

/**
 * Create a new component list.
 */
export const componentListsCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentListsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentListsCreateResponses, ComponentListsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete the component list.
 */
export const componentListsDestroy = <ThrowOnError extends boolean = false>(options: Options<ComponentListsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ComponentListsDestroyResponses, ComponentListsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/{slug}/',
        ...options
    });
};

/**
 * Return information about component list.
 */
export const componentListsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentListsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentListsRetrieveResponses, ComponentListsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/{slug}/',
        ...options
    });
};

/**
 * Change the component list parameters.
 */
export const componentListsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentListsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ComponentListsPartialUpdateResponses, ComponentListsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/{slug}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change the component list parameters.
 */
export const componentListsUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentListsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ComponentListsUpdateResponses, ComponentListsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/{slug}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Component lists API.
 */
export const componentListsComponentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentListsComponentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentListsComponentsRetrieveResponses, ComponentListsComponentsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/{slug}/components/',
        ...options
    });
};

/**
 * Associate component with a component list.
 */
export const componentListsComponentsCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentListsComponentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentListsComponentsCreateResponses, ComponentListsComponentsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/{slug}/components/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disassociate a component from the component list.
 */
export const componentListsComponentsDestroy = <ThrowOnError extends boolean = false>(options: Options<ComponentListsComponentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ComponentListsComponentsDestroyResponses, ComponentListsComponentsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/component-lists/{slug}/components/{component_slug}/',
        ...options
    });
};

/**
 * Return a list of translation components.
 */
export const componentsList = <ThrowOnError extends boolean = false>(options?: Options<ComponentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ComponentsListResponses, ComponentsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/',
        ...options
    });
};

/**
 * Delete a component.
 */
export const componentsDestroy = <ThrowOnError extends boolean = false>(options: Options<ComponentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ComponentsDestroyResponses, ComponentsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/',
        ...options
    });
};

/**
 * Return information about translation component.
 */
export const componentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsRetrieveResponses, ComponentsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/',
        ...options
    });
};

/**
 * Edit a component by a PATCH request.
 */
export const componentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ComponentsPartialUpdateResponses, ComponentsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit a component by a PUT request.
 */
export const componentsUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ComponentsUpdateResponses, ComponentsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Translation components API.
 */
export const componentsAddonsCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentsAddonsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentsAddonsCreateResponses, ComponentsAddonsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/addons/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return a list of component changes.
 */
export const componentsChangesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsChangesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsChangesRetrieveResponses, ComponentsChangesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/changes/',
        ...options
    });
};

/**
 * Translation components API.
 */
export const componentsCreditsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsCreditsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsCreditsRetrieveResponses, ComponentsCreditsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/credits/',
        ...options
    });
};

/**
 * Translation components API.
 */
export const componentsFileRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsFileRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsFileRetrieveResponses, ComponentsFileRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/file/',
        ...options
    });
};

/**
 * Return projects linked with a component.
 */
export const componentsLinksRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsLinksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsLinksRetrieveResponses, ComponentsLinksRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/links/',
        ...options
    });
};

/**
 * Associate project with a component.
 */
export const componentsLinksCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentsLinksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentsLinksCreateResponses, ComponentsLinksCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/links/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove association of a project with a component.
 */
export const componentsLinksDestroy = <ThrowOnError extends boolean = false>(options: Options<ComponentsLinksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ComponentsLinksDestroyResponses, ComponentsLinksDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/links/{project_slug}/',
        ...options
    });
};

/**
 * Return component lock status.
 */
export const componentsLockRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsLockRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsLockRetrieveResponses, ComponentsLockRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/lock/',
        ...options
    });
};

/**
 * Sets component lock status.
 */
export const componentsLockCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentsLockCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentsLockCreateResponses, ComponentsLockCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/lock/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download base file for monolingual translations.
 */
export const componentsMonolingualBaseRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsMonolingualBaseRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsMonolingualBaseRetrieveResponses, ComponentsMonolingualBaseRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/monolingual_base/',
        ...options
    });
};

/**
 * Download template file for new translations.
 */
export const componentsNewTemplateRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsNewTemplateRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsNewTemplateRetrieveResponses, ComponentsNewTemplateRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/new_template/',
        ...options
    });
};

/**
 * Return information about VCS repository status.
 */
export const componentsRepositoryRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsRepositoryRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsRepositoryRetrieveResponses, ComponentsRepositoryRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/repository/',
        ...options
    });
};

/**
 * Perform given operation on the VCS repository.
 */
export const componentsRepositoryCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentsRepositoryCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentsRepositoryCreateResponses, ComponentsRepositoryCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/repository/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return a list of component screenshots.
 */
export const componentsScreenshotsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsScreenshotsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsScreenshotsRetrieveResponses, ComponentsScreenshotsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/screenshots/',
        ...options
    });
};

/**
 * Return paginated statistics for all translations within component.
 */
export const componentsStatisticsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsStatisticsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsStatisticsRetrieveResponses, ComponentsStatisticsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/statistics/',
        ...options
    });
};

/**
 * Return a list of translation objects in the given component.
 */
export const componentsTranslationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentsTranslationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentsTranslationsRetrieveResponses, ComponentsTranslationsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/translations/',
        ...options
    });
};

/**
 * Create a new translation in the given component.
 */
export const componentsTranslationsCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentsTranslationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentsTranslationsCreateResponses, ComponentsTranslationsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/components/{project__slug}/{slug}/translations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Groups API.
 */
export const groupsList = <ThrowOnError extends boolean = false>(options?: Options<GroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GroupsListResponses, GroupsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/',
        ...options
    });
};

/**
 * Create a new group.
 */
export const groupsCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsCreateResponses, GroupsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete the group.
 */
export const groupsDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsDestroyResponses, GroupsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options
    });
};

/**
 * Return information about a group.
 */
export const groupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<GroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GroupsRetrieveResponses, GroupsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options
    });
};

/**
 * Change the group parameters.
 */
export const groupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<GroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GroupsPartialUpdateResponses, GroupsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change the group parameters.
 */
export const groupsUpdate = <ThrowOnError extends boolean = false>(options: Options<GroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GroupsUpdateResponses, GroupsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Make user a group admin.
 */
export const groupsAdminsCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsAdminsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsAdminsCreateResponses, GroupsAdminsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/admins/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user from group admins.
 */
export const groupsAdminsDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsAdminsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsAdminsDestroyResponses, GroupsAdminsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/admins/{user_pk}/',
        ...options
    });
};

/**
 * Associate componentlists with a group.
 */
export const groupsComponentlistsCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsComponentlistsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsComponentlistsCreateResponses, GroupsComponentlistsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/componentlists/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a componentlist from a group.
 */
export const groupsComponentlistsDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsComponentlistsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsComponentlistsDestroyResponses, GroupsComponentlistsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/componentlists/{component_list_id}/',
        ...options
    });
};

/**
 * Associate components with a group.
 */
export const groupsComponentsCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsComponentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsComponentsCreateResponses, GroupsComponentsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/components/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a component from a group.
 */
export const groupsComponentsDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsComponentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsComponentsDestroyResponses, GroupsComponentsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/components/{component_id}/',
        ...options
    });
};

/**
 * Associate languages with a group.
 */
export const groupsLanguagesCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsLanguagesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsLanguagesCreateResponses, GroupsLanguagesCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/languages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a language from a group.
 */
export const groupsLanguagesDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsLanguagesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsLanguagesDestroyResponses, GroupsLanguagesDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/languages/{language_code}/',
        ...options
    });
};

/**
 * Associate projects with a group.
 */
export const groupsProjectsCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsProjectsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsProjectsCreateResponses, GroupsProjectsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a project from a group.
 */
export const groupsProjectsDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsProjectsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsProjectsDestroyResponses, GroupsProjectsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/projects/{project_id}/',
        ...options
    });
};

/**
 * Associate roles with a group.
 */
export const groupsRolesCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsRolesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsRolesCreateResponses, GroupsRolesCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a role from a group.
 */
export const groupsRolesDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsRolesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsRolesDestroyResponses, GroupsRolesDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/groups/{id}/roles/{role_id}/',
        ...options
    });
};

/**
 * Return a list of all languages the user has access to.
 */
export const languagesList = <ThrowOnError extends boolean = false>(options?: Options<LanguagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LanguagesListResponses, LanguagesListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/languages/',
        ...options
    });
};

/**
 * Create a new language.
 */
export const languagesCreate = <ThrowOnError extends boolean = false>(options: Options<LanguagesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LanguagesCreateResponses, LanguagesCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/languages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete the language.
 */
export const languagesDestroy = <ThrowOnError extends boolean = false>(options: Options<LanguagesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LanguagesDestroyResponses, LanguagesDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/languages/{code}/',
        ...options
    });
};

/**
 * Return information about a language.
 */
export const languagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<LanguagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LanguagesRetrieveResponses, LanguagesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/languages/{code}/',
        ...options
    });
};

/**
 * Change the language parameters.
 */
export const languagesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<LanguagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LanguagesPartialUpdateResponses, LanguagesPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/languages/{code}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change the language parameters.
 */
export const languagesUpdate = <ThrowOnError extends boolean = false>(options: Options<LanguagesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<LanguagesUpdateResponses, LanguagesUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/languages/{code}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return statistics for a language.
 */
export const languagesStatisticsRetrieve = <ThrowOnError extends boolean = false>(options: Options<LanguagesStatisticsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LanguagesStatisticsRetrieveResponses, LanguagesStatisticsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/languages/{code}/statistics/',
        ...options
    });
};

/**
 * Return a list of memory results.
 */
export const memoryList = <ThrowOnError extends boolean = false>(options?: Options<MemoryListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MemoryListResponses, MemoryListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/memory/',
        ...options
    });
};

/**
 * Memory API.
 */
export const memoryCreate = <ThrowOnError extends boolean = false>(options: Options<MemoryCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MemoryCreateResponses, MemoryCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/memory/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a memory object.
 */
export const memoryDestroy = <ThrowOnError extends boolean = false>(options: Options<MemoryDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MemoryDestroyResponses, MemoryDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/memory/{id}/',
        ...options
    });
};

/**
 * Memory API.
 */
export const memoryRetrieve = <ThrowOnError extends boolean = false>(options: Options<MemoryRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MemoryRetrieveResponses, MemoryRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/memory/{id}/',
        ...options
    });
};

/**
 * Memory API.
 */
export const memoryPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MemoryPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MemoryPartialUpdateResponses, MemoryPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/memory/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Memory API.
 */
export const memoryUpdate = <ThrowOnError extends boolean = false>(options: Options<MemoryUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MemoryUpdateResponses, MemoryUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/memory/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return server metrics.
 */
export const metricsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MetricsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MetricsRetrieveResponses, MetricsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/metrics/',
        ...options
    });
};

/**
 * Return a list of all projects.
 */
export const projectsList = <ThrowOnError extends boolean = false>(options?: Options<ProjectsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectsListResponses, ProjectsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/',
        ...options
    });
};

/**
 * Create a new project.
 */
export const projectsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsCreateResponses, ProjectsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a project.
 */
export const projectsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProjectsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProjectsDestroyResponses, ProjectsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/',
        ...options
    });
};

/**
 * Return information about a project.
 */
export const projectsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsRetrieveResponses, ProjectsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/',
        ...options
    });
};

/**
 * Edit a project by a PATCH request.
 */
export const projectsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProjectsPartialUpdateResponses, ProjectsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit a project by a PUT request.
 */
export const projectsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProjectsUpdateResponses, ProjectsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Translation projects API.
 */
export const projectsAddonsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsAddonsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsAddonsCreateResponses, ProjectsAddonsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/addons/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return categories for a project.
 */
export const projectsCategoriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsCategoriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsCategoriesRetrieveResponses, ProjectsCategoriesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/categories/',
        ...options
    });
};

/**
 * Return a list of project changes.
 */
export const projectsChangesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsChangesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsChangesRetrieveResponses, ProjectsChangesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/changes/',
        ...options
    });
};

/**
 * Return a list of translation components in the given project.
 */
export const projectsComponentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsComponentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsComponentsRetrieveResponses, ProjectsComponentsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/components/',
        ...options
    });
};

/**
 * Create translation components in the given project.
 */
export const projectsComponentsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsComponentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsComponentsCreateResponses, ProjectsComponentsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/components/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return contributor credits for a project.
 */
export const projectsCreditsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreditsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsCreditsRetrieveResponses, ProjectsCreditsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/credits/',
        ...options
    });
};

/**
 * Translation projects API.
 */
export const projectsFileRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsFileRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsFileRetrieveResponses, ProjectsFileRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/file/',
        ...options
    });
};

/**
 * Return labels for a project.
 */
export const projectsLabelsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsLabelsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsLabelsRetrieveResponses, ProjectsLabelsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/labels/',
        ...options
    });
};

/**
 * Create a label for a project.
 */
export const projectsLabelsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsLabelsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsLabelsCreateResponses, ProjectsLabelsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/labels/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return paginated statistics for all languages within a project.
 */
export const projectsLanguagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsLanguagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsLanguagesRetrieveResponses, ProjectsLanguagesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/languages/',
        ...options
    });
};

/**
 * List machinery settings for a project.
 */
export const projectsMachinerySettingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsMachinerySettingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsMachinerySettingsRetrieveResponses, ProjectsMachinerySettingsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/machinery_settings/',
        ...options
    });
};

/**
 * Partially update a single service. Leave configuration blank to remove the service.
 */
export const projectsMachinerySettingsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsMachinerySettingsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProjectsMachinerySettingsPartialUpdateResponses, ProjectsMachinerySettingsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/machinery_settings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Install a new machinery service.
 */
export const projectsMachinerySettingsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsMachinerySettingsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsMachinerySettingsCreateResponses, ProjectsMachinerySettingsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/machinery_settings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Replace configuration for all services.
 */
export const projectsMachinerySettingsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsMachinerySettingsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProjectsMachinerySettingsUpdateResponses, ProjectsMachinerySettingsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/machinery_settings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return information about VCS repository status.
 */
export const projectsRepositoryRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsRepositoryRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsRepositoryRetrieveResponses, ProjectsRepositoryRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/repository/',
        ...options
    });
};

/**
 * Perform given operation on the VCS repository.
 */
export const projectsRepositoryCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsRepositoryCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsRepositoryCreateResponses, ProjectsRepositoryCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/repository/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return statistics for a project.
 */
export const projectsStatisticsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsStatisticsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsStatisticsRetrieveResponses, ProjectsStatisticsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/projects/{slug}/statistics/',
        ...options
    });
};

/**
 * Return a list of all roles associated with the user.
 */
export const rolesList = <ThrowOnError extends boolean = false>(options?: Options<RolesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesListResponses, RolesListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/roles/',
        ...options
    });
};

/**
 * Create a new role.
 */
export const rolesCreate = <ThrowOnError extends boolean = false>(options: Options<RolesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesCreateResponses, RolesCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a role.
 */
export const rolesDestroy = <ThrowOnError extends boolean = false>(options: Options<RolesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RolesDestroyResponses, RolesDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/roles/{id}/',
        ...options
    });
};

/**
 * Return information about a role.
 */
export const rolesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RolesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RolesRetrieveResponses, RolesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/roles/{id}/',
        ...options
    });
};

/**
 * Change the role parameters.
 */
export const rolesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RolesPartialUpdateResponses, RolesPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/roles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change the role parameters.
 */
export const rolesUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateResponses, RolesUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/roles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return a list of screenshot string information.
 */
export const screenshotsList = <ThrowOnError extends boolean = false>(options?: Options<ScreenshotsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ScreenshotsListResponses, ScreenshotsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/',
        ...options
    });
};

/**
 * Create a new screenshot.
 */
export const screenshotsCreate = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ScreenshotsCreateResponses, ScreenshotsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete screenshot.
 */
export const screenshotsDestroy = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ScreenshotsDestroyResponses, ScreenshotsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/',
        ...options
    });
};

/**
 * Return information about screenshot information.
 */
export const screenshotsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScreenshotsRetrieveResponses, ScreenshotsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/',
        ...options
    });
};

/**
 * Edit partial information about screenshot.
 */
export const screenshotsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ScreenshotsPartialUpdateResponses, ScreenshotsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit full information about screenshot.
 */
export const screenshotsUpdate = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ScreenshotsUpdateResponses, ScreenshotsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download the screenshot image.
 */
export const screenshotsFileRetrieve = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsFileRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScreenshotsFileRetrieveResponses, ScreenshotsFileRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/file/',
        ...options
    });
};

/**
 * Replace screenshot image.
 */
export const screenshotsFileCreate = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsFileCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ScreenshotsFileCreateResponses, ScreenshotsFileCreateErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/file/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Screenshots API.
 */
export const screenshotsFileUpdate = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsFileUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ScreenshotsFileUpdateResponses, ScreenshotsFileUpdateErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/file/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Associate source string with screenshot.
 */
export const screenshotsUnitsCreate = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsUnitsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ScreenshotsUnitsCreateResponses, ScreenshotsUnitsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/units/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove source string association with screenshot.
 */
export const screenshotsUnitsDestroy = <ThrowOnError extends boolean = false>(options: Options<ScreenshotsUnitsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ScreenshotsUnitsDestroyResponses, ScreenshotsUnitsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/screenshots/{id}/units/{unit_id}/',
        ...options
    });
};

/**
 * Return site-wide search results as a list.
 */
export const searchRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SearchRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchRetrieveResponses, SearchRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/search/',
        ...options
    });
};

export const tasksDestroy = <ThrowOnError extends boolean = false>(options: Options<TasksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TasksDestroyResponses, TasksDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/tasks/{id}/',
        ...options
    });
};

/**
 * Return information about a task
 */
export const tasksRetrieve = <ThrowOnError extends boolean = false>(options: Options<TasksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TasksRetrieveResponses, TasksRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/tasks/{id}/',
        ...options
    });
};

/**
 * Return a list of translations.
 */
export const translationsList = <ThrowOnError extends boolean = false>(options?: Options<TranslationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TranslationsListResponses, TranslationsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/',
        ...options
    });
};

/**
 * Delete a translation.
 */
export const translationsDestroy = <ThrowOnError extends boolean = false>(options: Options<TranslationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TranslationsDestroyResponses, TranslationsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/',
        ...options
    });
};

/**
 * Return information about a translation.
 */
export const translationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<TranslationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TranslationsRetrieveResponses, TranslationsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/',
        ...options
    });
};

/**
 * Trigger automatic translation.
 */
export const translationsAutotranslateCreate = <ThrowOnError extends boolean = false>(options: Options<TranslationsAutotranslateCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TranslationsAutotranslateCreateResponses, TranslationsAutotranslateCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/autotranslate/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return a list of translation changes.
 */
export const translationsChangesRetrieve = <ThrowOnError extends boolean = false>(options: Options<TranslationsChangesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TranslationsChangesRetrieveResponses, TranslationsChangesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/changes/',
        ...options
    });
};

/**
 * Translation components API.
 */
export const translationsFileRetrieve = <ThrowOnError extends boolean = false>(options: Options<TranslationsFileRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TranslationsFileRetrieveResponses, TranslationsFileRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/file/',
        ...options
    });
};

/**
 * Upload new file with translations.
 */
export const translationsFileCreate = <ThrowOnError extends boolean = false>(options: Options<TranslationsFileCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TranslationsFileCreateResponses, TranslationsFileCreateErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/file/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Translation components API.
 */
export const translationsFileUpdate = <ThrowOnError extends boolean = false>(options: Options<TranslationsFileUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TranslationsFileUpdateResponses, TranslationsFileUpdateErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/file/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Return information about VCS repository status.
 */
export const translationsRepositoryRetrieve = <ThrowOnError extends boolean = false>(options: Options<TranslationsRepositoryRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TranslationsRepositoryRetrieveResponses, TranslationsRepositoryRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/repository/',
        ...options
    });
};

/**
 * Perform given operation on the VCS repository.
 */
export const translationsRepositoryCreate = <ThrowOnError extends boolean = false>(options: Options<TranslationsRepositoryCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TranslationsRepositoryCreateResponses, TranslationsRepositoryCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/repository/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return detailed translation statistics.
 */
export const translationsStatisticsRetrieve = <ThrowOnError extends boolean = false>(options: Options<TranslationsStatisticsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TranslationsStatisticsRetrieveResponses, TranslationsStatisticsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/statistics/',
        ...options
    });
};

/**
 * Return a list of translation units.
 */
export const translationsUnitsRetrieve = <ThrowOnError extends boolean = false>(options: Options<TranslationsUnitsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TranslationsUnitsRetrieveResponses, TranslationsUnitsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/units/',
        ...options
    });
};

/**
 * Add a new unit.
 */
export const translationsUnitsCreate = <ThrowOnError extends boolean = false>(options: Options<TranslationsUnitsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TranslationsUnitsCreateResponses, TranslationsUnitsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/translations/{component__project__slug}/{component__slug}/{language__code}/units/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return a list of translation units.
 */
export const unitsList = <ThrowOnError extends boolean = false>(options?: Options<UnitsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UnitsListResponses, UnitsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/units/',
        ...options
    });
};

/**
 * Delete a translation unit.
 */
export const unitsDestroy = <ThrowOnError extends boolean = false>(options: Options<UnitsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnitsDestroyResponses, UnitsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/units/{id}/',
        ...options
    });
};

/**
 * Return information about translation unit.
 */
export const unitsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UnitsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UnitsRetrieveResponses, UnitsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/units/{id}/',
        ...options
    });
};

/**
 * Perform partial update on translation unit.
 */
export const unitsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UnitsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UnitsPartialUpdateResponses, UnitsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/units/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Perform full update on translation unit.
 */
export const unitsUpdate = <ThrowOnError extends boolean = false>(options: Options<UnitsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UnitsUpdateResponses, UnitsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/units/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Units API.
 */
export const unitsTranslationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UnitsTranslationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UnitsTranslationsRetrieveResponses, UnitsTranslationsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/units/{id}/translations/',
        ...options
    });
};

/**
 * Users API.
 */
export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersListResponses, UsersListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Create a new user.
 */
export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateResponses, UsersCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete all user information and mark the user inactive.
 */
export const usersDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDestroyResponses, UsersDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/',
        ...options
    });
};

/**
 * Return information about users.
 */
export const usersRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersRetrieveResponses, UsersRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/',
        ...options
    });
};

/**
 * Change the user parameters.
 */
export const usersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPartialUpdateResponses, UsersPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change the user parameters.
 */
export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateResponses, UsersUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a user from a group.
 */
export const usersGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersGroupsDestroyResponses, UsersGroupsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/groups/',
        ...options
    });
};

/**
 * Associate groups with a user.
 */
export const usersGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersGroupsCreateResponses, UsersGroupsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List subscriptions of a user.
 */
export const usersNotificationsList = <ThrowOnError extends boolean = false>(options: Options<UsersNotificationsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersNotificationsListResponses, UsersNotificationsListErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/notifications/',
        ...options
    });
};

/**
 * Associate subscriptions with a user.
 */
export const usersNotificationsCreate = <ThrowOnError extends boolean = false>(options: Options<UsersNotificationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersNotificationsCreateResponses, UsersNotificationsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/notifications/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a subscription associated with a user.
 */
export const usersNotificationsDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersNotificationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersNotificationsDestroyResponses, UsersNotificationsDestroyErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/notifications/{subscription_id}/',
        ...options
    });
};

/**
 * Get a subscription associated with a user.
 */
export const usersNotificationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersNotificationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersNotificationsRetrieveResponses, UsersNotificationsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/notifications/{subscription_id}/',
        ...options
    });
};

/**
 * Edit a subscription associated with a user.
 */
export const usersNotificationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersNotificationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersNotificationsPartialUpdateResponses, UsersNotificationsPartialUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/notifications/{subscription_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit a subscription associated with a user.
 */
export const usersNotificationsUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersNotificationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersNotificationsUpdateResponses, UsersNotificationsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/notifications/{subscription_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List statistics of a user.
 */
export const usersStatisticsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersStatisticsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersStatisticsRetrieveResponses, UsersStatisticsRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Token',
                type: 'apiKey'
            },
            {
                name: 'Bearer',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/statistics/',
        ...options
    });
};